/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


#define SWIG_VERSION 0x040101
#define SWIGLUA
#define SWIG_LUA_TARGET SWIG_LUA_FLAVOR_LUA
#define SWIG_LUA_MODULE_GLOBAL

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2
#define SWIG_POINTER_NO_NULL       0x4
#define SWIG_POINTER_CLEAR         0x8
#define SWIG_POINTER_RELEASE       (SWIG_POINTER_CLEAR | SWIG_POINTER_DISOWN)

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows returning the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
/* Runtime errors are < 0 */
#define SWIG_ERROR                 (-1)
/* Errors in range -1 to -99 are in swigerrors.swg (errors for all languages including those not using the runtime) */
/* Errors in range -100 to -199 are language specific errors defined in *errors.swg */
/* Errors < -200 are generic runtime specific errors */
#define SWIG_ERROR_RELEASE_NOT_OWNED (-200)

#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del object mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(const swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  Choose the last
     name. It should be the most specific; a fully resolved name
     but not necessarily with default template parameters expanded. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/* SWIG Errors applicable to all language modules, values are reserved from -1 to -99 */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13


/* -----------------------------------------------------------------------------
 * luarun.swg
 *
 * This file contains the runtime support for Lua modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

#include "lua.h"
#include "lauxlib.h"
#include <stdlib.h>  /* for malloc */
#include <assert.h>  /* for a few sanity tests */

/* -----------------------------------------------------------------------------
 * Lua flavors
 * ----------------------------------------------------------------------------- */

#define SWIG_LUA_FLAVOR_LUA 1
#define SWIG_LUA_FLAVOR_ELUA 2
#define SWIG_LUA_FLAVOR_ELUAC 3

#if !defined(SWIG_LUA_TARGET)
# error SWIG_LUA_TARGET not defined
#endif

#if defined(SWIG_LUA_ELUA_EMULATE)

struct swig_elua_entry;

typedef struct swig_elua_key {
  int type;
  union {
    const char* strkey;
    lua_Number numkey;
  } key;
} swig_elua_key;

typedef struct swig_elua_val {
  int type;
  union {
    lua_Number number;
    const struct swig_elua_entry *table;
    const char *string;
    lua_CFunction function;
    struct {
      char member;
      long lvalue;
      void *pvalue;
      swig_type_info **ptype;
    } userdata;
  } value;
} swig_elua_val;

typedef struct swig_elua_entry {
  swig_elua_key key;
  swig_elua_val value;
} swig_elua_entry;

#define LSTRKEY(x) {LUA_TSTRING, {.strkey = x} }
#define LNUMKEY(x) {LUA_TNUMBER, {.numkey = x} }
#define LNILKEY {LUA_TNIL, {.strkey = 0} }

#define LNUMVAL(x) {LUA_TNUMBER, {.number = x} }
#define LFUNCVAL(x) {LUA_TFUNCTION, {.function = x} }
#define LROVAL(x) {LUA_TTABLE, {.table = x} }
#define LNILVAL {LUA_TNIL, {.string = 0} }
#define LSTRVAL(x) {LUA_TSTRING, {.string = x} }

#define LUA_REG_TYPE swig_elua_entry

#define SWIG_LUA_ELUA_EMUL_METATABLE_KEY "__metatable"

#define lua_pushrotable(L,p)\
  lua_newtable(L);\
  assert(p);\
  SWIG_Lua_elua_emulate_register(L,(swig_elua_entry*)(p));

#define SWIG_LUA_CONSTTAB_POINTER(B,C,D)\
  LSTRKEY(B), {LUA_TUSERDATA, { .userdata={0,0,(void*)(C),&D} } }

#define SWIG_LUA_CONSTTAB_BINARY(B,S,C,D)\
  LSTRKEY(B), {LUA_TUSERDATA, { .userdata={1,S,(void*)(C),&D} } }
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define SWIG_LUA_CONSTTAB_INT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_STRING(B, C) LSTRKEY(B), LSTRVAL(C)
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) LSTRKEY(B), LNUMVAL(C)
    /* Those two types of constants are not supported in elua */

#ifndef SWIG_LUA_CONSTTAB_POINTER
#warning eLua does not support pointers as constants. By default, nil will be used as value
#define SWIG_LUA_CONSTTAB_POINTER(B,C,D) LSTRKEY(B), LNILVAL
#endif

#ifndef SWIG_LUA_CONSTTAB_BINARY
#warning eLua does not support pointers to member as constants. By default, nil will be used as value
#define SWIG_LUA_CONSTTAB_BINARY(B, S, C, D) LSTRKEY(B), LNILVAL
#endif
#else /* SWIG_LUA_FLAVOR_LUA */
#  define SWIG_LUA_CONSTTAB_INT(B, C) SWIG_LUA_INT, (char *)B, (long)C, 0, 0, 0
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) SWIG_LUA_FLOAT, (char *)B, 0, (double)C, 0, 0
#  define SWIG_LUA_CONSTTAB_STRING(B, C) SWIG_LUA_STRING, (char *)B, 0, 0, (void *)C, 0
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) SWIG_LUA_CHAR, (char *)B, (long)C, 0, 0, 0
#  define SWIG_LUA_CONSTTAB_POINTER(B,C,D)\
       SWIG_LUA_POINTER, (char *)B, 0, 0, (void *)C, &D
#  define SWIG_LUA_CONSTTAB_BINARY(B, S, C, D)\
       SWIG_LUA_BINARY,  (char *)B, S, 0, (void *)C, &D
#endif

#ifndef SWIG_LUA_ELUA_EMULATE
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define LRO_STRVAL(v) {{.p = (char *) v}, LUA_TSTRING}
#  define LSTRVAL LRO_STRVAL
#endif
#endif /* SWIG_LUA_ELUA_EMULATE*/

#ifndef SWIG_LUA_ELUA_EMULATE
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)

#ifndef MIN_OPT_LEVEL
#define MIN_OPT_LEVEL 2
#endif

#include "lrodefs.h"
#include "lrotable.h"
#endif
#endif /* SWIG_LUA_ELUA_EMULATE*/
/* -----------------------------------------------------------------------------
 * compatibility defines
 * ----------------------------------------------------------------------------- */

/* History of Lua C API length functions:  In Lua 5.0 (and before?)
   there was "lua_strlen".  In Lua 5.1, this was renamed "lua_objlen",
   but a compatibility define of "lua_strlen" was added.  In Lua 5.2,
   this function was again renamed, to "lua_rawlen" (to emphasize that
   it doesn't call the "__len" metamethod), and the compatibility
   define of lua_strlen was removed.  All SWIG uses have been updated
   to "lua_rawlen", and we add our own defines of that here for older
   versions of Lua.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 501
# define lua_rawlen lua_strlen
#elif LUA_VERSION_NUM == 501
# define lua_rawlen lua_objlen
#endif


/* lua_pushglobaltable is the recommended "future-proof" way to get
   the global table for Lua 5.2 and later.  Here we define
   lua_pushglobaltable ourselves for Lua versions before 5.2.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
# define lua_pushglobaltable(L) lua_pushvalue(L, LUA_GLOBALSINDEX)
#endif

/* lua_absindex was introduced in Lua 5.2 */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
# define lua_absindex(L,i) ((i)>0 || (i) <= LUA_REGISTRYINDEX ? (i) : lua_gettop(L) + (i) + 1)
#endif

/* lua_rawsetp was introduced in Lua 5.2 */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
#define lua_rawsetp(L,index,ptr)\
  lua_pushlightuserdata(L,(void*)(ptr));\
  lua_insert(L,-2);\
  lua_rawset(L,index);

#define lua_rawgetp(L,index,ptr)\
  lua_pushlightuserdata(L,(void*)(ptr));\
  lua_rawget(L,index);

#endif

/* --------------------------------------------------------------------------
 * Helper functions for error handling
 * -------------------------------------------------------------------------- */

/* Push the string STR on the Lua stack, like lua_pushstring, but
   prefixed with the location of the innermost Lua call-point
   (as formatted by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pusherrstring (lua_State *L, const char *str)
{
  luaL_where (L, 1);
  lua_pushstring (L, str);
  lua_concat (L, 2);
}

/* Push a formatted string generated from FMT and following args on
   the Lua stack, like lua_pushfstring, but prefixed with the
   location of the innermost Lua call-point (as formatted by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pushferrstring (lua_State *L, const char *fmt, ...)
{
  va_list argp;
  va_start(argp, fmt);
  luaL_where(L, 1);
  lua_pushvfstring(L, fmt, argp);
  va_end(argp);
  lua_concat(L, 2);
}


/* -----------------------------------------------------------------------------
 * global swig types
 * ----------------------------------------------------------------------------- */
/* Constant table */
#define SWIG_LUA_INT     1
#define SWIG_LUA_FLOAT   2
#define SWIG_LUA_STRING  3
#define SWIG_LUA_POINTER 4
#define SWIG_LUA_BINARY  5
#define SWIG_LUA_CHAR    6

/* Structure for variable linking table */
typedef struct {
  const char *name;
  lua_CFunction get;
  lua_CFunction set;
} swig_lua_var_info;

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
typedef const LUA_REG_TYPE swig_lua_method;
typedef const LUA_REG_TYPE swig_lua_const_info;
#else /* Normal lua */
typedef luaL_Reg swig_lua_method;

/* Constant information structure */
typedef struct {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_lua_const_info;

#endif

typedef struct {
  const char     *name;
  lua_CFunction   getmethod;
  lua_CFunction   setmethod;
} swig_lua_attribute;


struct swig_lua_class;
/* Can be used to create namespaces. Currently used to wrap class static methods/variables/constants */
typedef struct swig_lua_namespace {
  const char            *name;
  swig_lua_method       *ns_methods;
  swig_lua_attribute    *ns_attributes;
  swig_lua_const_info   *ns_constants;
  struct swig_lua_class        **ns_classes;
  struct swig_lua_namespace    **ns_namespaces;
} swig_lua_namespace;

typedef struct swig_lua_class {
  const char    *name; /* Name that this class has in Lua */
  const char    *fqname; /* Fully qualified name - Scope + class name */
  swig_type_info   **type;
  lua_CFunction  constructor;
  void    (*destructor)(void *);
  swig_lua_method   *methods;
  swig_lua_attribute     *attributes;
  swig_lua_namespace    *cls_static;
  swig_lua_method   *metatable; /* 0 for -eluac */
  struct swig_lua_class **bases;
  const char **base_names;
} swig_lua_class;

/* this is the struct for wrapping all pointers in SwigLua
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  void        *ptr;
} swig_lua_userdata;

/* this is the struct for wrapping arbitrary packed binary data
(currently it is only used for member function pointers)
the data ordering is similar to swig_lua_userdata, but it is currently not possible
to tell the two structures apart within SWIG, other than by looking at the type
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  char data[1];       /* arbitrary amount of data */
} swig_lua_rawdata;

/* Common SWIG API */
#define SWIG_NewPointerObj(L, ptr, type, owner)       SWIG_Lua_NewPointerObj(L, (void *)ptr, type, owner)
#define SWIG_ConvertPtr(L,idx, ptr, type, flags)    SWIG_Lua_ConvertPtr(L,idx,ptr,type,flags)
#define SWIG_MustGetPtr(L,idx, type,flags, argnum,fnname)  SWIG_Lua_MustGetPtr(L,idx, type,flags, argnum,fnname)
/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(L, idx, ptr, sz, ty)       SWIG_Lua_ConvertPacked(L, idx, ptr, sz, ty)
#define SWIG_NewMemberObj(L, ptr, sz, type)      SWIG_Lua_NewPackedObj(L, ptr, sz, type)

/* Runtime API */
#define SWIG_GetModule(clientdata) SWIG_Lua_GetModule((lua_State*)(clientdata))
#define SWIG_SetModule(clientdata, pointer) SWIG_Lua_SetModule((lua_State*) (clientdata), pointer)
#define SWIG_MODULE_CLIENTDATA_TYPE lua_State*

/* Contract support */
#define SWIG_contract_assert(expr, msg)  \
  do { if (!(expr)) { SWIG_Lua_pusherrstring(L, (char *) msg); goto fail; } } while (0)


/* helper #defines */
#define SWIG_fail {goto fail;}
#define SWIG_fail_arg(func_name,argnum,type) \
  {SWIG_Lua_pushferrstring(L,"Error in %s (arg %d), expected '%s' got '%s'",\
  func_name,argnum,type,SWIG_Lua_typename(L,argnum));\
  goto fail;}
#define SWIG_fail_ptr(func_name,argnum,type) \
  SWIG_fail_arg(func_name,argnum,(type && type->str)?type->str:"void*")
#define SWIG_check_num_args(func_name,a,b) \
  if (lua_gettop(L)<a || lua_gettop(L)>b) \
  {SWIG_Lua_pushferrstring(L,"Error in %s expected %d..%d args, got %d",func_name,a,b,lua_gettop(L));\
  goto fail;}


#define SWIG_Lua_get_table(L,n) \
  (lua_pushstring(L, n), lua_rawget(L,-2))

#define SWIG_Lua_add_function(L,n,f) \
  (lua_pushstring(L, n), \
      lua_pushcfunction(L, f), \
      lua_rawset(L,-3))

#define SWIG_Lua_add_boolean(L,n,b) \
  (lua_pushstring(L, n), \
      lua_pushboolean(L, b), \
      lua_rawset(L,-3))

/* special helper for allowing 'nil' for usertypes */
#define SWIG_isptrtype(L,I) (lua_isuserdata(L,I) || lua_isnil(L,I))

#ifdef __cplusplus
/* Special helper for member function pointers
it gets the address, casts it, then dereferences it */
/*#define SWIG_mem_fn_as_voidptr(a)  (*((char**)&(a))) */
#endif

/* storing/access of swig_module_info */
SWIGRUNTIME swig_module_info *
SWIG_Lua_GetModule(lua_State *L) {
  swig_module_info *ret = 0;
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_rawget(L,LUA_REGISTRYINDEX);
  if (lua_islightuserdata(L,-1))
    ret=(swig_module_info*)lua_touserdata(L,-1);
  lua_pop(L,1);  /* tidy */
  return ret;
}

SWIGRUNTIME void
SWIG_Lua_SetModule(lua_State *L, swig_module_info *module) {
  /* add this all into the Lua registry: */
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_pushlightuserdata(L,(void*)module);
  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* -----------------------------------------------------------------------------
 * global variable support code: modules
 * ----------------------------------------------------------------------------- */

/* this function is called when trying to set an immutable.
default action is to print an error.
This can removed with a compile flag SWIGLUA_IGNORE_SET_IMMUTABLE */
SWIGINTERN int SWIG_Lua_set_immutable(lua_State *L)
{
/*  there should be 1 param passed in: the new value */
#ifndef SWIGLUA_IGNORE_SET_IMMUTABLE
  lua_pop(L,1);  /* remove it */
  luaL_error(L,"This variable is immutable");
#endif
    return 0;   /* should not return anything */
}

#ifdef SWIG_LUA_ELUA_EMULATE

SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State *L,void *ptr,swig_type_info *type, int own);
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State *L,void *ptr,size_t size,swig_type_info *type);
static int swig_lua_elua_emulate_unique_key;

/* This function emulates eLua rotables behaviour. It loads a rotable definition into the usual lua table. */
SWIGINTERN void SWIG_Lua_elua_emulate_register(lua_State *L, const swig_elua_entry *table)
{
  int i, table_parsed, parsed_tables_array, target_table;
  assert(lua_istable(L,-1));
  target_table = lua_gettop(L);
  /* Get the registry where we put all parsed tables to avoid loops */
  lua_rawgetp(L, LUA_REGISTRYINDEX, &swig_lua_elua_emulate_unique_key);
  if(lua_isnil(L,-1)) {
    lua_pop(L,1);
    lua_newtable(L);
    lua_pushvalue(L,-1);
    lua_rawsetp(L,LUA_REGISTRYINDEX,(void*)(&swig_lua_elua_emulate_unique_key));
  }
  parsed_tables_array = lua_gettop(L);
  lua_pushvalue(L,target_table);
  lua_rawsetp(L, parsed_tables_array, table);
  table_parsed = 0;
  const int SWIGUNUSED pairs_start = lua_gettop(L);
  for(i = 0;table[i].key.type != LUA_TNIL || table[i].value.type != LUA_TNIL;i++)
  {
    const swig_elua_entry *entry = table + i;
    int is_metatable = 0;
    switch(entry->key.type) {
      case LUA_TSTRING:
        lua_pushstring(L,entry->key.key.strkey);
        if(strcmp(entry->key.key.strkey, SWIG_LUA_ELUA_EMUL_METATABLE_KEY) == 0)
          is_metatable = 1;
        break;
      case  LUA_TNUMBER:
        lua_pushnumber(L,entry->key.key.numkey);
        break;
      case LUA_TNIL:
        lua_pushnil(L);
        break;
      default:
        assert(0);
    }
    switch(entry->value.type) {
      case LUA_TSTRING:
        lua_pushstring(L,entry->value.value.string);
        break;
      case  LUA_TNUMBER:
        lua_pushnumber(L,entry->value.value.number);
        break;
      case LUA_TFUNCTION:
        lua_pushcfunction(L,entry->value.value.function);
        break;
      case LUA_TTABLE:
        lua_rawgetp(L,parsed_tables_array, entry->value.value.table);
        table_parsed = !lua_isnil(L,-1);
        if(!table_parsed) {
          lua_pop(L,1); /*remove nil */
          lua_newtable(L);
          SWIG_Lua_elua_emulate_register(L,entry->value.value.table);
        }
        if(is_metatable) {
          assert(lua_istable(L,-1));
          lua_pushvalue(L,-1);
          lua_setmetatable(L,target_table);
        }

        break;
      case LUA_TUSERDATA:
        if(entry->value.value.userdata.member)
          SWIG_NewMemberObj(L,entry->value.value.userdata.pvalue,
              entry->value.value.userdata.lvalue,
              *(entry->value.value.userdata.ptype));
        else
          SWIG_NewPointerObj(L,entry->value.value.userdata.pvalue,
              *(entry->value.value.userdata.ptype),0);
        break;
      case LUA_TNIL:
        lua_pushnil(L);
        break;
      default:
        assert(0);
    }
    assert(lua_gettop(L) == pairs_start + 2);
    lua_rawset(L,target_table);
  }
  lua_pop(L,1); /* Removing parsed tables storage */
  assert(lua_gettop(L) == target_table);
}

SWIGINTERN void SWIG_Lua_elua_emulate_register_clear(lua_State *L)
{
  lua_pushnil(L);
  lua_rawsetp(L, LUA_REGISTRYINDEX, &swig_lua_elua_emulate_unique_key);
}

SWIGINTERN void SWIG_Lua_get_class_registry(lua_State *L);

SWIGINTERN int SWIG_Lua_emulate_elua_getmetatable(lua_State *L)
{
  SWIG_check_num_args("getmetatable(SWIG eLua emulation)", 1, 1);
  SWIG_Lua_get_class_registry(L);
  lua_getfield(L,-1,"lua_getmetatable");
  lua_remove(L,-2); /* remove the registry*/
  assert(!lua_isnil(L,-1));
  lua_pushvalue(L,1);
  assert(lua_gettop(L) == 3); /* object | function | object again */
  lua_call(L,1,1);
  if(!lua_isnil(L,-1)) /*There is an ordinary metatable */
    return 1;
  /*if it is a table, then emulate elua behaviour - check for __metatable attribute of a table*/
  assert(lua_gettop(L) == 2);
  if(lua_istable(L,-2)) {
    lua_pop(L,1); /*remove the nil*/
    lua_getfield(L,-1, SWIG_LUA_ELUA_EMUL_METATABLE_KEY);
  }
  assert(lua_gettop(L) == 2);
  return 1;

fail:
  lua_error(L);
  return 0;
}

SWIGINTERN void SWIG_Lua_emulate_elua_swap_getmetatable(lua_State *L)
{
  SWIG_Lua_get_class_registry(L);
  lua_pushglobaltable(L);
  lua_pushstring(L,"lua_getmetatable");
  lua_getfield(L,-2,"getmetatable");
  assert(!lua_isnil(L,-1));
  lua_rawset(L,-4);
  lua_pushstring(L, "getmetatable");
  lua_pushcfunction(L, SWIG_Lua_emulate_elua_getmetatable);
  lua_rawset(L,-3);
  lua_pop(L,2);

}
/* END OF REMOVE */

#endif
/* -----------------------------------------------------------------------------
 * global variable support code: namespaces and modules (which are the same thing)
 * ----------------------------------------------------------------------------- */

SWIGINTERN int SWIG_Lua_namespace_get(lua_State *L)
{
/*  there should be 2 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
*/
  assert(lua_istable(L,-2));  /* just in case */
  lua_getmetatable(L,-2);
  assert(lua_istable(L,-1));
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));
  /* look for the key in the .get table */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_call(L,0,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: whether it's a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  return 0;
}

SWIGINTERN int SWIG_Lua_namespace_set(lua_State *L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
*/

  assert(lua_istable(L,1));
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,1,0);
      return 0;
    }
    lua_pop(L,1);  /* remove the value */
  }
  lua_pop(L,1);  /* remove the value .set table */
  lua_pop(L,1); /* remote metatable */
  lua_rawset(L,-3);
  return 0;
}

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA) /* In elua this is useless */
SWIGINTERN void SWIG_Lua_InstallConstants(lua_State *L, swig_lua_const_info constants[]); /* forward declaration */
SWIGINTERN void  SWIG_Lua_add_variable(lua_State *L,const char *name,lua_CFunction getFn,lua_CFunction setFn); /* forward declaration */
SWIGINTERN void  SWIG_Lua_class_register(lua_State *L,swig_lua_class *clss);

/* helper function - register namespace methods and attributes into namespace */
SWIGINTERN int SWIG_Lua_add_namespace_details(lua_State *L, swig_lua_namespace *ns)
{
  int i;
  /* There must be namespace table (not metatable) at the top of the stack */
  assert(lua_istable(L,-1));
  SWIG_Lua_InstallConstants(L, ns->ns_constants);

  /* add methods to the namespace/module table */
  for(i=0;ns->ns_methods[i].name;i++){
    SWIG_Lua_add_function(L,ns->ns_methods[i].name,ns->ns_methods[i].func);
  }
  lua_getmetatable(L,-1);

  /* add fns */
  for(i=0;ns->ns_attributes[i].name;i++){
    SWIG_Lua_add_variable(L,ns->ns_attributes[i].name,ns->ns_attributes[i].getmethod,ns->ns_attributes[i].setmethod);
  }

  /* clear stack - remove metatble */
  lua_pop(L,1);
  return 0;
}

/* Register all classes in the namespace */
SWIGINTERN void SWIG_Lua_add_namespace_classes(lua_State *L, swig_lua_namespace *ns)
{
  swig_lua_class **classes;

  /* There must be a module/namespace table at the top of the stack */
  assert(lua_istable(L,-1));

  classes = ns->ns_classes;

  if( classes != 0 ) {
    while(*classes != 0) {
      SWIG_Lua_class_register(L, *classes);
      classes++;
    }
  }
}

/* Helper function. Creates namespace table and adds it to module table
   if 'reg' is true, then will register namespace table to parent one (must be on top of the stack
   when function is called).
   Function always returns newly registered table on top of the stack.
*/
SWIGINTERN void SWIG_Lua_namespace_register(lua_State *L, swig_lua_namespace *ns, int reg)
{
  swig_lua_namespace **sub_namespace;
  /* 1 argument - table on the top of the stack */
  const int SWIGUNUSED begin = lua_gettop(L);
  assert(lua_istable(L,-1)); /* just in case. This is supposed to be module table or parent namespace table */
  lua_checkstack(L,5);
  lua_newtable(L); /* namespace itself */
  lua_newtable(L); /* metatable for namespace */

  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  lua_rawset(L,-3);

  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_namespace_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_namespace_set);

  lua_setmetatable(L,-2); /* set metatable */

  /* Register all functions, variables etc */
  SWIG_Lua_add_namespace_details(L,ns);
  /* Register classes */
  SWIG_Lua_add_namespace_classes(L,ns);

  sub_namespace = ns->ns_namespaces;
  if( sub_namespace != 0) {
    while(*sub_namespace != 0) {
      SWIG_Lua_namespace_register(L, *sub_namespace, 1);
      lua_pop(L,1); /* removing sub-namespace table */
      sub_namespace++;
    }
  }

  if (reg) {
    lua_pushstring(L,ns->name);
    lua_pushvalue(L,-2);
    lua_rawset(L,-4); /* add namespace to module table */
  }
  assert(lua_gettop(L) == begin+1);
}
#endif /* SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA */

/* -----------------------------------------------------------------------------
 * global variable support code: classes
 * ----------------------------------------------------------------------------- */

SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State *L,const char *cname);

typedef int (*swig_lua_base_iterator_func)(lua_State*,swig_type_info*, int, int *ret);

SWIGINTERN int SWIG_Lua_iterate_bases(lua_State *L, swig_type_info * SWIGUNUSED swig_type,
  int first_arg, swig_lua_base_iterator_func func, int  *const ret)
{
    /* first_arg - position of the object in stack. Everything that is above are arguments
     * and is passed to every evocation of the func */
    int last_arg = lua_gettop(L);/* position of last argument */
    int original_metatable = last_arg + 1;
    size_t bases_count;
    int result = SWIG_ERROR;
    int bases_table;
    (void)swig_type;
    lua_getmetatable(L,first_arg);

    /* initialise base search */
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
    SWIG_Lua_get_table(L,".bases");
    assert(lua_istable(L,-1));
    bases_count = lua_rawlen(L,-1);
    bases_table = lua_gettop(L);
#else
    /* In elua .bases table doesn't exist. Use table from swig_lua_class */
    (void)bases_table;
    assert(swig_type!=0);
    swig_module_info *module=SWIG_GetModule(L);
    swig_lua_class **bases= ((swig_lua_class*)(swig_type->clientdata))->bases;
    const char **base_names= ((swig_lua_class*)(swig_type->clientdata))->base_names;
    bases_count = 0;
    for(;base_names[bases_count];
      bases_count++);/* get length of bases */
#endif

    if(ret)
      *ret = 0;
    if(bases_count>0)
    {
      int to_remove;
      size_t i;
      int j;
      int subcall_last_arg;
      int subcall_first_arg = lua_gettop(L) + 1;/* Here a copy of first_arg and arguments begin */
      int valid = 1;
      swig_type_info *base_swig_type = 0;
      for(j=first_arg;j<=last_arg;j++)
        lua_pushvalue(L,j);
      subcall_last_arg = lua_gettop(L);

      /* Trick: temporarily replacing original metatable with metatable for base class and call getter */
      for(i=0;i<bases_count;i++) {
        /* Iteration through class bases */
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
        lua_rawgeti(L,bases_table,i+1);
        base_swig_type = 0;
        if(lua_isnil(L,-1)) {
          valid = 0;
          lua_pop(L,1);
        } else {
          valid = 1;
        }
#else /* In elua .bases table doesn't exist. Use table from swig_lua_class */
        swig_lua_class *base_class = bases[i];
        if(!base_class) {
          valid = 0;
        } else {
          valid = 1;
          SWIG_Lua_get_class_metatable(L,base_class->fqname);
          base_swig_type = SWIG_TypeQueryModule(module,module,base_names[i]);
          assert(base_swig_type != 0);
        }
#endif

        if(!valid)
          continue;
        assert(lua_isuserdata(L, subcall_first_arg));
        assert(lua_istable(L,-1));
        lua_setmetatable(L,subcall_first_arg); /* Set new metatable */
        assert(lua_gettop(L) == subcall_last_arg);
        result = func(L, base_swig_type,subcall_first_arg, ret); /* Forward call */
        if(result != SWIG_ERROR) {
          break;
        }
      }
      /* Restore original metatable */
      lua_pushvalue(L,original_metatable);
      lua_setmetatable(L,first_arg);
      /* Clear - remove everything between last_arg and subcall_last_arg including */
      to_remove = subcall_last_arg - last_arg;
      for(j=0;j<to_remove;j++)
        lua_remove(L,last_arg+1);
    } else {
      /* Remove everything after last_arg */
      lua_pop(L, lua_gettop(L) - last_arg);
    }
    if(ret) assert(lua_gettop(L) == last_arg + *ret);
    return result;
}

/* The class.get method helper, performs the lookup of class attributes.
 * It returns an error code. Number of function return values is passed inside 'ret'.
 * first_arg is not used in this function because function always has 2 arguments.
 */
SWIGINTERN int  SWIG_Lua_class_do_get_item(lua_State *L, swig_type_info *type, int SWIGUNUSED first_arg, int *ret)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int bases_search_result;
  int substack_start = lua_gettop(L)-2;
  assert(first_arg == substack_start+1);
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  /* NEW: looks for the __getitem() fn
  this is a user provided get fn */
  SWIG_Lua_get_table(L,"__getitem"); /* find the __getitem fn */
  if (lua_iscfunction(L,-1))  /* if it's there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_pushvalue(L,substack_start+2);  /* the parameter */
    lua_call(L,2,1);  /* 2 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret) *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);
  /* Remove the metatable */
  lua_pop(L,1);
  /* Search in base classes */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,substack_start+1,SWIG_Lua_class_do_get_item,ret);
  return bases_search_result;  /* sorry not known */
}


/* The class.get method helper, performs the lookup of class attributes.
 * It returns an error code. Number of function return values is passed inside 'ret'.
 * first_arg is not used in this function because function always has 2 arguments.
 */
SWIGINTERN int  SWIG_Lua_class_do_get(lua_State *L, swig_type_info *type, int SWIGUNUSED first_arg, int *ret)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int bases_search_result;
  int substack_start = lua_gettop(L)-2;
  assert(first_arg == substack_start+1);
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  /* look for the key in the .get table */
  lua_pushvalue(L,substack_start+2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_call(L,1,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret)
      *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,substack_start+2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: if it's a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret)
      *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* Remove the metatable */
  lua_pop(L,1);
  /* Search in base classes */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,substack_start+1,SWIG_Lua_class_do_get,ret);
  return bases_search_result;  /* sorry not known */
}

/* the class.get method, performs the lookup of class attributes
 */
SWIGINTERN int  SWIG_Lua_class_get(lua_State *L)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int result;
  swig_lua_userdata *usr;
  swig_type_info *type;
  int ret = 0;
  assert(lua_isuserdata(L,1));
  usr=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  type = usr->type;
  result = SWIG_Lua_class_do_get(L,type,1,&ret);
  if(result == SWIG_OK)
    return ret;

  result = SWIG_Lua_class_do_get_item(L,type,1,&ret);
  if(result == SWIG_OK)
    return ret;

  return 0;
}

/* helper for the class.set method, performs the lookup of class attributes
 * It returns error code. Number of function return values is passed inside 'ret'
 */
SWIGINTERN int  SWIG_Lua_class_do_set(lua_State *L, swig_type_info *type, int first_arg, int *ret)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
  */

  int bases_search_result;
  int substack_start = lua_gettop(L) - 3;
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,substack_start+1));  /* just in case */
  lua_getmetatable(L,substack_start+1);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  if(ret)
    *ret = 0; /* it is setter - number of return values is always 0 */

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,substack_start+2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,-2); /* tidy stack, remove .set table */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,substack_start+1);  /* userdata */
      lua_pushvalue(L,substack_start+3);  /* value */
      lua_call(L,2,0);
      lua_remove(L,substack_start+4); /*remove metatable*/
      return SWIG_OK;
    }
    lua_pop(L,1);  /* remove the value */
  } else {
    lua_pop(L,1);  /* remove the answer for .set table request*/
  }
  /* NEW: looks for the __setitem() fn
  this is a user provided set fn */
  SWIG_Lua_get_table(L,"__setitem"); /* find the fn */
  if (lua_iscfunction(L,-1))  /* if it's there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_pushvalue(L,substack_start+2);  /* the parameter */
    lua_pushvalue(L,substack_start+3);  /* the value */
    lua_call(L,3,0);  /* 3 values in ,0 out */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return SWIG_OK;
  }
  lua_pop(L,1); /* remove value */

  lua_pop(L,1); /* remove metatable */
  /* Search among bases */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,first_arg,SWIG_Lua_class_do_set,ret);
  if(ret)
    assert(*ret == 0);
  assert(lua_gettop(L) == substack_start + 3);
  return bases_search_result;
}

/* This is the actual method exported to Lua. It calls SWIG_Lua_class_do_set and correctly
 * handles return values.
 */
SWIGINTERN int  SWIG_Lua_class_set(lua_State *L)
{
/*  There should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
  */
  int ret = 0;
  int result;
  swig_lua_userdata *usr;
  swig_type_info *type;
  assert(lua_isuserdata(L,1));
  usr=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  type = usr->type;
  result = SWIG_Lua_class_do_set(L,type,1,&ret);
  if(result != SWIG_OK) {
   SWIG_Lua_pushferrstring(L,"Assignment not possible. No setter/member with this name. For custom assignments implement __setitem method.");
   lua_error(L);
  } else {
    assert(ret==0);
  }
  return 0;
}

/* the class.destruct method called by the interpreter */
SWIGINTERN int  SWIG_Lua_class_destruct(lua_State *L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata *usr;
  swig_lua_class *clss;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */
  /* if must be destroyed & has a destructor */
  if (usr->own) /* if must be destroyed */
  {
    clss=(swig_lua_class*)usr->type->clientdata;  /* get the class */
    if (clss && clss->destructor)  /* there is a destroy fn */
    {
      clss->destructor(usr->ptr);  /* bye bye */
    }
  }
  return 0;
}

/* the class.__tostring method called by the interpreter and print */
SWIGINTERN int  SWIG_Lua_class_tostring(lua_State *L)
{
/*  there should be 1 param passed in
  (1) userdata (not the metatable) */
  swig_lua_userdata* userData;
  assert(lua_isuserdata(L,1));  /* just in case */
  userData = (swig_lua_userdata*)lua_touserdata(L,1); /* get the userdata address */

  lua_pushfstring(L, "<userdata of type '%s' at %p>", userData->type->str, userData->ptr);
  return 1;
}

/* to manually disown some userdata */
SWIGINTERN int  SWIG_Lua_class_disown(lua_State *L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata *usr;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */

  usr->own = 0; /* clear our ownership */
  return 0;
}

/* lua callable function to compare userdata's value
the issue is that two userdata may point to the same thing
but to lua, they are different objects */
SWIGRUNTIME int SWIG_Lua_class_equal(lua_State *L)
{
  int result;
  swig_lua_userdata *usr1,*usr2;
  if (!lua_isuserdata(L,1) || !lua_isuserdata(L,2))  /* just in case */
    return 0;  /* nil reply */
  usr1=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  usr2=(swig_lua_userdata*)lua_touserdata(L,2);  /* get data */
  /*result=(usr1->ptr==usr2->ptr && usr1->type==usr2->type); only works if type is the same*/
  result=(usr1->ptr==usr2->ptr);
   lua_pushboolean(L,result);
  return 1;
}

/* populate table at the top of the stack with metamethods that ought to be inherited */
SWIGINTERN void SWIG_Lua_populate_inheritable_metamethods(lua_State *L)
{
  SWIG_Lua_add_boolean(L, "__add", 1);
  SWIG_Lua_add_boolean(L, "__sub", 1);
  SWIG_Lua_add_boolean(L, "__mul", 1);
  SWIG_Lua_add_boolean(L, "__div", 1);
  SWIG_Lua_add_boolean(L, "__mod", 1);
  SWIG_Lua_add_boolean(L, "__pow", 1);
  SWIG_Lua_add_boolean(L, "__unm", 1);
  SWIG_Lua_add_boolean(L, "__len", 1 );
  SWIG_Lua_add_boolean(L, "__concat", 1 );
  SWIG_Lua_add_boolean(L, "__eq", 1);
  SWIG_Lua_add_boolean(L, "__lt", 1);
  SWIG_Lua_add_boolean(L, "__le", 1);
  SWIG_Lua_add_boolean(L, "__call", 1);
  SWIG_Lua_add_boolean(L, "__tostring", 1);
  SWIG_Lua_add_boolean(L, "__gc", 0);
}

/* creates the swig registry */
SWIGINTERN void SWIG_Lua_create_class_registry(lua_State *L)
{
  /* create main SWIG registry table */
  lua_pushstring(L,"SWIG");
  lua_newtable(L);
  /* populate it with some predefined data */

  /* .library table. Placeholder */
  lua_pushstring(L,".library");
  lua_newtable(L);
  {
    /* list of metamethods that class inherits from its bases */
    lua_pushstring(L,"inheritable_metamethods");
    lua_newtable(L);
    /* populate with list of metamethods */
    SWIG_Lua_populate_inheritable_metamethods(L);
    lua_rawset(L,-3);
  }
  lua_rawset(L,-3);

  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* gets the swig registry (or creates it) */
SWIGINTERN void  SWIG_Lua_get_class_registry(lua_State *L)
{
  /* add this all into the swig registry: */
  lua_pushstring(L,"SWIG");
  lua_rawget(L,LUA_REGISTRYINDEX);  /* get the registry */
  if (!lua_istable(L,-1))  /* not there */
  {  /* must be first time, so add it */
    lua_pop(L,1);  /* remove the result */
    SWIG_Lua_create_class_registry(L);
    /* then get it */
    lua_pushstring(L,"SWIG");
    lua_rawget(L,LUA_REGISTRYINDEX);
  }
}

SWIGINTERN void SWIG_Lua_get_inheritable_metamethods(lua_State *L)
{
  SWIG_Lua_get_class_registry(L);
  lua_pushstring(L, ".library");
  lua_rawget(L,-2);
  assert( !lua_isnil(L,-1) );
  lua_pushstring(L, "inheritable_metamethods");
  lua_rawget(L,-2);

  /* Remove class registry and library table */
  lua_remove(L,-2);
  lua_remove(L,-2);
}

/* Helper function to get the classes metatable from the register */
SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State *L,const char *cname)
{
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,cname);  /* get the name */
  lua_rawget(L,-2);    /* get it */
  lua_remove(L,-2);    /* tidy up (remove registry) */
}

/* Set up the base classes pointers.
Each class structure has a list of pointers to the base class structures.
This function fills them.
It cannot be done at compile time, as this will not work with hireachies
spread over more than one swig file.
Therefore it must be done at runtime, querying the SWIG type system.
*/
SWIGINTERN void SWIG_Lua_init_base_class(lua_State *L,swig_lua_class *clss)
{
  int i=0;
  swig_module_info *module=SWIG_GetModule(L);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* not found yet */
    {
      /* lookup and cache the base class */
      swig_type_info *info = SWIG_TypeQueryModule(module,module,clss->base_names[i]);
      if (info) clss->bases[i] = (swig_lua_class *) info->clientdata;
    }
  }
}

#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
/* Merges two tables  */
SWIGINTERN void SWIG_Lua_merge_tables_by_index(lua_State *L, int target, int source)
{
  /* iterating */
  lua_pushnil(L);
  while (lua_next(L,source) != 0) {
    /* -1 - value, -2 - index */
    /* have to copy to assign */
    lua_pushvalue(L,-2); /* copy of index */
    lua_pushvalue(L,-2); /* copy of value */
    lua_rawset(L, target);
    lua_pop(L,1);
    /* only key is left */
  }
}

/* Merges two tables with given name. original - index of target metatable, base - index of source metatable */
SWIGINTERN void SWIG_Lua_merge_tables(lua_State *L, const char* name, int original, int base)
{
  /* push original[name], then base[name] */
  lua_pushstring(L,name);
  lua_rawget(L,original);
  int original_table = lua_gettop(L);
  lua_pushstring(L,name);
  lua_rawget(L,base);
  int base_table = lua_gettop(L);
  SWIG_Lua_merge_tables_by_index(L, original_table, base_table);
  /* clearing stack */
  lua_pop(L,2);
}

/* Function takes all symbols from base and adds it to derived class. It's just a helper. */
SWIGINTERN void SWIG_Lua_class_squash_base(lua_State *L, swig_lua_class *base_cls)
{
  /* There is one parameter - original, i.e. 'derived' class metatable */
  assert(lua_istable(L,-1));
  int original = lua_gettop(L);
  SWIG_Lua_get_class_metatable(L,base_cls->fqname);
  int base = lua_gettop(L);
  SWIG_Lua_merge_tables(L, ".fn", original, base );
  SWIG_Lua_merge_tables(L, ".set", original, base );
  SWIG_Lua_merge_tables(L, ".get", original, base );
  lua_pop(L,1);
}

/* Function squashes all symbols from 'clss' bases into itself */
SWIGINTERN void  SWIG_Lua_class_squash_bases(lua_State *L, swig_lua_class *clss)
{
  int i;
  SWIG_Lua_get_class_metatable(L,clss->fqname);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* Somehow it's not found. Skip it */
      continue;
    /* Thing is: all bases are already registered. Thus they have already executed
     * this function. So we just need to squash them into us, because their bases
     * are already squashed into them. No need for recursion here!
     */
    SWIG_Lua_class_squash_base(L, clss->bases[i]);
  }
  lua_pop(L,1); /*tidy stack*/
}
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA) /* In elua this is useless */
/* helper add a variable to a registered class */
SWIGINTERN void  SWIG_Lua_add_variable(lua_State *L,const char *name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* just in case */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
}

/* helper to recursively add class static details (static attributes, operations and constants) */
SWIGINTERN void SWIG_Lua_add_class_static_details(lua_State *L, swig_lua_class *clss)
{
  int i = 0;
  /* The class namespace table must be on the top of the stack */
  assert(lua_istable(L,-1));
  /* call all the base classes first: we can then override these later: */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_add_class_static_details(L,clss->bases[i]);
  }

  SWIG_Lua_add_namespace_details(L, clss->cls_static);
}

SWIGINTERN void SWIG_Lua_add_class_user_metamethods(lua_State *L, swig_lua_class *clss); /* forward declaration */

/* helper to recursively add class details (attributes & operations) */
SWIGINTERN void  SWIG_Lua_add_class_instance_details(lua_State *L, swig_lua_class *clss)
{
  int i;
  size_t bases_count = 0;
  /* Add bases to .bases table */
  SWIG_Lua_get_table(L,".bases");
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_get_class_metatable(L,clss->bases[i]->fqname);
    /* Base class must be already registered */
    assert(lua_istable(L,-1));
    lua_rawseti(L,-2,i+1); /* In lua indexing starts from 1 */
    bases_count++;
  }
  assert(lua_rawlen(L,-1) == bases_count);
  lua_pop(L,1); /* remove .bases table */
  /* add attributes */
  for(i=0;clss->attributes[i].name;i++){
    SWIG_Lua_add_variable(L,clss->attributes[i].name,clss->attributes[i].getmethod,clss->attributes[i].setmethod);
  }
  /* add methods to the metatable */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->methods[i].name;i++){
    SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].func);
  }
  lua_pop(L,1);       /* tidy stack (remove table) */
  /* add operator overloads
    This adds methods from metatable array to metatable. Can mess up garbage
    collectind if someone defines __gc method
    */
  if(clss->metatable) {
    for(i=0;clss->metatable[i].name;i++) {
      SWIG_Lua_add_function(L,clss->metatable[i].name,clss->metatable[i].func);
    }
  }

#if !defined(SWIG_LUA_SQUASH_BASES)
  /* Adding metamethods that are defined in base classes. If bases were squashed
   * then it is obviously unnecessary
   */
  SWIG_Lua_add_class_user_metamethods(L, clss);
#endif
}

/* Helpers to add user defined class metamedhods - __add, __sub etc. The helpers are needed
   for the following issue: Lua runtime checks for metamethod existence with rawget function
   ignoring our SWIG-provided __index and __newindex functions. Thus our inheritance-aware method
   search algorithm doesn't work in such case. (Not to say that Lua runtime queries metamethod directly
   in metatable and not in object).
   Current solution is this: if somewhere in hierarchy metamethod __x is defined, then all descendants
   are automatically given a special proxy __x that calls the real __x method.
   Obvious idea - to copy __x instead of creating __x-proxy is wrong because if someone changes __x in runtime,
   those changes must be reflected in all descendants.
*/

SWIGRUNTIME int SWIG_Lua_resolve_metamethod(lua_State *L); /*forward declaration*/

/* The real function that resolves a metamethod.
 * Function searches given class and all its bases (recursively) for first instance of something that is
 * not equal to SWIG_Lua_resolve_metamethod. (Almost always this 'something' is actual metamethod implementation
 * and it is a SWIG-generated C function.). It returns value on the top of the L and there is no garbage below the
 * answer.
 * Returns 1 if found, 0 otherwise.
 * clss is class which metatable we will search for method
 * metamethod_name_idx is index in L where metamethod name (as string) lies
 * skip_check allows skipping searching metamethod in the given class and immediately going to searching in bases. skip_check
 * is not carried to subsequent recursive calls - false is always passed. It is set to true only at first call from
 * SWIG_Lua_resolve_metamethod
 * */
SWIGINTERN int SWIG_Lua_do_resolve_metamethod(lua_State *L, const swig_lua_class *clss, int metamethod_name_idx,
    int skip_check)
{
  /* This function is called recursively */
  int result = 0;
  int i = 0;

  if (!skip_check) {
    SWIG_Lua_get_class_metatable(L, clss->fqname);
    lua_pushvalue(L, metamethod_name_idx);
    lua_rawget(L,-2);
    /* If this is cfunction and it is equal to SWIG_Lua_resolve_metamethod then
     * this isn't the function we are looking for :)
     * lua_tocfunction will return NULL if not cfunction
     */
    if (!lua_isnil(L,-1) && lua_tocfunction(L,-1) != SWIG_Lua_resolve_metamethod ) {
      lua_remove(L,-2); /* removing class metatable */
      return 1;
    }
    lua_pop(L,2); /* remove class metatable and query result */
  }

  /* Forwarding calls to bases */
  for(i=0;clss->bases[i];i++)
  {
    result = SWIG_Lua_do_resolve_metamethod(L, clss->bases[i], metamethod_name_idx, 0);
    if (result)
      break;
  }

  return result;
}

/* The proxy function for metamethod. All parameters are passed as cclosure. Searches for actual method
 * and calls it */
SWIGRUNTIME int SWIG_Lua_resolve_metamethod(lua_State *L)
{
  int numargs;
  int metamethod_name_idx;
  const swig_lua_class* clss;
  int result;

  lua_checkstack(L,5);
  numargs = lua_gettop(L); /* number of arguments to pass to actual metamethod */

  /* Get upvalues from closure */
  lua_pushvalue(L, lua_upvalueindex(1)); /*Get function name*/
  metamethod_name_idx = lua_gettop(L);

  lua_pushvalue(L, lua_upvalueindex(2));
  clss = (const swig_lua_class*)(lua_touserdata(L,-1));
  lua_pop(L,1); /* remove lightuserdata with clss from stack */

  /* Actual work */
  result = SWIG_Lua_do_resolve_metamethod(L, clss, metamethod_name_idx, 1);
  if (!result) {
   SWIG_Lua_pushferrstring(L,"The metamethod proxy is set, but it failed to find actual metamethod. Memory corruption is most likely explanation.");
   lua_error(L);
   return 0;
  }

  lua_remove(L,-2); /* remove metamethod key */
  lua_insert(L,1); /* move function to correct position */
  lua_call(L, numargs, LUA_MULTRET);
  return lua_gettop(L); /* return all results */
}


/* If given metamethod must be present in given class, then creates appropriate proxy
 * Returns 1 if successfully added, 0 if not added because no base class has it, -1
 * if method is defined in the class metatable itself
 */
SWIGINTERN int SWIG_Lua_add_class_user_metamethod(lua_State *L, swig_lua_class *clss, const int metatable_index)
{
  int key_index;
  int success = 0;
  int i = 0;

  /* metamethod name - on the top of the stack */
  assert(lua_isstring(L,-1));

  key_index = lua_gettop(L);

  /* Check whether method is already defined in metatable */
  lua_pushvalue(L,key_index); /* copy of the key */
  lua_gettable(L,metatable_index);
  if( !lua_isnil(L,-1) ) {
    lua_pop(L,1);
    return -1;
  }
  lua_pop(L,1);

  /* Iterating over immediate bases */
  for(i=0;clss->bases[i];i++)
  {
    const swig_lua_class *base = clss->bases[i];
    SWIG_Lua_get_class_metatable(L, base->fqname);
    lua_pushvalue(L, key_index);
    lua_rawget(L, -2);
    if( !lua_isnil(L,-1) ) {
      lua_pushvalue(L, key_index);

      /* Add proxy function */
      lua_pushvalue(L, key_index); /* first closure value is function name */
      lua_pushlightuserdata(L, clss); /* second closure value is swig_lua_class structure */
      lua_pushcclosure(L, SWIG_Lua_resolve_metamethod, 2);

      lua_rawset(L, metatable_index);
      success = 1;
    }
    lua_pop(L,1); /* remove function or nil */
    lua_pop(L,1); /* remove base class metatable */

    if( success )
      break;
  }

  return success;
}

SWIGINTERN void SWIG_Lua_add_class_user_metamethods(lua_State *L, swig_lua_class *clss)
{
  int metatable_index;
  int metamethods_info_index;
  int tostring_undefined;
  int eq_undefined = 0;

  SWIG_Lua_get_class_metatable(L, clss->fqname);
  metatable_index = lua_gettop(L);
  SWIG_Lua_get_inheritable_metamethods(L);
  assert(lua_istable(L,-1));
  metamethods_info_index = lua_gettop(L);
  lua_pushnil(L); /* first key */
  while(lua_next(L, metamethods_info_index) != 0 ) {
    /* key at index -2, value at index -1 */
    const int is_inheritable = lua_toboolean(L,-2);
    lua_pop(L,1); /* remove value - we don't need it anymore */

    if(is_inheritable) { /* if metamethod is inheritable */
      SWIG_Lua_add_class_user_metamethod(L,clss,metatable_index);
    }
  }

  lua_pop(L,1); /* remove inheritable metamethods table */

  /* Special handling for __tostring method */
  lua_pushstring(L, "__tostring");
  lua_pushvalue(L,-1);
  lua_rawget(L,metatable_index);
  tostring_undefined = lua_isnil(L,-1);
  lua_pop(L,1);
  if( tostring_undefined ) {
    lua_pushcfunction(L, SWIG_Lua_class_tostring);
    lua_rawset(L, metatable_index);
  } else {
    lua_pop(L,1); /* remove copy of the key */
  }

  /* Special handling for __eq method */
  lua_pushstring(L, "__eq");
  lua_pushvalue(L,-1);
  lua_rawget(L,metatable_index);
  eq_undefined = lua_isnil(L,-1);
  lua_pop(L,1);
  if( eq_undefined ) {
    lua_pushcfunction(L, SWIG_Lua_class_equal);
    lua_rawset(L, metatable_index);
  } else {
    lua_pop(L,1); /* remove copy of the key */
  }
  /* Warning: __index and __newindex are SWIG-defined. For user-defined operator[]
   * a __getitem/__setitem method should be defined
   */
  lua_pop(L,1); /* pop class metatable */
}

/* Register class static methods,attributes etc as well as constructor proxy */
SWIGINTERN void SWIG_Lua_class_register_static(lua_State *L, swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  lua_checkstack(L,5); /* just in case */
  assert(lua_istable(L,-1));  /* just in case */
  assert(strcmp(clss->name, clss->cls_static->name) == 0); /* in class those 2 must be equal */

  SWIG_Lua_namespace_register(L,clss->cls_static, 1);

  assert(lua_istable(L,-1)); /* just in case */

  /*  add its constructor to module with the name of the class
  so you can do MyClass(...) as well as new_MyClass(...)
  BUT only if a constructor is defined
  (this overcomes the problem of pure virtual classes without constructors)*/
  if (clss->constructor)
  {
    lua_getmetatable(L,-1);
    assert(lua_istable(L,-1)); /* just in case */
    SWIG_Lua_add_function(L,"__call", clss->constructor);
    lua_pop(L,1);
  }

  assert(lua_istable(L,-1)); /* just in case */
  SWIG_Lua_add_class_static_details(L, clss);

  /* clear stack */
  lua_pop(L,1);
  assert( lua_gettop(L) == begin );
}

/* Performs the instance (non-static) class registration process. Metatable for class is created
 * and added to the class registry.
 */
SWIGINTERN void  SWIG_Lua_class_register_instance(lua_State *L,swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  int i;
  /* if name already there (class is already registered) then do nothing */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_rawget(L,-2);
  if(!lua_isnil(L,-1)) {
    lua_pop(L,2);
    assert(lua_gettop(L)==begin);
    return;
  }
  lua_pop(L,2); /* tidy stack */
  /* Recursively initialize all bases */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_class_register_instance(L,clss->bases[i]);
  }
  /* Again, get registry and push name */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_newtable(L);    /* create the metatable */
#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  /* If squashing is requested, then merges all bases metatable into this one.
   * It would get us all special methods: __getitem, __add etc.
   * This would set .fn, .type, and other .xxx incorrectly, but we will overwrite it right away
   */
  {
    int new_metatable_index = lua_absindex(L,-1);
    for(i=0;clss->bases[i];i++)
    {
      int base_metatable;
      SWIG_Lua_get_class_metatable(L,clss->bases[i]->fqname);
      base_metatable = lua_absindex(L,-1);
      SWIG_Lua_merge_tables_by_index(L,new_metatable_index, base_metatable);
      lua_pop(L,1);
    }
  }
  /* And now we will overwrite all incorrectly set data */
#endif
  /* add string of class name called ".type" */
  lua_pushstring(L,".type");
  lua_pushstring(L,clss->fqname);
  lua_rawset(L,-3);
  /* add a table called bases */
  lua_pushstring(L,".bases");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  /* add manual disown method */
  SWIG_Lua_add_function(L,"__disown",SWIG_Lua_class_disown);
  lua_rawset(L,-3);
  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_class_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_class_set);
  SWIG_Lua_add_function(L,"__gc",SWIG_Lua_class_destruct);
  /* add it */
  lua_rawset(L,-3);  /* metatable into registry */
  lua_pop(L,1);      /* tidy stack (remove registry) */
  assert(lua_gettop(L) == begin);

#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  /* Now merge all symbols from .fn, .set, .get etc from bases to our tables */
  SWIG_Lua_class_squash_bases(L,clss);
#endif
  SWIG_Lua_get_class_metatable(L,clss->fqname);
  SWIG_Lua_add_class_instance_details(L,clss);  /* recursive adding of details (atts & ops) */
  lua_pop(L,1);      /* tidy stack (remove class metatable) */
  assert( lua_gettop(L) == begin );
}

SWIGINTERN void  SWIG_Lua_class_register(lua_State *L,swig_lua_class *clss)
{
  int SWIGUNUSED begin;
  assert(lua_istable(L,-1)); /* This is a table (module or namespace) where classes will be added */
  SWIG_Lua_class_register_instance(L,clss);
  SWIG_Lua_class_register_static(L,clss);

  /* Add links from static part to instance part and vice versa */
  /* [SWIG registry]                                   [Module]
   *    "MyClass" ----> [MyClass metatable] <=====     "MyClass" -+> [static part]
   *                     ".get" ----> ...        |                |     getmetatable()----|
   *                     ".set" ----> ...        |                |                       |
   *                     ".static" --------------)----------------/           [static part metatable]
   *                                             |                                ".get" --> ...
   *                                             |                                ".set" --> ....
   *                                             |=============================== ".instance"
   */
  begin = lua_gettop(L);
  lua_pushstring(L,clss->cls_static->name);
  lua_rawget(L,-2); /* get class static table */
  assert(lua_istable(L,-1));
  lua_getmetatable(L,-1);
  assert(lua_istable(L,-1)); /* get class static metatable */
  lua_pushstring(L,".instance"); /* prepare key */

  SWIG_Lua_get_class_metatable(L,clss->fqname); /* get class metatable */
  assert(lua_istable(L,-1));
  lua_pushstring(L,".static"); /* prepare key */
  lua_pushvalue(L, -4); /* push static class TABLE */
  assert(lua_istable(L,-1));
  lua_rawset(L,-3); /* assign static class table(!NOT metatable) as ".static" member of class metatable */
  lua_rawset(L,-3); /* assign class metatable as ".instance" member of class static METATABLE */
  lua_pop(L,2);
  assert(lua_gettop(L) == begin);
}
#endif /* SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA */

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
SWIGINTERN void SWIG_Lua_elua_class_register_instance(lua_State *L, swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  int i;
  /* if name already there (class is already registered) then do nothing */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_rawget(L,-2);
  if(!lua_isnil(L,-1)) {
    lua_pop(L,2);
    assert(lua_gettop(L)==begin);
    return;
  }
  lua_pop(L,2); /* tidy stack */
  /* Recursively initialize all bases */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_elua_class_register_instance(L,clss->bases[i]);
  }
  /* Again, get registry and push name */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  assert(clss->metatable);
  lua_pushrotable(L, (void*)(clss->metatable));    /* create the metatable */
  lua_rawset(L,-3);
  lua_pop(L,1);
  assert(lua_gettop(L) == begin);
}
#endif /* elua && eluac */

/* -----------------------------------------------------------------------------
 * Class/structure conversion fns
 * ----------------------------------------------------------------------------- */

/* helper to add metatable to new lua object */
SWIGINTERN void SWIG_Lua_AddMetatable(lua_State *L,swig_type_info *type)
{
  if (type->clientdata)  /* there is clientdata: so add the metatable */
  {
    SWIG_Lua_get_class_metatable(L,((swig_lua_class*)(type->clientdata))->fqname);
    if (lua_istable(L,-1))
    {
      lua_setmetatable(L,-2);
    }
    else
    {
      lua_pop(L,1);
    }
  }
}

/* pushes a new object into the lua stack */
SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State *L,void *ptr,swig_type_info *type, int own)
{
  swig_lua_userdata *usr;
  if (!ptr){
    lua_pushnil(L);
    return;
  }
  usr=(swig_lua_userdata*)lua_newuserdata(L,sizeof(swig_lua_userdata));  /* get data */
  usr->ptr=ptr;  /* set the ptr */
  usr->type=type;
  usr->own=own;
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  SWIG_Lua_AddMetatable(L,type); /* add metatable */
#endif
}

/* takes a object from the lua stack & converts it into an object of the correct type
 (if possible) */
SWIGRUNTIME int  SWIG_Lua_ConvertPtr(lua_State *L,int index,void **ptr,swig_type_info *type,int flags)
{
  int ret = SWIG_ERROR;
  swig_lua_userdata *usr;
  swig_cast_info *cast;
  /* special case: lua nil => NULL pointer */
  if (lua_isnil(L,index))
  {
    *ptr=0;
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }
  if (lua_islightuserdata(L,index))
  {
    *ptr=lua_touserdata(L,index);
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }
  usr=(swig_lua_userdata*)lua_touserdata(L,index);  /* get data */
  if (usr)
  {
    if (((flags & SWIG_POINTER_RELEASE) == SWIG_POINTER_RELEASE) && !usr->own)
    {
      return SWIG_ERROR_RELEASE_NOT_OWNED;
    }
    if (flags & SWIG_POINTER_DISOWN) /* must disown the object */
    {
      usr->own = 0;
    }
    if (!type)            /* special cast void*, no casting fn */
    {
      *ptr=usr->ptr;
      ret = SWIG_OK;
    }
    else
    {
      cast=SWIG_TypeCheck(usr->type->name,type); /* performs normal type checking */
      if (cast)
      {
        int newmemory = 0;
        *ptr=SWIG_TypeCast(cast,usr->ptr,&newmemory);
        assert(!newmemory); /* newmemory handling not yet implemented */
        ret = SWIG_OK;
      }
    }
    if ((ret == SWIG_OK) && (flags & SWIG_POINTER_CLEAR))
    {
      usr->ptr = 0;
    }
  }
  return ret;
}

SWIGRUNTIME void* SWIG_Lua_MustGetPtr(lua_State *L,int index,swig_type_info *type,int flags,
       int argnum,const char *func_name){
  void *result = 0;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,index,&result,type,flags))){
    luaL_error (L,"Error in %s, expected a %s at argument number %d\n",
		func_name,(type && type->str)?type->str:"void*",argnum);
  }
  return result;
}

/* pushes a packed userdata. user for member fn pointers only */
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State *L,void *ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata *raw;
  assert(ptr); /* not acceptable to pass in a NULL value */
  raw=(swig_lua_rawdata*)lua_newuserdata(L,sizeof(swig_lua_rawdata)-1+size);  /* alloc data */
  raw->type=type;
  raw->own=0;
  memcpy(raw->data,ptr,size); /* copy the data */
  SWIG_Lua_AddMetatable(L,type); /* add metatable */
}

/* converts a packed userdata. user for member fn pointers only */
SWIGRUNTIME int  SWIG_Lua_ConvertPacked(lua_State *L,int index,void *ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata *raw;
  raw=(swig_lua_rawdata*)lua_touserdata(L,index);  /* get data */
  if (!raw) return SWIG_ERROR;  /* error */
  if (type==0 || type==raw->type) /* void* or identical type */
  {
    memcpy(ptr,raw->data,size); /* copy it */
    return SWIG_OK; /* ok */
  }
  return SWIG_ERROR;  /* error */
}

/* a function to get the typestring of a piece of data */
SWIGRUNTIME const char *SWIG_Lua_typename(lua_State *L, int tp)
{
  swig_lua_userdata *usr;
  if (lua_isuserdata(L,tp))
  {
    usr=(swig_lua_userdata*)lua_touserdata(L,tp);  /* get data */
    if (usr && usr->type && usr->type->str)
      return usr->type->str;
    return "userdata (unknown type)";
  }
  return lua_typename(L,lua_type(L,tp));
}

/* lua callable function to get the userdata's type */
SWIGRUNTIME int SWIG_Lua_type(lua_State *L)
{
  lua_pushstring(L,SWIG_Lua_typename(L,1));
  return 1;
}

/* -----------------------------------------------------------------------------
 * global variable support code: class/struct typemap functions
 * ----------------------------------------------------------------------------- */

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC))
/* Install Constants */
SWIGINTERN void
SWIG_Lua_InstallConstants(lua_State *L, swig_lua_const_info constants[]) {
  int i;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_LUA_INT:
      lua_pushstring(L,constants[i].name);
      lua_pushinteger(L,(lua_Integer)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_FLOAT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].dvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_CHAR:
      lua_pushstring(L,constants[i].name);
      {
        char c = (char)constants[i].lvalue;
        lua_pushlstring(L,&c,1);
      }
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_STRING:
      lua_pushstring(L,constants[i].name);
      lua_pushstring(L,(char *) constants[i].pvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_POINTER:
      lua_pushstring(L,constants[i].name);
      SWIG_NewPointerObj(L,constants[i].pvalue, *(constants[i]).ptype,0);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_BINARY:
      lua_pushstring(L,constants[i].name);
      SWIG_NewMemberObj(L,constants[i].pvalue,constants[i].lvalue,*(constants[i]).ptype);
      lua_rawset(L,-3);
      break;
    default:
      break;
    }
  }
}
#endif

/* -----------------------------------------------------------------------------
 * executing lua code from within the wrapper
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DOSTRING_FAIL /* Allows redefining of error function */
#define SWIG_DOSTRING_FAIL(S) fprintf(stderr,"%s\n",S)
#endif
/* Executes a C string in Lua which is a really simple way of calling lua from C
Unfortunately lua keeps changing its APIs, so we need a conditional compile
In lua 5.0.X it's lua_dostring()
In lua 5.1.X it's luaL_dostring()
*/
SWIGINTERN int
SWIG_Lua_dostring(lua_State *L, const char *str) {
  int ok,top;
  if (str==0 || str[0]==0) return 0; /* nothing to do */
  top=lua_gettop(L); /* save stack */
#if (defined(LUA_VERSION_NUM) && (LUA_VERSION_NUM>=501))
  ok=luaL_dostring(L,str);	/* looks like this is lua 5.1.X or later, good */
#else
  ok=lua_dostring(L,str);	/* might be lua 5.0.x, using lua_dostring */
#endif
  if (ok!=0) {
    SWIG_DOSTRING_FAIL(lua_tostring(L,-1));
  }
  lua_settop(L,top); /* restore the stack */
  return ok;
}

#ifdef __cplusplus
}
#endif

/* ------------------------------ end luarun.swg  ------------------------------ */


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_CameraTrackEase swig_types[0]
#define SWIGTYPE_p_ClickPoint swig_types[1]
#define SWIGTYPE_p_GLint swig_types[2]
#define SWIGTYPE_p_PreviewTexture swig_types[3]
#define SWIGTYPE_p_UndoItem swig_types[4]
#define SWIGTYPE_p_glm__quat swig_types[5]
#define SWIGTYPE_p_glm__vec2 swig_types[6]
#define SWIGTYPE_p_glm__vec3 swig_types[7]
#define SWIGTYPE_p_ofBaseHasPixels swig_types[8]
#define SWIGTYPE_p_ofCamera swig_types[9]
#define SWIGTYPE_p_ofColor swig_types[10]
#define SWIGTYPE_p_ofEventArgs swig_types[11]
#define SWIGTYPE_p_ofImage swig_types[12]
#define SWIGTYPE_p_ofKeyEventArgs swig_types[13]
#define SWIGTYPE_p_ofLongRange swig_types[14]
#define SWIGTYPE_p_ofLoopType swig_types[15]
#define SWIGTYPE_p_ofMouseEventArgs swig_types[16]
#define SWIGTYPE_p_ofPtrT_ofVideoPlayer_t swig_types[17]
#define SWIGTYPE_p_ofRange swig_types[18]
#define SWIGTYPE_p_ofRectangle swig_types[19]
#define SWIGTYPE_p_ofResizeEventArgs swig_types[20]
#define SWIGTYPE_p_ofTexture swig_types[21]
#define SWIGTYPE_p_ofTrueTypeFont swig_types[22]
#define SWIGTYPE_p_ofVec2f swig_types[23]
#define SWIGTYPE_p_ofVideoPlayer swig_types[24]
#define SWIGTYPE_p_ofxMSATimer swig_types[25]
#define SWIGTYPE_p_ofxTLAudioTrack swig_types[26]
#define SWIGTYPE_p_ofxTLBangs swig_types[27]
#define SWIGTYPE_p_ofxTLCameraFrame swig_types[28]
#define SWIGTYPE_p_ofxTLCameraTrack swig_types[29]
#define SWIGTYPE_p_ofxTLColorSample swig_types[30]
#define SWIGTYPE_p_ofxTLColorTrack swig_types[31]
#define SWIGTYPE_p_ofxTLColors swig_types[32]
#define SWIGTYPE_p_ofxTLCurves swig_types[33]
#define SWIGTYPE_p_ofxTLEmptyKeyframe swig_types[34]
#define SWIGTYPE_p_ofxTLEmptyKeyframes swig_types[35]
#define SWIGTYPE_p_ofxTLEmptyTrack swig_types[36]
#define SWIGTYPE_p_ofxTLEvents swig_types[37]
#define SWIGTYPE_p_ofxTLFlags swig_types[38]
#define SWIGTYPE_p_ofxTLImageSequence swig_types[39]
#define SWIGTYPE_p_ofxTLKeyframe swig_types[40]
#define SWIGTYPE_p_ofxTLKeyframes swig_types[41]
#define SWIGTYPE_p_ofxTLLFO swig_types[42]
#define SWIGTYPE_p_ofxTLPage swig_types[43]
#define SWIGTYPE_p_ofxTLPlaybackEventArgs swig_types[44]
#define SWIGTYPE_p_ofxTLSwitch swig_types[45]
#define SWIGTYPE_p_ofxTLSwitches swig_types[46]
#define SWIGTYPE_p_ofxTLTrack swig_types[47]
#define SWIGTYPE_p_ofxTLTrackHeader swig_types[48]
#define SWIGTYPE_p_ofxTLVideoTrack swig_types[49]
#define SWIGTYPE_p_ofxTLZoomEventArgs swig_types[50]
#define SWIGTYPE_p_ofxTLZoomer swig_types[51]
#define SWIGTYPE_p_ofxTextInputField swig_types[52]
#define SWIGTYPE_p_ofxTimecode swig_types[53]
#define SWIGTYPE_p_ofxTimeline swig_types[54]
#define SWIGTYPE_p_std__setT_unsigned_long_long_t swig_types[55]
#define SWIGTYPE_p_std__string swig_types[56]
#define SWIGTYPE_p_vectorT_PreviewTexture_t swig_types[57]
#define SWIGTYPE_p_vectorT_float_t swig_types[58]
#define SWIGTYPE_p_vectorT_ofxTLKeyframe_p_t swig_types[59]
#define SWIGTYPE_p_vectorT_ofxTLPage_p_t swig_types[60]
#define SWIGTYPE_p_vectorT_std__string_t swig_types[61]
static swig_type_info *swig_types[63];
static swig_module_info swig_module = {swig_types, 62, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_name      "ofxTimeline"
#define SWIG_init      luaopen_ofxTimeline
#define SWIG_init_user luaopen_ofxTimeline_user

#define SWIG_LUACODE   luaopen_ofxTimeline_luacode

#ifdef __cplusplus
#include <utility>
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigSmartPointer {
    T *ptr;
    SwigSmartPointer(T *p) : ptr(p) { }
    ~SwigSmartPointer() { delete ptr; }
    SwigSmartPointer& operator=(SwigSmartPointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
    void reset(T *p) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = p; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigSmartPointer tmp(new T(t)); pointer = tmp; return *this; }
#if __cplusplus >=201103L
  SwigValueWrapper& operator=(T&& t) { SwigSmartPointer tmp(new T(std::move(t))); pointer = tmp; return *this; }
  operator T&&() const { return std::move(*pointer.ptr); }
#else
  operator T&() const { return *pointer.ptr; }
#endif
  T *operator&() const { return pointer.ptr; }
  static void reset(SwigValueWrapper& t, T *p) { t.pointer.reset(p); }
};

/*
 * SwigValueInit() is a generic initialisation solution as the following approach:
 * 
 *       T c_result = T();
 * 
 * doesn't compile for all types for example:
 * 
 *       unsigned int c_result = unsigned int();
 */
template <typename T> T SwigValueInit() {
  return T();
}

#if __cplusplus >=201103L
# define SWIG_STD_MOVE(OBJ) std::move(OBJ)
#else
# define SWIG_STD_MOVE(OBJ) OBJ
#endif

#endif


namespace swig {
typedef struct{} LANGUAGE_OBJ;
}


#include "ofxTLTrack.h"
#include "ofxTLColorTrack.h"
#include "ofxTLEmptyTrack.h"
#include "ofxTLEmptyKeyframes.h"
#include "ofxTLVideoTrack.h"
#include "ofxTLImageSequence.h"
#include "ofxTLSwitches.h"
#include "ofxTLBangs.h"
#include "ofxTLCameraTrack.h"
#include "ofxTLAudioTrack.h"
#include "ofxTimeline.h"


#include <string>


SWIGINTERN int SWIG_lua_isnilstring(lua_State *L, int idx) {
  int ret = lua_isstring(L, idx);
  if (!ret)
   ret = lua_isnil(L, idx);
  return ret;
}

SWIGINTERN ofxTLKeyframes *ofxTLTrack_getKeyframes(ofxTLTrack *self){
        return (ofxTLKeyframes *)self;
    }
SWIGINTERN ofxTLTrack *ofxTLColorTrack_getTrack(ofxTLColorTrack *self){
        return (ofxTLTrack *)self;
    }
SWIGINTERN ofxTLTrack *ofxTLEmptyTrack_getTrack(ofxTLEmptyTrack *self){
        return (ofxTLTrack *)self;
    }
SWIGINTERN ofxTLTrack *ofxTLEmptyKeyframes_getTrack(ofxTLEmptyKeyframes *self){
        return (ofxTLTrack *)self;
    }
SWIGINTERN ofxTLTrack *ofxTLVideoTrack_getTrack(ofxTLVideoTrack *self){
        return (ofxTLTrack *)self;
    }
SWIGINTERN ofxTLTrack *ofxTLImageSequence_getTrack(ofxTLImageSequence *self){
        return (ofxTLTrack *)self;
    }
SWIGINTERN ofxTLTrack *ofxTLSwitches_getTrack(ofxTLSwitches *self){
        return (ofxTLTrack *)self;
    }
SWIGINTERN ofxTLTrack *ofxTLBangs_getTrack(ofxTLBangs *self){
        return (ofxTLTrack *)self;
    }
SWIGINTERN ofxTLTrack *ofxTLCameraTrack_getTrack(ofxTLCameraTrack *self){
        return (ofxTLTrack *)self;
    }
SWIGINTERN void ofxTLCameraTrack_setLockCameraToTrack(ofxTLCameraTrack *self,bool value){
        self->lockCameraToTrack = value;
    }
SWIGINTERN bool ofxTLCameraTrack_getLockCameraToTrack(ofxTLCameraTrack *self){
        return self->lockCameraToTrack;
    }
SWIGINTERN ofxTLTrack *ofxTLAudioTrack_getTrack(ofxTLAudioTrack *self){
        return (ofxTLTrack *)self;
    }
SWIGINTERN void ofxTimeline_setLoopType__SWIG_1(ofxTimeline *self,short value){
        self->setLoopType((ofLoopType)value);
    }
SWIGINTERN float ofxTimeline_getR(ofxTimeline *self,string trackName){
        return self->getColor(trackName).r;
    }
SWIGINTERN float ofxTimeline_getG(ofxTimeline *self,string trackName){
        return self->getColor(trackName).g;
    }
SWIGINTERN float ofxTimeline_getB(ofxTimeline *self,string trackName){
        return self->getColor(trackName).b;
    }
SWIGINTERN float ofxTimeline_getA(ofxTimeline *self,string trackName){
        return self->getColor(trackName).a;
    }
SWIGINTERN void ofxTimeline_addCurves__SWIG_6(ofxTimeline *self,string trackName,float min,float max){
        self->addCurves(trackName, ofRange(min, max));
    }
#ifdef __cplusplus
extern "C" {
#endif
static int _wrap_new_string__SWIG_0(lua_State* L) { { int SWIG_arg = 0; std::string *result = 0 ;
    SWIG_check_num_args("std::string::string",0,0) result = (std::string *)new std::string();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__string,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_new_string__SWIG_1(lua_State* L) { { int SWIG_arg = 0; char *arg1 = (char *) 0 ; std::string *result = 0 ;
    SWIG_check_num_args("std::string::string",1,1)
    if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("std::string::string",1,"char const *"); arg1 = (char *)lua_tostring(L, 1);
    result = (std::string *)new std::string((char const *)arg1);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__string,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_new_string(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_string__SWIG_0(L);}  if (argc == 1) { return _wrap_new_string__SWIG_1(L);} 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_string'\n" "  Possible C/C++ prototypes are:\n"
  "    std::string::string()\n" "    std::string::string(char const *)\n"); lua_error(L);return 0; }
static int _wrap_string_size(lua_State* L) { { int SWIG_arg = 0; std::string *arg1 = (std::string *) 0 ; unsigned int result;
    SWIG_check_num_args("std::string::size",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::size",1,"std::string const *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
      SWIG_fail_ptr("string_size",1,SWIGTYPE_p_std__string); }  result = (unsigned int)((std::string const *)arg1)->size();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_string_length(lua_State* L) { { int SWIG_arg = 0; std::string *arg1 = (std::string *) 0 ; unsigned int result;
    SWIG_check_num_args("std::string::length",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::length",1,"std::string const *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
      SWIG_fail_ptr("string_length",1,SWIGTYPE_p_std__string); }  result = (unsigned int)((std::string const *)arg1)->length();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_string_empty(lua_State* L) { { int SWIG_arg = 0; std::string *arg1 = (std::string *) 0 ; bool result;
    SWIG_check_num_args("std::string::empty",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::empty",1,"std::string const *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
      SWIG_fail_ptr("string_empty",1,SWIGTYPE_p_std__string); }  result = (bool)((std::string const *)arg1)->empty();
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_string_c_str(lua_State* L) { { int SWIG_arg = 0; std::string *arg1 = (std::string *) 0 ; char *result = 0 ;
    SWIG_check_num_args("std::string::c_str",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::c_str",1,"std::string const *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
      SWIG_fail_ptr("string_c_str",1,SWIGTYPE_p_std__string); }  result = (char *)((std::string const *)arg1)->c_str();
    lua_pushstring(L,(const char *)result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_string_data(lua_State* L) { { int SWIG_arg = 0; std::string *arg1 = (std::string *) 0 ; char *result = 0 ;
    SWIG_check_num_args("std::string::data",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::data",1,"std::string const *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
      SWIG_fail_ptr("string_data",1,SWIGTYPE_p_std__string); }  result = (char *)((std::string const *)arg1)->data();
    lua_pushstring(L,(const char *)result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_string_assign(lua_State* L) { { int SWIG_arg = 0; std::string *arg1 = (std::string *) 0 ;
    char *arg2 = (char *) 0 ; SWIG_check_num_args("std::string::assign",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::assign",1,"std::string *");
    if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("std::string::assign",2,"char const *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
      SWIG_fail_ptr("string_assign",1,SWIGTYPE_p_std__string); }  arg2 = (char *)lua_tostring(L, 2);
    (arg1)->assign((char const *)arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static void swig_delete_string(void *obj) {
std::string *arg1 = (std::string *) obj;
delete arg1;
}
static int _proxy__wrap_new_string(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_string);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_string_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_string_methods[]= {
    { "size", _wrap_string_size},
    { "length", _wrap_string_length},
    { "empty", _wrap_string_empty},
    { "c_str", _wrap_string_c_str},
    { "data", _wrap_string_data},
    { "assign", _wrap_string_assign},
    {0,0}
};
static swig_lua_method swig_string_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_string_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_string_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_string_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_string_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_string_Sf_SwigStatic = {
    "string",
    swig_string_Sf_SwigStatic_methods,
    swig_string_Sf_SwigStatic_attributes,
    swig_string_Sf_SwigStatic_constants,
    swig_string_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_string_bases[] = {0};
static const char *swig_string_base_names[] = {0};
static swig_lua_class _wrap_class_string = { "string", "string", &SWIGTYPE_p_std__string,_proxy__wrap_new_string, swig_delete_string, swig_string_methods, swig_string_attributes, &swig_string_Sf_SwigStatic, swig_string_meta, swig_string_bases, swig_string_base_names };

static int _wrap_new_ofxTLTrack(lua_State* L) { { int SWIG_arg = 0; ofxTLTrack *result = 0 ;
    SWIG_check_num_args("ofxTLTrack::ofxTLTrack",0,0) result = (ofxTLTrack *)new ofxTLTrack();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxTLTrack,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ofxTLTrack_setup(lua_State* L) { { int SWIG_arg = 0; ofxTLTrack *arg1 = (ofxTLTrack *) 0 ;
    SWIG_check_num_args("ofxTLTrack::setup",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLTrack::setup",1,"ofxTLTrack *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLTrack,0))){
      SWIG_fail_ptr("ofxTLTrack_setup",1,SWIGTYPE_p_ofxTLTrack); }  (arg1)->setup(); return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ofxTLTrack__draw(lua_State* L) { { int SWIG_arg = 0; ofxTLTrack *arg1 = (ofxTLTrack *) 0 ;
    SWIG_check_num_args("ofxTLTrack::_draw",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLTrack::_draw",1,"ofxTLTrack *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLTrack,0))){
      SWIG_fail_ptr("ofxTLTrack__draw",1,SWIGTYPE_p_ofxTLTrack); }  (arg1)->_draw(); return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ofxTLTrack_update(lua_State* L) { { int SWIG_arg = 0; ofxTLTrack *arg1 = (ofxTLTrack *) 0 ;
    SWIG_check_num_args("ofxTLTrack::update",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLTrack::update",1,"ofxTLTrack *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLTrack,0))){
      SWIG_fail_ptr("ofxTLTrack_update",1,SWIGTYPE_p_ofxTLTrack); }  (arg1)->update(); return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ofxTLTrack_draw(lua_State* L) { { int SWIG_arg = 0; ofxTLTrack *arg1 = (ofxTLTrack *) 0 ;
    SWIG_check_num_args("ofxTLTrack::draw",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLTrack::draw",1,"ofxTLTrack *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLTrack,0))){
      SWIG_fail_ptr("ofxTLTrack_draw",1,SWIGTYPE_p_ofxTLTrack); }  (arg1)->draw(); return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ofxTLTrack_drawModalContent(lua_State* L) { { int SWIG_arg = 0; ofxTLTrack *arg1 = (ofxTLTrack *) 0 ;
    SWIG_check_num_args("ofxTLTrack::drawModalContent",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLTrack::drawModalContent",1,"ofxTLTrack *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLTrack,0))){
      SWIG_fail_ptr("ofxTLTrack_drawModalContent",1,SWIGTYPE_p_ofxTLTrack); }  (arg1)->drawModalContent(); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLTrack_enable(lua_State* L) { { int SWIG_arg = 0; ofxTLTrack *arg1 = (ofxTLTrack *) 0 ;
    SWIG_check_num_args("ofxTLTrack::enable",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLTrack::enable",1,"ofxTLTrack *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLTrack,0))){
      SWIG_fail_ptr("ofxTLTrack_enable",1,SWIGTYPE_p_ofxTLTrack); }  (arg1)->enable(); return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ofxTLTrack_disable(lua_State* L) { { int SWIG_arg = 0; ofxTLTrack *arg1 = (ofxTLTrack *) 0 ;
    SWIG_check_num_args("ofxTLTrack::disable",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLTrack::disable",1,"ofxTLTrack *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLTrack,0))){
      SWIG_fail_ptr("ofxTLTrack_disable",1,SWIGTYPE_p_ofxTLTrack); }  (arg1)->disable(); return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ofxTLTrack_isEnabled(lua_State* L) { { int SWIG_arg = 0; ofxTLTrack *arg1 = (ofxTLTrack *) 0 ; bool result;
    SWIG_check_num_args("ofxTLTrack::isEnabled",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLTrack::isEnabled",1,"ofxTLTrack *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLTrack,0))){
      SWIG_fail_ptr("ofxTLTrack_isEnabled",1,SWIGTYPE_p_ofxTLTrack); }  result = (bool)(arg1)->isEnabled();
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLTrack_isActive(lua_State* L) { { int SWIG_arg = 0; ofxTLTrack *arg1 = (ofxTLTrack *) 0 ; bool result;
    SWIG_check_num_args("ofxTLTrack::isActive",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLTrack::isActive",1,"ofxTLTrack *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLTrack,0))){
      SWIG_fail_ptr("ofxTLTrack_isActive",1,SWIGTYPE_p_ofxTLTrack); }  result = (bool)(arg1)->isActive();
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLTrack_hasFocus(lua_State* L) { { int SWIG_arg = 0; ofxTLTrack *arg1 = (ofxTLTrack *) 0 ; bool result;
    SWIG_check_num_args("ofxTLTrack::hasFocus",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLTrack::hasFocus",1,"ofxTLTrack *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLTrack,0))){
      SWIG_fail_ptr("ofxTLTrack_hasFocus",1,SWIGTYPE_p_ofxTLTrack); }  result = (bool)(arg1)->hasFocus();
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLTrack_isHovering(lua_State* L) { { int SWIG_arg = 0; ofxTLTrack *arg1 = (ofxTLTrack *) 0 ; bool result;
    SWIG_check_num_args("ofxTLTrack::isHovering",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLTrack::isHovering",1,"ofxTLTrack *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLTrack,0))){
      SWIG_fail_ptr("ofxTLTrack_isHovering",1,SWIGTYPE_p_ofxTLTrack); }  result = (bool)(arg1)->isHovering();
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLTrack_togglePlay(lua_State* L) { { int SWIG_arg = 0; ofxTLTrack *arg1 = (ofxTLTrack *) 0 ; bool result;
    SWIG_check_num_args("ofxTLTrack::togglePlay",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLTrack::togglePlay",1,"ofxTLTrack *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLTrack,0))){
      SWIG_fail_ptr("ofxTLTrack_togglePlay",1,SWIGTYPE_p_ofxTLTrack); }  result = (bool)(arg1)->togglePlay();
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLTrack_play(lua_State* L) { { int SWIG_arg = 0; ofxTLTrack *arg1 = (ofxTLTrack *) 0 ;
    SWIG_check_num_args("ofxTLTrack::play",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLTrack::play",1,"ofxTLTrack *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLTrack,0))){
      SWIG_fail_ptr("ofxTLTrack_play",1,SWIGTYPE_p_ofxTLTrack); }  (arg1)->play(); return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ofxTLTrack_stop(lua_State* L) { { int SWIG_arg = 0; ofxTLTrack *arg1 = (ofxTLTrack *) 0 ;
    SWIG_check_num_args("ofxTLTrack::stop",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLTrack::stop",1,"ofxTLTrack *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLTrack,0))){
      SWIG_fail_ptr("ofxTLTrack_stop",1,SWIGTYPE_p_ofxTLTrack); }  (arg1)->stop(); return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ofxTLTrack_getIsPlaying(lua_State* L) { { int SWIG_arg = 0; ofxTLTrack *arg1 = (ofxTLTrack *) 0 ; bool result;
    SWIG_check_num_args("ofxTLTrack::getIsPlaying",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLTrack::getIsPlaying",1,"ofxTLTrack *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLTrack,0))){
      SWIG_fail_ptr("ofxTLTrack_getIsPlaying",1,SWIGTYPE_p_ofxTLTrack); }  result = (bool)(arg1)->getIsPlaying();
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLTrack_currentTrackTime(lua_State* L) { { int SWIG_arg = 0; ofxTLTrack *arg1 = (ofxTLTrack *) 0 ;
    unsigned long long result; SWIG_check_num_args("ofxTLTrack::currentTrackTime",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLTrack::currentTrackTime",1,"ofxTLTrack *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLTrack,0))){
      SWIG_fail_ptr("ofxTLTrack_currentTrackTime",1,SWIGTYPE_p_ofxTLTrack); } 
    result = (unsigned long long)(arg1)->currentTrackTime(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLTrack_getDrawRect(lua_State* L) { { int SWIG_arg = 0; ofxTLTrack *arg1 = (ofxTLTrack *) 0 ;
    ofRectangle result; SWIG_check_num_args("ofxTLTrack::getDrawRect",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLTrack::getDrawRect",1,"ofxTLTrack *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLTrack,0))){
      SWIG_fail_ptr("ofxTLTrack_getDrawRect",1,SWIGTYPE_p_ofxTLTrack); }  result = (arg1)->getDrawRect(); {
      ofRectangle * resultptr = new ofRectangle(result);
      SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofRectangle,1); SWIG_arg++; }  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ofxTLTrack_setDrawRect(lua_State* L) { { int SWIG_arg = 0; ofxTLTrack *arg1 = (ofxTLTrack *) 0 ;
    ofRectangle arg2 ; ofRectangle *argp2 ; SWIG_check_num_args("ofxTLTrack::setDrawRect",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLTrack::setDrawRect",1,"ofxTLTrack *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxTLTrack::setDrawRect",2,"ofRectangle");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLTrack,0))){
      SWIG_fail_ptr("ofxTLTrack_setDrawRect",1,SWIGTYPE_p_ofxTLTrack); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ofRectangle,0))){
      SWIG_fail_ptr("ofxTLTrack_setDrawRect",2,SWIGTYPE_p_ofRectangle); }  arg2 = *argp2; (arg1)->setDrawRect(arg2);
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLTrack_getBottomEdge(lua_State* L) { { int SWIG_arg = 0; ofxTLTrack *arg1 = (ofxTLTrack *) 0 ;
    float result; SWIG_check_num_args("ofxTLTrack::getBottomEdge",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLTrack::getBottomEdge",1,"ofxTLTrack *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLTrack,0))){
      SWIG_fail_ptr("ofxTLTrack_getBottomEdge",1,SWIGTYPE_p_ofxTLTrack); }  result = (float)(arg1)->getBottomEdge();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLTrack_getXMLFilePath(lua_State* L) { { int SWIG_arg = 0; ofxTLTrack *arg1 = (ofxTLTrack *) 0 ;
    string result; SWIG_check_num_args("ofxTLTrack::getXMLFilePath",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLTrack::getXMLFilePath",1,"ofxTLTrack *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLTrack,0))){
      SWIG_fail_ptr("ofxTLTrack_getXMLFilePath",1,SWIGTYPE_p_ofxTLTrack); }  result = (arg1)->getXMLFilePath();
    lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ofxTLTrack_getXMLFileName(lua_State* L) { { int SWIG_arg = 0; ofxTLTrack *arg1 = (ofxTLTrack *) 0 ;
    string result; SWIG_check_num_args("ofxTLTrack::getXMLFileName",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLTrack::getXMLFileName",1,"ofxTLTrack *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLTrack,0))){
      SWIG_fail_ptr("ofxTLTrack_getXMLFileName",1,SWIGTYPE_p_ofxTLTrack); }  result = (arg1)->getXMLFileName();
    lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ofxTLTrack_setXMLFileName(lua_State* L) { { int SWIG_arg = 0; ofxTLTrack *arg1 = (ofxTLTrack *) 0 ;
    string arg2 ; SWIG_check_num_args("ofxTLTrack::setXMLFileName",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLTrack::setXMLFileName",1,"ofxTLTrack *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxTLTrack::setXMLFileName",2,"string");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLTrack,0))){
      SWIG_fail_ptr("ofxTLTrack_setXMLFileName",1,SWIGTYPE_p_ofxTLTrack); }  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
    (arg1)->setXMLFileName(arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLTrack__mousePressed(lua_State* L) { { int SWIG_arg = 0; ofxTLTrack *arg1 = (ofxTLTrack *) 0 ;
    ofMouseEventArgs *arg2 = 0 ; long arg3 ; bool result; SWIG_check_num_args("ofxTLTrack::_mousePressed",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLTrack::_mousePressed",1,"ofxTLTrack *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxTLTrack::_mousePressed",2,"ofMouseEventArgs &");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxTLTrack::_mousePressed",3,"long");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLTrack,0))){
      SWIG_fail_ptr("ofxTLTrack__mousePressed",1,SWIGTYPE_p_ofxTLTrack); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofMouseEventArgs,0))){
      SWIG_fail_ptr("ofxTLTrack__mousePressed",2,SWIGTYPE_p_ofMouseEventArgs); }  arg3 = (long)lua_tonumber(L, 3);
    result = (bool)(arg1)->_mousePressed(*arg2,arg3); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLTrack__mouseMoved(lua_State* L) { { int SWIG_arg = 0; ofxTLTrack *arg1 = (ofxTLTrack *) 0 ;
    ofMouseEventArgs *arg2 = 0 ; long arg3 ; SWIG_check_num_args("ofxTLTrack::_mouseMoved",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLTrack::_mouseMoved",1,"ofxTLTrack *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxTLTrack::_mouseMoved",2,"ofMouseEventArgs &");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxTLTrack::_mouseMoved",3,"long");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLTrack,0))){
      SWIG_fail_ptr("ofxTLTrack__mouseMoved",1,SWIGTYPE_p_ofxTLTrack); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofMouseEventArgs,0))){
      SWIG_fail_ptr("ofxTLTrack__mouseMoved",2,SWIGTYPE_p_ofMouseEventArgs); }  arg3 = (long)lua_tonumber(L, 3);
    (arg1)->_mouseMoved(*arg2,arg3); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLTrack__mouseDragged(lua_State* L) { { int SWIG_arg = 0; ofxTLTrack *arg1 = (ofxTLTrack *) 0 ;
    ofMouseEventArgs *arg2 = 0 ; long arg3 ; SWIG_check_num_args("ofxTLTrack::_mouseDragged",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLTrack::_mouseDragged",1,"ofxTLTrack *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxTLTrack::_mouseDragged",2,"ofMouseEventArgs &");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxTLTrack::_mouseDragged",3,"long");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLTrack,0))){
      SWIG_fail_ptr("ofxTLTrack__mouseDragged",1,SWIGTYPE_p_ofxTLTrack); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofMouseEventArgs,0))){
      SWIG_fail_ptr("ofxTLTrack__mouseDragged",2,SWIGTYPE_p_ofMouseEventArgs); }  arg3 = (long)lua_tonumber(L, 3);
    (arg1)->_mouseDragged(*arg2,arg3); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLTrack__mouseReleased(lua_State* L) { { int SWIG_arg = 0; ofxTLTrack *arg1 = (ofxTLTrack *) 0 ;
    ofMouseEventArgs *arg2 = 0 ; long arg3 ; SWIG_check_num_args("ofxTLTrack::_mouseReleased",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLTrack::_mouseReleased",1,"ofxTLTrack *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxTLTrack::_mouseReleased",2,"ofMouseEventArgs &");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxTLTrack::_mouseReleased",3,"long");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLTrack,0))){
      SWIG_fail_ptr("ofxTLTrack__mouseReleased",1,SWIGTYPE_p_ofxTLTrack); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofMouseEventArgs,0))){
      SWIG_fail_ptr("ofxTLTrack__mouseReleased",2,SWIGTYPE_p_ofMouseEventArgs); }  arg3 = (long)lua_tonumber(L, 3);
    (arg1)->_mouseReleased(*arg2,arg3); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLTrack_mousePressed(lua_State* L) { { int SWIG_arg = 0; ofxTLTrack *arg1 = (ofxTLTrack *) 0 ;
    ofMouseEventArgs *arg2 = 0 ; long arg3 ; bool result; SWIG_check_num_args("ofxTLTrack::mousePressed",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLTrack::mousePressed",1,"ofxTLTrack *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxTLTrack::mousePressed",2,"ofMouseEventArgs &");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxTLTrack::mousePressed",3,"long");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLTrack,0))){
      SWIG_fail_ptr("ofxTLTrack_mousePressed",1,SWIGTYPE_p_ofxTLTrack); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofMouseEventArgs,0))){
      SWIG_fail_ptr("ofxTLTrack_mousePressed",2,SWIGTYPE_p_ofMouseEventArgs); }  arg3 = (long)lua_tonumber(L, 3);
    result = (bool)(arg1)->mousePressed(*arg2,arg3); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLTrack_mouseMoved(lua_State* L) { { int SWIG_arg = 0; ofxTLTrack *arg1 = (ofxTLTrack *) 0 ;
    ofMouseEventArgs *arg2 = 0 ; long arg3 ; SWIG_check_num_args("ofxTLTrack::mouseMoved",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLTrack::mouseMoved",1,"ofxTLTrack *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxTLTrack::mouseMoved",2,"ofMouseEventArgs &");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxTLTrack::mouseMoved",3,"long");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLTrack,0))){
      SWIG_fail_ptr("ofxTLTrack_mouseMoved",1,SWIGTYPE_p_ofxTLTrack); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofMouseEventArgs,0))){
      SWIG_fail_ptr("ofxTLTrack_mouseMoved",2,SWIGTYPE_p_ofMouseEventArgs); }  arg3 = (long)lua_tonumber(L, 3);
    (arg1)->mouseMoved(*arg2,arg3); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLTrack_mouseDragged(lua_State* L) { { int SWIG_arg = 0; ofxTLTrack *arg1 = (ofxTLTrack *) 0 ;
    ofMouseEventArgs *arg2 = 0 ; long arg3 ; SWIG_check_num_args("ofxTLTrack::mouseDragged",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLTrack::mouseDragged",1,"ofxTLTrack *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxTLTrack::mouseDragged",2,"ofMouseEventArgs &");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxTLTrack::mouseDragged",3,"long");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLTrack,0))){
      SWIG_fail_ptr("ofxTLTrack_mouseDragged",1,SWIGTYPE_p_ofxTLTrack); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofMouseEventArgs,0))){
      SWIG_fail_ptr("ofxTLTrack_mouseDragged",2,SWIGTYPE_p_ofMouseEventArgs); }  arg3 = (long)lua_tonumber(L, 3);
    (arg1)->mouseDragged(*arg2,arg3); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLTrack_mouseReleased(lua_State* L) { { int SWIG_arg = 0; ofxTLTrack *arg1 = (ofxTLTrack *) 0 ;
    ofMouseEventArgs *arg2 = 0 ; long arg3 ; SWIG_check_num_args("ofxTLTrack::mouseReleased",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLTrack::mouseReleased",1,"ofxTLTrack *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxTLTrack::mouseReleased",2,"ofMouseEventArgs &");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxTLTrack::mouseReleased",3,"long");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLTrack,0))){
      SWIG_fail_ptr("ofxTLTrack_mouseReleased",1,SWIGTYPE_p_ofxTLTrack); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofMouseEventArgs,0))){
      SWIG_fail_ptr("ofxTLTrack_mouseReleased",2,SWIGTYPE_p_ofMouseEventArgs); }  arg3 = (long)lua_tonumber(L, 3);
    (arg1)->mouseReleased(*arg2,arg3); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLTrack_playbackStarted(lua_State* L) { { int SWIG_arg = 0; ofxTLTrack *arg1 = (ofxTLTrack *) 0 ;
    ofxTLPlaybackEventArgs *arg2 = 0 ; SWIG_check_num_args("ofxTLTrack::playbackStarted",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLTrack::playbackStarted",1,"ofxTLTrack *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxTLTrack::playbackStarted",2,"ofxTLPlaybackEventArgs &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLTrack,0))){
      SWIG_fail_ptr("ofxTLTrack_playbackStarted",1,SWIGTYPE_p_ofxTLTrack); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofxTLPlaybackEventArgs,0))){
      SWIG_fail_ptr("ofxTLTrack_playbackStarted",2,SWIGTYPE_p_ofxTLPlaybackEventArgs); }  (arg1)->playbackStarted(*arg2);
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLTrack_playbackLooped(lua_State* L) { { int SWIG_arg = 0; ofxTLTrack *arg1 = (ofxTLTrack *) 0 ;
    ofxTLPlaybackEventArgs *arg2 = 0 ; SWIG_check_num_args("ofxTLTrack::playbackLooped",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLTrack::playbackLooped",1,"ofxTLTrack *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxTLTrack::playbackLooped",2,"ofxTLPlaybackEventArgs &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLTrack,0))){
      SWIG_fail_ptr("ofxTLTrack_playbackLooped",1,SWIGTYPE_p_ofxTLTrack); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofxTLPlaybackEventArgs,0))){
      SWIG_fail_ptr("ofxTLTrack_playbackLooped",2,SWIGTYPE_p_ofxTLPlaybackEventArgs); }  (arg1)->playbackLooped(*arg2);
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLTrack_playbackEnded(lua_State* L) { { int SWIG_arg = 0; ofxTLTrack *arg1 = (ofxTLTrack *) 0 ;
    ofxTLPlaybackEventArgs *arg2 = 0 ; SWIG_check_num_args("ofxTLTrack::playbackEnded",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLTrack::playbackEnded",1,"ofxTLTrack *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxTLTrack::playbackEnded",2,"ofxTLPlaybackEventArgs &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLTrack,0))){
      SWIG_fail_ptr("ofxTLTrack_playbackEnded",1,SWIGTYPE_p_ofxTLTrack); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofxTLPlaybackEventArgs,0))){
      SWIG_fail_ptr("ofxTLTrack_playbackEnded",2,SWIGTYPE_p_ofxTLPlaybackEventArgs); }  (arg1)->playbackEnded(*arg2);
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLTrack_keyPressed(lua_State* L) { { int SWIG_arg = 0; ofxTLTrack *arg1 = (ofxTLTrack *) 0 ;
    ofKeyEventArgs *arg2 = 0 ; SWIG_check_num_args("ofxTLTrack::keyPressed",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLTrack::keyPressed",1,"ofxTLTrack *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxTLTrack::keyPressed",2,"ofKeyEventArgs &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLTrack,0))){
      SWIG_fail_ptr("ofxTLTrack_keyPressed",1,SWIGTYPE_p_ofxTLTrack); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofKeyEventArgs,0))){
      SWIG_fail_ptr("ofxTLTrack_keyPressed",2,SWIGTYPE_p_ofKeyEventArgs); }  (arg1)->keyPressed(*arg2); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLTrack_nudgeBy(lua_State* L) { { int SWIG_arg = 0; ofxTLTrack *arg1 = (ofxTLTrack *) 0 ; ofVec2f arg2 ;
    ofVec2f *argp2 ; SWIG_check_num_args("ofxTLTrack::nudgeBy",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLTrack::nudgeBy",1,"ofxTLTrack *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxTLTrack::nudgeBy",2,"ofVec2f");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLTrack,0))){
      SWIG_fail_ptr("ofxTLTrack_nudgeBy",1,SWIGTYPE_p_ofxTLTrack); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ofVec2f,0))){
      SWIG_fail_ptr("ofxTLTrack_nudgeBy",2,SWIGTYPE_p_ofVec2f); }  arg2 = *argp2; (arg1)->nudgeBy(arg2); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLTrack_gainedFocus(lua_State* L) { { int SWIG_arg = 0; ofxTLTrack *arg1 = (ofxTLTrack *) 0 ;
    SWIG_check_num_args("ofxTLTrack::gainedFocus",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLTrack::gainedFocus",1,"ofxTLTrack *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLTrack,0))){
      SWIG_fail_ptr("ofxTLTrack_gainedFocus",1,SWIGTYPE_p_ofxTLTrack); }  (arg1)->gainedFocus(); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLTrack_lostFocus(lua_State* L) { { int SWIG_arg = 0; ofxTLTrack *arg1 = (ofxTLTrack *) 0 ;
    SWIG_check_num_args("ofxTLTrack::lostFocus",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLTrack::lostFocus",1,"ofxTLTrack *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLTrack,0))){
      SWIG_fail_ptr("ofxTLTrack_lostFocus",1,SWIGTYPE_p_ofxTLTrack); }  (arg1)->lostFocus(); return SWIG_arg; fail: SWIGUNUSED; }
   lua_error(L); return 0; }
static int _wrap_ofxTLTrack_regionSelected(lua_State* L) { { int SWIG_arg = 0; ofxTLTrack *arg1 = (ofxTLTrack *) 0 ;
    ofLongRange arg2 ; ofRange arg3 ; ofLongRange *argp2 ; ofRange *argp3 ;
    SWIG_check_num_args("ofxTLTrack::regionSelected",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLTrack::regionSelected",1,"ofxTLTrack *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxTLTrack::regionSelected",2,"ofLongRange");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofxTLTrack::regionSelected",3,"ofRange");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLTrack,0))){
      SWIG_fail_ptr("ofxTLTrack_regionSelected",1,SWIGTYPE_p_ofxTLTrack); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ofLongRange,0))){
      SWIG_fail_ptr("ofxTLTrack_regionSelected",2,SWIGTYPE_p_ofLongRange); }  arg2 = *argp2;
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_ofRange,0))){
      SWIG_fail_ptr("ofxTLTrack_regionSelected",3,SWIGTYPE_p_ofRange); }  arg3 = *argp3; (arg1)->regionSelected(arg2,arg3);
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLTrack_copyRequest(lua_State* L) { { int SWIG_arg = 0; ofxTLTrack *arg1 = (ofxTLTrack *) 0 ; string result;
    SWIG_check_num_args("ofxTLTrack::copyRequest",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLTrack::copyRequest",1,"ofxTLTrack *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLTrack,0))){
      SWIG_fail_ptr("ofxTLTrack_copyRequest",1,SWIGTYPE_p_ofxTLTrack); }  result = (arg1)->copyRequest();
    lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ofxTLTrack_cutRequest(lua_State* L) { { int SWIG_arg = 0; ofxTLTrack *arg1 = (ofxTLTrack *) 0 ; string result;
    SWIG_check_num_args("ofxTLTrack::cutRequest",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLTrack::cutRequest",1,"ofxTLTrack *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLTrack,0))){
      SWIG_fail_ptr("ofxTLTrack_cutRequest",1,SWIGTYPE_p_ofxTLTrack); }  result = (arg1)->cutRequest();
    lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ofxTLTrack_pasteSent(lua_State* L) { { int SWIG_arg = 0; ofxTLTrack *arg1 = (ofxTLTrack *) 0 ; string arg2 ;
    SWIG_check_num_args("ofxTLTrack::pasteSent",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLTrack::pasteSent",1,"ofxTLTrack *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxTLTrack::pasteSent",2,"string");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLTrack,0))){
      SWIG_fail_ptr("ofxTLTrack_pasteSent",1,SWIGTYPE_p_ofxTLTrack); }  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
    (arg1)->pasteSent(arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLTrack_selectAll(lua_State* L) { { int SWIG_arg = 0; ofxTLTrack *arg1 = (ofxTLTrack *) 0 ;
    SWIG_check_num_args("ofxTLTrack::selectAll",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLTrack::selectAll",1,"ofxTLTrack *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLTrack,0))){
      SWIG_fail_ptr("ofxTLTrack_selectAll",1,SWIGTYPE_p_ofxTLTrack); }  (arg1)->selectAll(); return SWIG_arg; fail: SWIGUNUSED; }
   lua_error(L); return 0; }
static int _wrap_ofxTLTrack_unselectAll(lua_State* L) { { int SWIG_arg = 0; ofxTLTrack *arg1 = (ofxTLTrack *) 0 ;
    SWIG_check_num_args("ofxTLTrack::unselectAll",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLTrack::unselectAll",1,"ofxTLTrack *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLTrack,0))){
      SWIG_fail_ptr("ofxTLTrack_unselectAll",1,SWIGTYPE_p_ofxTLTrack); }  (arg1)->unselectAll(); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLTrack_getEarliestTime(lua_State* L) { { int SWIG_arg = 0; ofxTLTrack *arg1 = (ofxTLTrack *) 0 ;
    unsigned long long result; SWIG_check_num_args("ofxTLTrack::getEarliestTime",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLTrack::getEarliestTime",1,"ofxTLTrack *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLTrack,0))){
      SWIG_fail_ptr("ofxTLTrack_getEarliestTime",1,SWIGTYPE_p_ofxTLTrack); } 
    result = (unsigned long long)(arg1)->getEarliestTime(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLTrack_getLatestTime(lua_State* L) { { int SWIG_arg = 0; ofxTLTrack *arg1 = (ofxTLTrack *) 0 ;
    unsigned long long result; SWIG_check_num_args("ofxTLTrack::getLatestTime",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLTrack::getLatestTime",1,"ofxTLTrack *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLTrack,0))){
      SWIG_fail_ptr("ofxTLTrack_getLatestTime",1,SWIGTYPE_p_ofxTLTrack); } 
    result = (unsigned long long)(arg1)->getLatestTime(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLTrack_getEarliestSelectedTime(lua_State* L) { { int SWIG_arg = 0; ofxTLTrack *arg1 = (ofxTLTrack *) 0 ;
    unsigned long long result; SWIG_check_num_args("ofxTLTrack::getEarliestSelectedTime",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLTrack::getEarliestSelectedTime",1,"ofxTLTrack *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLTrack,0))){
      SWIG_fail_ptr("ofxTLTrack_getEarliestSelectedTime",1,SWIGTYPE_p_ofxTLTrack); } 
    result = (unsigned long long)(arg1)->getEarliestSelectedTime(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLTrack_getLatestSelectedTime(lua_State* L) { { int SWIG_arg = 0; ofxTLTrack *arg1 = (ofxTLTrack *) 0 ;
    unsigned long long result; SWIG_check_num_args("ofxTLTrack::getLatestSelectedTime",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLTrack::getLatestSelectedTime",1,"ofxTLTrack *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLTrack,0))){
      SWIG_fail_ptr("ofxTLTrack_getLatestSelectedTime",1,SWIGTYPE_p_ofxTLTrack); } 
    result = (unsigned long long)(arg1)->getLatestSelectedTime(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLTrack_getSelectedItemCount(lua_State* L) { { int SWIG_arg = 0; ofxTLTrack *arg1 = (ofxTLTrack *) 0 ;
    int result; SWIG_check_num_args("ofxTLTrack::getSelectedItemCount",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLTrack::getSelectedItemCount",1,"ofxTLTrack *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLTrack,0))){
      SWIG_fail_ptr("ofxTLTrack_getSelectedItemCount",1,SWIGTYPE_p_ofxTLTrack); }  result = (int)(arg1)->getSelectedItemCount();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLTrack_getXMLRepresentation(lua_State* L) { { int SWIG_arg = 0; ofxTLTrack *arg1 = (ofxTLTrack *) 0 ;
    string result; SWIG_check_num_args("ofxTLTrack::getXMLRepresentation",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLTrack::getXMLRepresentation",1,"ofxTLTrack *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLTrack,0))){
      SWIG_fail_ptr("ofxTLTrack_getXMLRepresentation",1,SWIGTYPE_p_ofxTLTrack); }  result = (arg1)->getXMLRepresentation();
    lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ofxTLTrack_loadFromXMLRepresentation(lua_State* L) { { int SWIG_arg = 0; ofxTLTrack *arg1 = (ofxTLTrack *) 0 ;
    string arg2 ; SWIG_check_num_args("ofxTLTrack::loadFromXMLRepresentation",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLTrack::loadFromXMLRepresentation",1,"ofxTLTrack *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxTLTrack::loadFromXMLRepresentation",2,"string");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLTrack,0))){
      SWIG_fail_ptr("ofxTLTrack_loadFromXMLRepresentation",1,SWIGTYPE_p_ofxTLTrack); } 
    (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2)); (arg1)->loadFromXMLRepresentation(arg2); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLTrack_zoomStarted(lua_State* L) { { int SWIG_arg = 0; ofxTLTrack *arg1 = (ofxTLTrack *) 0 ;
    ofxTLZoomEventArgs *arg2 = 0 ; SWIG_check_num_args("ofxTLTrack::zoomStarted",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLTrack::zoomStarted",1,"ofxTLTrack *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxTLTrack::zoomStarted",2,"ofxTLZoomEventArgs &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLTrack,0))){
      SWIG_fail_ptr("ofxTLTrack_zoomStarted",1,SWIGTYPE_p_ofxTLTrack); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofxTLZoomEventArgs,0))){
      SWIG_fail_ptr("ofxTLTrack_zoomStarted",2,SWIGTYPE_p_ofxTLZoomEventArgs); }  (arg1)->zoomStarted(*arg2); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLTrack_zoomDragged(lua_State* L) { { int SWIG_arg = 0; ofxTLTrack *arg1 = (ofxTLTrack *) 0 ;
    ofxTLZoomEventArgs *arg2 = 0 ; SWIG_check_num_args("ofxTLTrack::zoomDragged",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLTrack::zoomDragged",1,"ofxTLTrack *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxTLTrack::zoomDragged",2,"ofxTLZoomEventArgs &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLTrack,0))){
      SWIG_fail_ptr("ofxTLTrack_zoomDragged",1,SWIGTYPE_p_ofxTLTrack); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofxTLZoomEventArgs,0))){
      SWIG_fail_ptr("ofxTLTrack_zoomDragged",2,SWIGTYPE_p_ofxTLZoomEventArgs); }  (arg1)->zoomDragged(*arg2); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLTrack_zoomEnded(lua_State* L) { { int SWIG_arg = 0; ofxTLTrack *arg1 = (ofxTLTrack *) 0 ;
    ofxTLZoomEventArgs *arg2 = 0 ; SWIG_check_num_args("ofxTLTrack::zoomEnded",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLTrack::zoomEnded",1,"ofxTLTrack *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxTLTrack::zoomEnded",2,"ofxTLZoomEventArgs &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLTrack,0))){
      SWIG_fail_ptr("ofxTLTrack_zoomEnded",1,SWIGTYPE_p_ofxTLTrack); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofxTLZoomEventArgs,0))){
      SWIG_fail_ptr("ofxTLTrack_zoomEnded",2,SWIGTYPE_p_ofxTLZoomEventArgs); }  (arg1)->zoomEnded(*arg2); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLTrack_setZoomBounds(lua_State* L) { { int SWIG_arg = 0; ofxTLTrack *arg1 = (ofxTLTrack *) 0 ;
    ofRange arg2 ; ofRange *argp2 ; SWIG_check_num_args("ofxTLTrack::setZoomBounds",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLTrack::setZoomBounds",1,"ofxTLTrack *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxTLTrack::setZoomBounds",2,"ofRange");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLTrack,0))){
      SWIG_fail_ptr("ofxTLTrack_setZoomBounds",1,SWIGTYPE_p_ofxTLTrack); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ofRange,0))){
      SWIG_fail_ptr("ofxTLTrack_setZoomBounds",2,SWIGTYPE_p_ofRange); }  arg2 = *argp2; (arg1)->setZoomBounds(arg2);
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLTrack_save(lua_State* L) { { int SWIG_arg = 0; ofxTLTrack *arg1 = (ofxTLTrack *) 0 ;
    SWIG_check_num_args("ofxTLTrack::save",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLTrack::save",1,"ofxTLTrack *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLTrack,0))){
      SWIG_fail_ptr("ofxTLTrack_save",1,SWIGTYPE_p_ofxTLTrack); }  (arg1)->save(); return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ofxTLTrack_load(lua_State* L) { { int SWIG_arg = 0; ofxTLTrack *arg1 = (ofxTLTrack *) 0 ;
    SWIG_check_num_args("ofxTLTrack::load",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLTrack::load",1,"ofxTLTrack *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLTrack,0))){
      SWIG_fail_ptr("ofxTLTrack_load",1,SWIGTYPE_p_ofxTLTrack); }  (arg1)->load(); return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ofxTLTrack_clear(lua_State* L) { { int SWIG_arg = 0; ofxTLTrack *arg1 = (ofxTLTrack *) 0 ;
    SWIG_check_num_args("ofxTLTrack::clear",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLTrack::clear",1,"ofxTLTrack *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLTrack,0))){
      SWIG_fail_ptr("ofxTLTrack_clear",1,SWIGTYPE_p_ofxTLTrack); }  (arg1)->clear(); return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ofxTLTrack_getSnappingPoints(lua_State* L) { { int SWIG_arg = 0; ofxTLTrack *arg1 = (ofxTLTrack *) 0 ;
    std::set< unsigned long long > *arg2 = 0 ; SWIG_check_num_args("ofxTLTrack::getSnappingPoints",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLTrack::getSnappingPoints",1,"ofxTLTrack *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxTLTrack::getSnappingPoints",2,"std::set< unsigned long long > &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLTrack,0))){
      SWIG_fail_ptr("ofxTLTrack_getSnappingPoints",1,SWIGTYPE_p_ofxTLTrack); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__setT_unsigned_long_long_t,0))){
      SWIG_fail_ptr("ofxTLTrack_getSnappingPoints",2,SWIGTYPE_p_std__setT_unsigned_long_long_t); } 
    (arg1)->getSnappingPoints(*arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLTrack_getTimeline(lua_State* L) { { int SWIG_arg = 0; ofxTLTrack *arg1 = (ofxTLTrack *) 0 ;
    ofxTimeline *result = 0 ; SWIG_check_num_args("ofxTLTrack::getTimeline",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLTrack::getTimeline",1,"ofxTLTrack *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLTrack,0))){
      SWIG_fail_ptr("ofxTLTrack_getTimeline",1,SWIGTYPE_p_ofxTLTrack); }  result = (ofxTimeline *)(arg1)->getTimeline();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxTimeline,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ofxTLTrack_setTimeline(lua_State* L) { { int SWIG_arg = 0; ofxTLTrack *arg1 = (ofxTLTrack *) 0 ;
    ofxTimeline *arg2 = (ofxTimeline *) 0 ; SWIG_check_num_args("ofxTLTrack::setTimeline",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLTrack::setTimeline",1,"ofxTLTrack *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofxTLTrack::setTimeline",2,"ofxTimeline *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLTrack,0))){
      SWIG_fail_ptr("ofxTLTrack_setTimeline",1,SWIGTYPE_p_ofxTLTrack); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTLTrack_setTimeline",2,SWIGTYPE_p_ofxTimeline); }  (arg1)->setTimeline(arg2); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLTrack_getName(lua_State* L) { { int SWIG_arg = 0; ofxTLTrack *arg1 = (ofxTLTrack *) 0 ; string result;
    SWIG_check_num_args("ofxTLTrack::getName",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLTrack::getName",1,"ofxTLTrack *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLTrack,0))){
      SWIG_fail_ptr("ofxTLTrack_getName",1,SWIGTYPE_p_ofxTLTrack); }  result = (arg1)->getName();
    lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ofxTLTrack_setName(lua_State* L) { { int SWIG_arg = 0; ofxTLTrack *arg1 = (ofxTLTrack *) 0 ; string arg2 ;
    SWIG_check_num_args("ofxTLTrack::setName",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLTrack::setName",1,"ofxTLTrack *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxTLTrack::setName",2,"string");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLTrack,0))){
      SWIG_fail_ptr("ofxTLTrack_setName",1,SWIGTYPE_p_ofxTLTrack); }  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
    (arg1)->setName(arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLTrack_setDisplayName(lua_State* L) { { int SWIG_arg = 0; ofxTLTrack *arg1 = (ofxTLTrack *) 0 ;
    string arg2 ; SWIG_check_num_args("ofxTLTrack::setDisplayName",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLTrack::setDisplayName",1,"ofxTLTrack *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxTLTrack::setDisplayName",2,"string");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLTrack,0))){
      SWIG_fail_ptr("ofxTLTrack_setDisplayName",1,SWIGTYPE_p_ofxTLTrack); }  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
    (arg1)->setDisplayName(arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLTrack_getDisplayName(lua_State* L) { { int SWIG_arg = 0; ofxTLTrack *arg1 = (ofxTLTrack *) 0 ;
    string result; SWIG_check_num_args("ofxTLTrack::getDisplayName",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLTrack::getDisplayName",1,"ofxTLTrack *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLTrack,0))){
      SWIG_fail_ptr("ofxTLTrack_getDisplayName",1,SWIGTYPE_p_ofxTLTrack); }  result = (arg1)->getDisplayName();
    lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ofxTLTrack_getTrackType(lua_State* L) { { int SWIG_arg = 0; ofxTLTrack *arg1 = (ofxTLTrack *) 0 ;
    string result; SWIG_check_num_args("ofxTLTrack::getTrackType",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLTrack::getTrackType",1,"ofxTLTrack *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLTrack,0))){
      SWIG_fail_ptr("ofxTLTrack_getTrackType",1,SWIGTYPE_p_ofxTLTrack); }  result = (arg1)->getTrackType();
    lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ofxTLTrack_getCreatedByTimeline(lua_State* L) { { int SWIG_arg = 0; ofxTLTrack *arg1 = (ofxTLTrack *) 0 ;
    bool result; SWIG_check_num_args("ofxTLTrack::getCreatedByTimeline",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLTrack::getCreatedByTimeline",1,"ofxTLTrack *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLTrack,0))){
      SWIG_fail_ptr("ofxTLTrack_getCreatedByTimeline",1,SWIGTYPE_p_ofxTLTrack); } 
    result = (bool)(arg1)->getCreatedByTimeline(); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLTrack_setCreatedByTimeline(lua_State* L) { { int SWIG_arg = 0; ofxTLTrack *arg1 = (ofxTLTrack *) 0 ;
    bool arg2 ; SWIG_check_num_args("ofxTLTrack::setCreatedByTimeline",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLTrack::setCreatedByTimeline",1,"ofxTLTrack *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ofxTLTrack::setCreatedByTimeline",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLTrack,0))){
      SWIG_fail_ptr("ofxTLTrack_setCreatedByTimeline",1,SWIGTYPE_p_ofxTLTrack); }  arg2 = (lua_toboolean(L, 2)!=0);
    (arg1)->setCreatedByTimeline(arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLTrack_events(lua_State* L) { { int SWIG_arg = 0; ofxTLTrack *arg1 = (ofxTLTrack *) 0 ;
    ofxTLEvents *result = 0 ; SWIG_check_num_args("ofxTLTrack::events",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLTrack::events",1,"ofxTLTrack *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLTrack,0))){
      SWIG_fail_ptr("ofxTLTrack_events",1,SWIGTYPE_p_ofxTLTrack); }  result = (ofxTLEvents *) &(arg1)->events();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxTLEvents,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ofxTLTrack_getKeyframes(lua_State* L) { { int SWIG_arg = 0; ofxTLTrack *arg1 = (ofxTLTrack *) 0 ;
    ofxTLKeyframes *result = 0 ; SWIG_check_num_args("ofxTLTrack::getKeyframes",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLTrack::getKeyframes",1,"ofxTLTrack *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLTrack,0))){
      SWIG_fail_ptr("ofxTLTrack_getKeyframes",1,SWIGTYPE_p_ofxTLTrack); } 
    result = (ofxTLKeyframes *)ofxTLTrack_getKeyframes(arg1);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxTLKeyframes,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static void swig_delete_ofxTLTrack(void *obj) {
ofxTLTrack *arg1 = (ofxTLTrack *) obj;
delete arg1;
}
static int _proxy__wrap_new_ofxTLTrack(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ofxTLTrack);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ofxTLTrack_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ofxTLTrack_methods[]= {
    { "setup", _wrap_ofxTLTrack_setup},
    { "_draw", _wrap_ofxTLTrack__draw},
    { "update", _wrap_ofxTLTrack_update},
    { "draw", _wrap_ofxTLTrack_draw},
    { "drawModalContent", _wrap_ofxTLTrack_drawModalContent},
    { "enable", _wrap_ofxTLTrack_enable},
    { "disable", _wrap_ofxTLTrack_disable},
    { "isEnabled", _wrap_ofxTLTrack_isEnabled},
    { "isActive", _wrap_ofxTLTrack_isActive},
    { "hasFocus", _wrap_ofxTLTrack_hasFocus},
    { "isHovering", _wrap_ofxTLTrack_isHovering},
    { "togglePlay", _wrap_ofxTLTrack_togglePlay},
    { "play", _wrap_ofxTLTrack_play},
    { "stop", _wrap_ofxTLTrack_stop},
    { "getIsPlaying", _wrap_ofxTLTrack_getIsPlaying},
    { "currentTrackTime", _wrap_ofxTLTrack_currentTrackTime},
    { "getDrawRect", _wrap_ofxTLTrack_getDrawRect},
    { "setDrawRect", _wrap_ofxTLTrack_setDrawRect},
    { "getBottomEdge", _wrap_ofxTLTrack_getBottomEdge},
    { "getXMLFilePath", _wrap_ofxTLTrack_getXMLFilePath},
    { "getXMLFileName", _wrap_ofxTLTrack_getXMLFileName},
    { "setXMLFileName", _wrap_ofxTLTrack_setXMLFileName},
    { "_mousePressed", _wrap_ofxTLTrack__mousePressed},
    { "_mouseMoved", _wrap_ofxTLTrack__mouseMoved},
    { "_mouseDragged", _wrap_ofxTLTrack__mouseDragged},
    { "_mouseReleased", _wrap_ofxTLTrack__mouseReleased},
    { "mousePressed", _wrap_ofxTLTrack_mousePressed},
    { "mouseMoved", _wrap_ofxTLTrack_mouseMoved},
    { "mouseDragged", _wrap_ofxTLTrack_mouseDragged},
    { "mouseReleased", _wrap_ofxTLTrack_mouseReleased},
    { "playbackStarted", _wrap_ofxTLTrack_playbackStarted},
    { "playbackLooped", _wrap_ofxTLTrack_playbackLooped},
    { "playbackEnded", _wrap_ofxTLTrack_playbackEnded},
    { "keyPressed", _wrap_ofxTLTrack_keyPressed},
    { "nudgeBy", _wrap_ofxTLTrack_nudgeBy},
    { "gainedFocus", _wrap_ofxTLTrack_gainedFocus},
    { "lostFocus", _wrap_ofxTLTrack_lostFocus},
    { "regionSelected", _wrap_ofxTLTrack_regionSelected},
    { "copyRequest", _wrap_ofxTLTrack_copyRequest},
    { "cutRequest", _wrap_ofxTLTrack_cutRequest},
    { "pasteSent", _wrap_ofxTLTrack_pasteSent},
    { "selectAll", _wrap_ofxTLTrack_selectAll},
    { "unselectAll", _wrap_ofxTLTrack_unselectAll},
    { "getEarliestTime", _wrap_ofxTLTrack_getEarliestTime},
    { "getLatestTime", _wrap_ofxTLTrack_getLatestTime},
    { "getEarliestSelectedTime", _wrap_ofxTLTrack_getEarliestSelectedTime},
    { "getLatestSelectedTime", _wrap_ofxTLTrack_getLatestSelectedTime},
    { "getSelectedItemCount", _wrap_ofxTLTrack_getSelectedItemCount},
    { "getXMLRepresentation", _wrap_ofxTLTrack_getXMLRepresentation},
    { "loadFromXMLRepresentation", _wrap_ofxTLTrack_loadFromXMLRepresentation},
    { "zoomStarted", _wrap_ofxTLTrack_zoomStarted},
    { "zoomDragged", _wrap_ofxTLTrack_zoomDragged},
    { "zoomEnded", _wrap_ofxTLTrack_zoomEnded},
    { "setZoomBounds", _wrap_ofxTLTrack_setZoomBounds},
    { "save", _wrap_ofxTLTrack_save},
    { "load", _wrap_ofxTLTrack_load},
    { "clear", _wrap_ofxTLTrack_clear},
    { "getSnappingPoints", _wrap_ofxTLTrack_getSnappingPoints},
    { "getTimeline", _wrap_ofxTLTrack_getTimeline},
    { "setTimeline", _wrap_ofxTLTrack_setTimeline},
    { "getName", _wrap_ofxTLTrack_getName},
    { "setName", _wrap_ofxTLTrack_setName},
    { "setDisplayName", _wrap_ofxTLTrack_setDisplayName},
    { "getDisplayName", _wrap_ofxTLTrack_getDisplayName},
    { "getTrackType", _wrap_ofxTLTrack_getTrackType},
    { "getCreatedByTimeline", _wrap_ofxTLTrack_getCreatedByTimeline},
    { "setCreatedByTimeline", _wrap_ofxTLTrack_setCreatedByTimeline},
    { "events", _wrap_ofxTLTrack_events},
    { "getKeyframes", _wrap_ofxTLTrack_getKeyframes},
    {0,0}
};
static swig_lua_method swig_ofxTLTrack_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ofxTLTrack_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ofxTLTrack_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ofxTLTrack_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ofxTLTrack_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ofxTLTrack_Sf_SwigStatic = {
    "ofxTLTrack",
    swig_ofxTLTrack_Sf_SwigStatic_methods,
    swig_ofxTLTrack_Sf_SwigStatic_attributes,
    swig_ofxTLTrack_Sf_SwigStatic_constants,
    swig_ofxTLTrack_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ofxTLTrack_bases[] = {0};
static const char *swig_ofxTLTrack_base_names[] = {0};
static swig_lua_class _wrap_class_ofxTLTrack = { "ofxTLTrack", "ofxTLTrack", &SWIGTYPE_p_ofxTLTrack,_proxy__wrap_new_ofxTLTrack, swig_delete_ofxTLTrack, swig_ofxTLTrack_methods, swig_ofxTLTrack_attributes, &swig_ofxTLTrack_Sf_SwigStatic, swig_ofxTLTrack_meta, swig_ofxTLTrack_bases, swig_ofxTLTrack_base_names };

static int _wrap_ofxTLKeyframe_screenPosition_set(lua_State* L) { { int SWIG_arg = 0;
    ofxTLKeyframe *arg1 = (ofxTLKeyframe *) 0 ; ofVec2f arg2 ; ofVec2f *argp2 ;
    SWIG_check_num_args("ofxTLKeyframe::screenPosition",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLKeyframe::screenPosition",1,"ofxTLKeyframe *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxTLKeyframe::screenPosition",2,"ofVec2f");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLKeyframe,0))){
      SWIG_fail_ptr("ofxTLKeyframe_screenPosition_set",1,SWIGTYPE_p_ofxTLKeyframe); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ofVec2f,0))){
      SWIG_fail_ptr("ofxTLKeyframe_screenPosition_set",2,SWIGTYPE_p_ofVec2f); }  arg2 = *argp2;
    if (arg1) (arg1)->screenPosition = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLKeyframe_screenPosition_get(lua_State* L) { { int SWIG_arg = 0;
    ofxTLKeyframe *arg1 = (ofxTLKeyframe *) 0 ; ofVec2f result; SWIG_check_num_args("ofxTLKeyframe::screenPosition",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLKeyframe::screenPosition",1,"ofxTLKeyframe *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLKeyframe,0))){
      SWIG_fail_ptr("ofxTLKeyframe_screenPosition_get",1,SWIGTYPE_p_ofxTLKeyframe); }  result =  ((arg1)->screenPosition); {
      ofVec2f * resultptr = new ofVec2f(result); SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec2f,1); SWIG_arg++; } 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLKeyframe_previousTime_set(lua_State* L) { { int SWIG_arg = 0; ofxTLKeyframe *arg1 = (ofxTLKeyframe *) 0 ;
    unsigned long long arg2 ; SWIG_check_num_args("ofxTLKeyframe::previousTime",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLKeyframe::previousTime",1,"ofxTLKeyframe *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxTLKeyframe::previousTime",2,"unsigned long long");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLKeyframe,0))){
      SWIG_fail_ptr("ofxTLKeyframe_previousTime_set",1,SWIGTYPE_p_ofxTLKeyframe); } 
    arg2 = (unsigned long long)lua_tonumber(L, 2); if (arg1) (arg1)->previousTime = arg2; return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ofxTLKeyframe_previousTime_get(lua_State* L) { { int SWIG_arg = 0; ofxTLKeyframe *arg1 = (ofxTLKeyframe *) 0 ;
    unsigned long long result; SWIG_check_num_args("ofxTLKeyframe::previousTime",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLKeyframe::previousTime",1,"ofxTLKeyframe *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLKeyframe,0))){
      SWIG_fail_ptr("ofxTLKeyframe_previousTime_get",1,SWIGTYPE_p_ofxTLKeyframe); } 
    result = (unsigned long long) ((arg1)->previousTime); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLKeyframe_time_set(lua_State* L) { { int SWIG_arg = 0; ofxTLKeyframe *arg1 = (ofxTLKeyframe *) 0 ;
    unsigned long long arg2 ; SWIG_check_num_args("ofxTLKeyframe::time",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLKeyframe::time",1,"ofxTLKeyframe *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxTLKeyframe::time",2,"unsigned long long");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLKeyframe,0))){
      SWIG_fail_ptr("ofxTLKeyframe_time_set",1,SWIGTYPE_p_ofxTLKeyframe); }  arg2 = (unsigned long long)lua_tonumber(L, 2);
    if (arg1) (arg1)->time = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLKeyframe_time_get(lua_State* L) { { int SWIG_arg = 0; ofxTLKeyframe *arg1 = (ofxTLKeyframe *) 0 ;
    unsigned long long result; SWIG_check_num_args("ofxTLKeyframe::time",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLKeyframe::time",1,"ofxTLKeyframe *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLKeyframe,0))){
      SWIG_fail_ptr("ofxTLKeyframe_time_get",1,SWIGTYPE_p_ofxTLKeyframe); }  result = (unsigned long long) ((arg1)->time);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLKeyframe_value_set(lua_State* L) { { int SWIG_arg = 0; ofxTLKeyframe *arg1 = (ofxTLKeyframe *) 0 ;
    float arg2 ; SWIG_check_num_args("ofxTLKeyframe::value",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLKeyframe::value",1,"ofxTLKeyframe *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxTLKeyframe::value",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLKeyframe,0))){
      SWIG_fail_ptr("ofxTLKeyframe_value_set",1,SWIGTYPE_p_ofxTLKeyframe); }  arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->value = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLKeyframe_value_get(lua_State* L) { { int SWIG_arg = 0; ofxTLKeyframe *arg1 = (ofxTLKeyframe *) 0 ;
    float result; SWIG_check_num_args("ofxTLKeyframe::value",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLKeyframe::value",1,"ofxTLKeyframe *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLKeyframe,0))){
      SWIG_fail_ptr("ofxTLKeyframe_value_get",1,SWIGTYPE_p_ofxTLKeyframe); }  result = (float) ((arg1)->value);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLKeyframe_grabTimeOffset_set(lua_State* L) { { int SWIG_arg = 0;
    ofxTLKeyframe *arg1 = (ofxTLKeyframe *) 0 ; long arg2 ; SWIG_check_num_args("ofxTLKeyframe::grabTimeOffset",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLKeyframe::grabTimeOffset",1,"ofxTLKeyframe *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxTLKeyframe::grabTimeOffset",2,"long");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLKeyframe,0))){
      SWIG_fail_ptr("ofxTLKeyframe_grabTimeOffset_set",1,SWIGTYPE_p_ofxTLKeyframe); }  arg2 = (long)lua_tonumber(L, 2);
    if (arg1) (arg1)->grabTimeOffset = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLKeyframe_grabTimeOffset_get(lua_State* L) { { int SWIG_arg = 0;
    ofxTLKeyframe *arg1 = (ofxTLKeyframe *) 0 ; long result; SWIG_check_num_args("ofxTLKeyframe::grabTimeOffset",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLKeyframe::grabTimeOffset",1,"ofxTLKeyframe *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLKeyframe,0))){
      SWIG_fail_ptr("ofxTLKeyframe_grabTimeOffset_get",1,SWIGTYPE_p_ofxTLKeyframe); }  result = (long) ((arg1)->grabTimeOffset);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLKeyframe_grabValueOffset_set(lua_State* L) { { int SWIG_arg = 0;
    ofxTLKeyframe *arg1 = (ofxTLKeyframe *) 0 ; float arg2 ; SWIG_check_num_args("ofxTLKeyframe::grabValueOffset",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLKeyframe::grabValueOffset",1,"ofxTLKeyframe *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxTLKeyframe::grabValueOffset",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLKeyframe,0))){
      SWIG_fail_ptr("ofxTLKeyframe_grabValueOffset_set",1,SWIGTYPE_p_ofxTLKeyframe); }  arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->grabValueOffset = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLKeyframe_grabValueOffset_get(lua_State* L) { { int SWIG_arg = 0;
    ofxTLKeyframe *arg1 = (ofxTLKeyframe *) 0 ; float result; SWIG_check_num_args("ofxTLKeyframe::grabValueOffset",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLKeyframe::grabValueOffset",1,"ofxTLKeyframe *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLKeyframe,0))){
      SWIG_fail_ptr("ofxTLKeyframe_grabValueOffset_get",1,SWIGTYPE_p_ofxTLKeyframe); } 
    result = (float) ((arg1)->grabValueOffset); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_new_ofxTLKeyframe(lua_State* L) { { int SWIG_arg = 0; ofxTLKeyframe *result = 0 ;
    SWIG_check_num_args("ofxTLKeyframe::ofxTLKeyframe",0,0) result = (ofxTLKeyframe *)new ofxTLKeyframe();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxTLKeyframe,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static void swig_delete_ofxTLKeyframe(void *obj) {
ofxTLKeyframe *arg1 = (ofxTLKeyframe *) obj;
delete arg1;
}
static int _proxy__wrap_new_ofxTLKeyframe(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ofxTLKeyframe);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ofxTLKeyframe_attributes[] = {
    { "screenPosition", _wrap_ofxTLKeyframe_screenPosition_get, _wrap_ofxTLKeyframe_screenPosition_set },
    { "previousTime", _wrap_ofxTLKeyframe_previousTime_get, _wrap_ofxTLKeyframe_previousTime_set },
    { "time", _wrap_ofxTLKeyframe_time_get, _wrap_ofxTLKeyframe_time_set },
    { "value", _wrap_ofxTLKeyframe_value_get, _wrap_ofxTLKeyframe_value_set },
    { "grabTimeOffset", _wrap_ofxTLKeyframe_grabTimeOffset_get, _wrap_ofxTLKeyframe_grabTimeOffset_set },
    { "grabValueOffset", _wrap_ofxTLKeyframe_grabValueOffset_get, _wrap_ofxTLKeyframe_grabValueOffset_set },
    {0,0,0}
};
static swig_lua_method swig_ofxTLKeyframe_methods[]= {
    {0,0}
};
static swig_lua_method swig_ofxTLKeyframe_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ofxTLKeyframe_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ofxTLKeyframe_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ofxTLKeyframe_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ofxTLKeyframe_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ofxTLKeyframe_Sf_SwigStatic = {
    "ofxTLKeyframe",
    swig_ofxTLKeyframe_Sf_SwigStatic_methods,
    swig_ofxTLKeyframe_Sf_SwigStatic_attributes,
    swig_ofxTLKeyframe_Sf_SwigStatic_constants,
    swig_ofxTLKeyframe_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ofxTLKeyframe_bases[] = {0};
static const char *swig_ofxTLKeyframe_base_names[] = {0};
static swig_lua_class _wrap_class_ofxTLKeyframe = { "ofxTLKeyframe", "ofxTLKeyframe", &SWIGTYPE_p_ofxTLKeyframe,_proxy__wrap_new_ofxTLKeyframe, swig_delete_ofxTLKeyframe, swig_ofxTLKeyframe_methods, swig_ofxTLKeyframe_attributes, &swig_ofxTLKeyframe_Sf_SwigStatic, swig_ofxTLKeyframe_meta, swig_ofxTLKeyframe_bases, swig_ofxTLKeyframe_base_names };

static int _wrap_new_ofxTLKeyframes(lua_State* L) { { int SWIG_arg = 0; ofxTLKeyframes *result = 0 ;
    SWIG_check_num_args("ofxTLKeyframes::ofxTLKeyframes",0,0) result = (ofxTLKeyframes *)new ofxTLKeyframes();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxTLKeyframes,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ofxTLKeyframes_addKeyframe__SWIG_0(lua_State* L) { { int SWIG_arg = 0;
    ofxTLKeyframes *arg1 = (ofxTLKeyframes *) 0 ; SWIG_check_num_args("ofxTLKeyframes::addKeyframe",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLKeyframes::addKeyframe",1,"ofxTLKeyframes *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLKeyframes,0))){
      SWIG_fail_ptr("ofxTLKeyframes_addKeyframe",1,SWIGTYPE_p_ofxTLKeyframes); }  (arg1)->addKeyframe(); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLKeyframes_addKeyframe__SWIG_1(lua_State* L) { { int SWIG_arg = 0;
    ofxTLKeyframes *arg1 = (ofxTLKeyframes *) 0 ; float arg2 ; SWIG_check_num_args("ofxTLKeyframes::addKeyframe",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLKeyframes::addKeyframe",1,"ofxTLKeyframes *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxTLKeyframes::addKeyframe",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLKeyframes,0))){
      SWIG_fail_ptr("ofxTLKeyframes_addKeyframe",1,SWIGTYPE_p_ofxTLKeyframes); }  arg2 = (float)lua_tonumber(L, 2);
    (arg1)->addKeyframe(arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLKeyframes_addKeyframe(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L);
  if (argc == 1) { return _wrap_ofxTLKeyframes_addKeyframe__SWIG_0(L);}  if (argc == 2) {
    return _wrap_ofxTLKeyframes_addKeyframe__SWIG_1(L);} 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofxTLKeyframes_addKeyframe'\n"
  "  Possible C/C++ prototypes are:\n" "    ofxTLKeyframes::addKeyframe()\n" "    ofxTLKeyframes::addKeyframe(float)\n");
  lua_error(L);return 0; }
static int _wrap_ofxTLKeyframes_addKeyframeAtMillis__SWIG_0(lua_State* L) { { int SWIG_arg = 0;
    ofxTLKeyframes *arg1 = (ofxTLKeyframes *) 0 ; unsigned long long arg2 ;
    SWIG_check_num_args("ofxTLKeyframes::addKeyframeAtMillis",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLKeyframes::addKeyframeAtMillis",1,"ofxTLKeyframes *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxTLKeyframes::addKeyframeAtMillis",2,"unsigned long long");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLKeyframes,0))){
      SWIG_fail_ptr("ofxTLKeyframes_addKeyframeAtMillis",1,SWIGTYPE_p_ofxTLKeyframes); } 
    arg2 = (unsigned long long)lua_tonumber(L, 2); (arg1)->addKeyframeAtMillis(arg2); return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ofxTLKeyframes_addKeyframeAtMillis__SWIG_1(lua_State* L) { { int SWIG_arg = 0;
    ofxTLKeyframes *arg1 = (ofxTLKeyframes *) 0 ; float arg2 ; unsigned long long arg3 ;
    SWIG_check_num_args("ofxTLKeyframes::addKeyframeAtMillis",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLKeyframes::addKeyframeAtMillis",1,"ofxTLKeyframes *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxTLKeyframes::addKeyframeAtMillis",2,"float");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxTLKeyframes::addKeyframeAtMillis",3,"unsigned long long");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLKeyframes,0))){
      SWIG_fail_ptr("ofxTLKeyframes_addKeyframeAtMillis",1,SWIGTYPE_p_ofxTLKeyframes); }  arg2 = (float)lua_tonumber(L, 2);
    arg3 = (unsigned long long)lua_tonumber(L, 3); (arg1)->addKeyframeAtMillis(arg2,arg3); return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ofxTLKeyframes_addKeyframeAtMillis(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L);
  if (argc == 2) { return _wrap_ofxTLKeyframes_addKeyframeAtMillis__SWIG_0(L);}  if (argc == 3) {
    return _wrap_ofxTLKeyframes_addKeyframeAtMillis__SWIG_1(L);} 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofxTLKeyframes_addKeyframeAtMillis'\n"
  "  Possible C/C++ prototypes are:\n" "    ofxTLKeyframes::addKeyframeAtMillis(unsigned long long)\n"
  "    ofxTLKeyframes::addKeyframeAtMillis(float,unsigned long long)\n"); lua_error(L);return 0; }
static int _wrap_ofxTLKeyframes_simplifySelectedKeyframes__SWIG_0(lua_State* L) { { int SWIG_arg = 0;
    ofxTLKeyframes *arg1 = (ofxTLKeyframes *) 0 ; float arg2 ;
    SWIG_check_num_args("ofxTLKeyframes::simplifySelectedKeyframes",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLKeyframes::simplifySelectedKeyframes",1,"ofxTLKeyframes *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxTLKeyframes::simplifySelectedKeyframes",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLKeyframes,0))){
      SWIG_fail_ptr("ofxTLKeyframes_simplifySelectedKeyframes",1,SWIGTYPE_p_ofxTLKeyframes); } 
    arg2 = (float)lua_tonumber(L, 2); (arg1)->simplifySelectedKeyframes(arg2); return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ofxTLKeyframes_simplifySelectedKeyframes__SWIG_1(lua_State* L) { { int SWIG_arg = 0;
    ofxTLKeyframes *arg1 = (ofxTLKeyframes *) 0 ; SWIG_check_num_args("ofxTLKeyframes::simplifySelectedKeyframes",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLKeyframes::simplifySelectedKeyframes",1,"ofxTLKeyframes *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLKeyframes,0))){
      SWIG_fail_ptr("ofxTLKeyframes_simplifySelectedKeyframes",1,SWIGTYPE_p_ofxTLKeyframes); } 
    (arg1)->simplifySelectedKeyframes(); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLKeyframes_simplifySelectedKeyframes(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L);
  if (argc == 1) { return _wrap_ofxTLKeyframes_simplifySelectedKeyframes__SWIG_1(L);}  if (argc == 2) {
    return _wrap_ofxTLKeyframes_simplifySelectedKeyframes__SWIG_0(L);} 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofxTLKeyframes_simplifySelectedKeyframes'\n"
  "  Possible C/C++ prototypes are:\n" "    ofxTLKeyframes::simplifySelectedKeyframes(float)\n"
  "    ofxTLKeyframes::simplifySelectedKeyframes()\n"); lua_error(L);return 0; }
static int _wrap_ofxTLKeyframes_getKeyframeAtMillis(lua_State* L) { { int SWIG_arg = 0;
    ofxTLKeyframes *arg1 = (ofxTLKeyframes *) 0 ; unsigned long long arg2 ; ofxTLKeyframe *result = 0 ;
    SWIG_check_num_args("ofxTLKeyframes::getKeyframeAtMillis",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLKeyframes::getKeyframeAtMillis",1,"ofxTLKeyframes *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxTLKeyframes::getKeyframeAtMillis",2,"unsigned long long");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLKeyframes,0))){
      SWIG_fail_ptr("ofxTLKeyframes_getKeyframeAtMillis",1,SWIGTYPE_p_ofxTLKeyframes); } 
    arg2 = (unsigned long long)lua_tonumber(L, 2); result = (ofxTLKeyframe *)(arg1)->getKeyframeAtMillis(arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxTLKeyframe,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ofxTLKeyframes_getKeyframes(lua_State* L) { { int SWIG_arg = 0; ofxTLKeyframes *arg1 = (ofxTLKeyframes *) 0 ;
    vector< ofxTLKeyframe * > *result = 0 ; SWIG_check_num_args("ofxTLKeyframes::getKeyframes",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLKeyframes::getKeyframes",1,"ofxTLKeyframes *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLKeyframes,0))){
      SWIG_fail_ptr("ofxTLKeyframes_getKeyframes",1,SWIGTYPE_p_ofxTLKeyframes); } 
    result = (vector< ofxTLKeyframe * > *) &(arg1)->getKeyframes();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_vectorT_ofxTLKeyframe_p_t,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ofxTLKeyframes_getValue(lua_State* L) { { int SWIG_arg = 0; ofxTLKeyframes *arg1 = (ofxTLKeyframes *) 0 ;
    float result; SWIG_check_num_args("ofxTLKeyframes::getValue",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLKeyframes::getValue",1,"ofxTLKeyframes *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLKeyframes,0))){
      SWIG_fail_ptr("ofxTLKeyframes_getValue",1,SWIGTYPE_p_ofxTLKeyframes); }  result = (float)(arg1)->getValue();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLKeyframes_getValueAtPercent(lua_State* L) { { int SWIG_arg = 0;
    ofxTLKeyframes *arg1 = (ofxTLKeyframes *) 0 ; float arg2 ; float result;
    SWIG_check_num_args("ofxTLKeyframes::getValueAtPercent",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLKeyframes::getValueAtPercent",1,"ofxTLKeyframes *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxTLKeyframes::getValueAtPercent",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLKeyframes,0))){
      SWIG_fail_ptr("ofxTLKeyframes_getValueAtPercent",1,SWIGTYPE_p_ofxTLKeyframes); }  arg2 = (float)lua_tonumber(L, 2);
    result = (float)(arg1)->getValueAtPercent(arg2); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLKeyframes_getValueAtTimeInMillis(lua_State* L) { { int SWIG_arg = 0;
    ofxTLKeyframes *arg1 = (ofxTLKeyframes *) 0 ; long arg2 ; float result;
    SWIG_check_num_args("ofxTLKeyframes::getValueAtTimeInMillis",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLKeyframes::getValueAtTimeInMillis",1,"ofxTLKeyframes *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxTLKeyframes::getValueAtTimeInMillis",2,"long");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLKeyframes,0))){
      SWIG_fail_ptr("ofxTLKeyframes_getValueAtTimeInMillis",1,SWIGTYPE_p_ofxTLKeyframes); }  arg2 = (long)lua_tonumber(L, 2);
    result = (float)(arg1)->getValueAtTimeInMillis(arg2); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLKeyframes_setValueRange__SWIG_0(lua_State* L) { { int SWIG_arg = 0;
    ofxTLKeyframes *arg1 = (ofxTLKeyframes *) 0 ; ofRange arg2 ; float arg3 ; ofRange *argp2 ;
    SWIG_check_num_args("ofxTLKeyframes::setValueRange",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLKeyframes::setValueRange",1,"ofxTLKeyframes *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxTLKeyframes::setValueRange",2,"ofRange");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxTLKeyframes::setValueRange",3,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLKeyframes,0))){
      SWIG_fail_ptr("ofxTLKeyframes_setValueRange",1,SWIGTYPE_p_ofxTLKeyframes); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ofRange,0))){
      SWIG_fail_ptr("ofxTLKeyframes_setValueRange",2,SWIGTYPE_p_ofRange); }  arg2 = *argp2; arg3 = (float)lua_tonumber(L, 3);
    (arg1)->setValueRange(arg2,arg3); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLKeyframes_setValueRange__SWIG_1(lua_State* L) { { int SWIG_arg = 0;
    ofxTLKeyframes *arg1 = (ofxTLKeyframes *) 0 ; ofRange arg2 ; ofRange *argp2 ;
    SWIG_check_num_args("ofxTLKeyframes::setValueRange",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLKeyframes::setValueRange",1,"ofxTLKeyframes *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxTLKeyframes::setValueRange",2,"ofRange");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLKeyframes,0))){
      SWIG_fail_ptr("ofxTLKeyframes_setValueRange",1,SWIGTYPE_p_ofxTLKeyframes); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ofRange,0))){
      SWIG_fail_ptr("ofxTLKeyframes_setValueRange",2,SWIGTYPE_p_ofRange); }  arg2 = *argp2; (arg1)->setValueRange(arg2);
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLKeyframes_setValueRange(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L);
  if (argc == 2) { return _wrap_ofxTLKeyframes_setValueRange__SWIG_1(L);}  if (argc == 3) {
    return _wrap_ofxTLKeyframes_setValueRange__SWIG_0(L);} 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofxTLKeyframes_setValueRange'\n"
  "  Possible C/C++ prototypes are:\n" "    ofxTLKeyframes::setValueRange(ofRange,float)\n"
  "    ofxTLKeyframes::setValueRange(ofRange)\n"); lua_error(L);return 0; }
static int _wrap_ofxTLKeyframes_setValueRangeMin(lua_State* L) { { int SWIG_arg = 0;
    ofxTLKeyframes *arg1 = (ofxTLKeyframes *) 0 ; float arg2 ; SWIG_check_num_args("ofxTLKeyframes::setValueRangeMin",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLKeyframes::setValueRangeMin",1,"ofxTLKeyframes *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxTLKeyframes::setValueRangeMin",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLKeyframes,0))){
      SWIG_fail_ptr("ofxTLKeyframes_setValueRangeMin",1,SWIGTYPE_p_ofxTLKeyframes); }  arg2 = (float)lua_tonumber(L, 2);
    (arg1)->setValueRangeMin(arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLKeyframes_setValueRangeMax(lua_State* L) { { int SWIG_arg = 0;
    ofxTLKeyframes *arg1 = (ofxTLKeyframes *) 0 ; float arg2 ; SWIG_check_num_args("ofxTLKeyframes::setValueRangeMax",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLKeyframes::setValueRangeMax",1,"ofxTLKeyframes *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxTLKeyframes::setValueRangeMax",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLKeyframes,0))){
      SWIG_fail_ptr("ofxTLKeyframes_setValueRangeMax",1,SWIGTYPE_p_ofxTLKeyframes); }  arg2 = (float)lua_tonumber(L, 2);
    (arg1)->setValueRangeMax(arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLKeyframes_setDefaultValue(lua_State* L) { { int SWIG_arg = 0;
    ofxTLKeyframes *arg1 = (ofxTLKeyframes *) 0 ; float arg2 ; SWIG_check_num_args("ofxTLKeyframes::setDefaultValue",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLKeyframes::setDefaultValue",1,"ofxTLKeyframes *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxTLKeyframes::setDefaultValue",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLKeyframes,0))){
      SWIG_fail_ptr("ofxTLKeyframes_setDefaultValue",1,SWIGTYPE_p_ofxTLKeyframes); }  arg2 = (float)lua_tonumber(L, 2);
    (arg1)->setDefaultValue(arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLKeyframes_quantizeKeys(lua_State* L) { { int SWIG_arg = 0; ofxTLKeyframes *arg1 = (ofxTLKeyframes *) 0 ;
    int arg2 ; SWIG_check_num_args("ofxTLKeyframes::quantizeKeys",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLKeyframes::quantizeKeys",1,"ofxTLKeyframes *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxTLKeyframes::quantizeKeys",2,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLKeyframes,0))){
      SWIG_fail_ptr("ofxTLKeyframes_quantizeKeys",1,SWIGTYPE_p_ofxTLKeyframes); }  arg2 = (int)lua_tonumber(L, 2);
    (arg1)->quantizeKeys(arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLKeyframes_getValueRange(lua_State* L) { { int SWIG_arg = 0; ofxTLKeyframes *arg1 = (ofxTLKeyframes *) 0 ;
    ofRange result; SWIG_check_num_args("ofxTLKeyframes::getValueRange",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLKeyframes::getValueRange",1,"ofxTLKeyframes *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLKeyframes,0))){
      SWIG_fail_ptr("ofxTLKeyframes_getValueRange",1,SWIGTYPE_p_ofxTLKeyframes); }  result = (arg1)->getValueRange(); {
      ofRange * resultptr = new ofRange(result); SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofRange,1); SWIG_arg++; } 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLKeyframes_saveToBinaryFile(lua_State* L) { { int SWIG_arg = 0;
    ofxTLKeyframes *arg1 = (ofxTLKeyframes *) 0 ; SWIG_check_num_args("ofxTLKeyframes::saveToBinaryFile",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLKeyframes::saveToBinaryFile",1,"ofxTLKeyframes *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLKeyframes,0))){
      SWIG_fail_ptr("ofxTLKeyframes_saveToBinaryFile",1,SWIGTYPE_p_ofxTLKeyframes); }  (arg1)->saveToBinaryFile();
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLKeyframes_loadFromBinaryFile(lua_State* L) { { int SWIG_arg = 0;
    ofxTLKeyframes *arg1 = (ofxTLKeyframes *) 0 ; SWIG_check_num_args("ofxTLKeyframes::loadFromBinaryFile",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLKeyframes::loadFromBinaryFile",1,"ofxTLKeyframes *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLKeyframes,0))){
      SWIG_fail_ptr("ofxTLKeyframes_loadFromBinaryFile",1,SWIGTYPE_p_ofxTLKeyframes); }  (arg1)->loadFromBinaryFile();
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLKeyframes_useBinarySave_set(lua_State* L) { { int SWIG_arg = 0;
    ofxTLKeyframes *arg1 = (ofxTLKeyframes *) 0 ; bool arg2 ; SWIG_check_num_args("ofxTLKeyframes::useBinarySave",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLKeyframes::useBinarySave",1,"ofxTLKeyframes *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ofxTLKeyframes::useBinarySave",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLKeyframes,0))){
      SWIG_fail_ptr("ofxTLKeyframes_useBinarySave_set",1,SWIGTYPE_p_ofxTLKeyframes); }  arg2 = (lua_toboolean(L, 2)!=0);
    if (arg1) (arg1)->useBinarySave = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLKeyframes_useBinarySave_get(lua_State* L) { { int SWIG_arg = 0;
    ofxTLKeyframes *arg1 = (ofxTLKeyframes *) 0 ; bool result; SWIG_check_num_args("ofxTLKeyframes::useBinarySave",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLKeyframes::useBinarySave",1,"ofxTLKeyframes *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLKeyframes,0))){
      SWIG_fail_ptr("ofxTLKeyframes_useBinarySave_get",1,SWIGTYPE_p_ofxTLKeyframes); }  result = (bool) ((arg1)->useBinarySave);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static void swig_delete_ofxTLKeyframes(void *obj) {
ofxTLKeyframes *arg1 = (ofxTLKeyframes *) obj;
delete arg1;
}
static int _proxy__wrap_new_ofxTLKeyframes(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ofxTLKeyframes);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ofxTLKeyframes_attributes[] = {
    { "useBinarySave", _wrap_ofxTLKeyframes_useBinarySave_get, _wrap_ofxTLKeyframes_useBinarySave_set },
    {0,0,0}
};
static swig_lua_method swig_ofxTLKeyframes_methods[]= {
    { "addKeyframe", _wrap_ofxTLKeyframes_addKeyframe},
    { "addKeyframeAtMillis", _wrap_ofxTLKeyframes_addKeyframeAtMillis},
    { "simplifySelectedKeyframes", _wrap_ofxTLKeyframes_simplifySelectedKeyframes},
    { "getKeyframeAtMillis", _wrap_ofxTLKeyframes_getKeyframeAtMillis},
    { "getKeyframes", _wrap_ofxTLKeyframes_getKeyframes},
    { "getValue", _wrap_ofxTLKeyframes_getValue},
    { "getValueAtPercent", _wrap_ofxTLKeyframes_getValueAtPercent},
    { "getValueAtTimeInMillis", _wrap_ofxTLKeyframes_getValueAtTimeInMillis},
    { "setValueRange", _wrap_ofxTLKeyframes_setValueRange},
    { "setValueRangeMin", _wrap_ofxTLKeyframes_setValueRangeMin},
    { "setValueRangeMax", _wrap_ofxTLKeyframes_setValueRangeMax},
    { "setDefaultValue", _wrap_ofxTLKeyframes_setDefaultValue},
    { "quantizeKeys", _wrap_ofxTLKeyframes_quantizeKeys},
    { "getValueRange", _wrap_ofxTLKeyframes_getValueRange},
    { "saveToBinaryFile", _wrap_ofxTLKeyframes_saveToBinaryFile},
    { "loadFromBinaryFile", _wrap_ofxTLKeyframes_loadFromBinaryFile},
    {0,0}
};
static swig_lua_method swig_ofxTLKeyframes_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ofxTLKeyframes_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ofxTLKeyframes_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ofxTLKeyframes_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ofxTLKeyframes_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ofxTLKeyframes_Sf_SwigStatic = {
    "ofxTLKeyframes",
    swig_ofxTLKeyframes_Sf_SwigStatic_methods,
    swig_ofxTLKeyframes_Sf_SwigStatic_attributes,
    swig_ofxTLKeyframes_Sf_SwigStatic_constants,
    swig_ofxTLKeyframes_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ofxTLKeyframes_bases[] = {0,0};
static const char *swig_ofxTLKeyframes_base_names[] = {"ofxTLTrack *",0};
static swig_lua_class _wrap_class_ofxTLKeyframes = { "ofxTLKeyframes", "ofxTLKeyframes", &SWIGTYPE_p_ofxTLKeyframes,_proxy__wrap_new_ofxTLKeyframes, swig_delete_ofxTLKeyframes, swig_ofxTLKeyframes_methods, swig_ofxTLKeyframes_attributes, &swig_ofxTLKeyframes_Sf_SwigStatic, swig_ofxTLKeyframes_meta, swig_ofxTLKeyframes_bases, swig_ofxTLKeyframes_base_names };

static int _wrap_ofxTLColorSample_samplePoint_set(lua_State* L) { { int SWIG_arg = 0;
    ofxTLColorSample *arg1 = (ofxTLColorSample *) 0 ; glm::vec2 arg2 ; glm::vec2 *argp2 ;
    SWIG_check_num_args("ofxTLColorSample::samplePoint",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLColorSample::samplePoint",1,"ofxTLColorSample *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxTLColorSample::samplePoint",2,"glm::vec2");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLColorSample,0))){
      SWIG_fail_ptr("ofxTLColorSample_samplePoint_set",1,SWIGTYPE_p_ofxTLColorSample); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_glm__vec2,0))){
      SWIG_fail_ptr("ofxTLColorSample_samplePoint_set",2,SWIGTYPE_p_glm__vec2); }  arg2 = *argp2;
    if (arg1) (arg1)->samplePoint = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLColorSample_samplePoint_get(lua_State* L) { { int SWIG_arg = 0;
    ofxTLColorSample *arg1 = (ofxTLColorSample *) 0 ; glm::vec2 result; SWIG_check_num_args("ofxTLColorSample::samplePoint",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLColorSample::samplePoint",1,"ofxTLColorSample *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLColorSample,0))){
      SWIG_fail_ptr("ofxTLColorSample_samplePoint_get",1,SWIGTYPE_p_ofxTLColorSample); }  result =  ((arg1)->samplePoint); {
      glm::vec2 * resultptr = new glm::vec2(result);
      SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_glm__vec2,1); SWIG_arg++; }  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ofxTLColorSample_color_set(lua_State* L) { { int SWIG_arg = 0;
    ofxTLColorSample *arg1 = (ofxTLColorSample *) 0 ; ofColor arg2 ; ofColor *argp2 ;
    SWIG_check_num_args("ofxTLColorSample::color",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLColorSample::color",1,"ofxTLColorSample *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxTLColorSample::color",2,"ofColor");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLColorSample,0))){
      SWIG_fail_ptr("ofxTLColorSample_color_set",1,SWIGTYPE_p_ofxTLColorSample); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ofColor,0))){
      SWIG_fail_ptr("ofxTLColorSample_color_set",2,SWIGTYPE_p_ofColor); }  arg2 = *argp2; if (arg1) (arg1)->color = arg2;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLColorSample_color_get(lua_State* L) { { int SWIG_arg = 0;
    ofxTLColorSample *arg1 = (ofxTLColorSample *) 0 ; ofColor result; SWIG_check_num_args("ofxTLColorSample::color",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLColorSample::color",1,"ofxTLColorSample *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLColorSample,0))){
      SWIG_fail_ptr("ofxTLColorSample_color_get",1,SWIGTYPE_p_ofxTLColorSample); }  result =  ((arg1)->color); {
      ofColor * resultptr = new ofColor(result); SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofColor,1); SWIG_arg++; } 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_new_ofxTLColorSample(lua_State* L) { { int SWIG_arg = 0; ofxTLColorSample *result = 0 ;
    SWIG_check_num_args("ofxTLColorSample::ofxTLColorSample",0,0) result = (ofxTLColorSample *)new ofxTLColorSample();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxTLColorSample,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static void swig_delete_ofxTLColorSample(void *obj) {
ofxTLColorSample *arg1 = (ofxTLColorSample *) obj;
delete arg1;
}
static int _proxy__wrap_new_ofxTLColorSample(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ofxTLColorSample);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ofxTLColorSample_attributes[] = {
    { "samplePoint", _wrap_ofxTLColorSample_samplePoint_get, _wrap_ofxTLColorSample_samplePoint_set },
    { "color", _wrap_ofxTLColorSample_color_get, _wrap_ofxTLColorSample_color_set },
    {0,0,0}
};
static swig_lua_method swig_ofxTLColorSample_methods[]= {
    {0,0}
};
static swig_lua_method swig_ofxTLColorSample_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ofxTLColorSample_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ofxTLColorSample_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ofxTLColorSample_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ofxTLColorSample_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ofxTLColorSample_Sf_SwigStatic = {
    "ofxTLColorSample",
    swig_ofxTLColorSample_Sf_SwigStatic_methods,
    swig_ofxTLColorSample_Sf_SwigStatic_attributes,
    swig_ofxTLColorSample_Sf_SwigStatic_constants,
    swig_ofxTLColorSample_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ofxTLColorSample_bases[] = {0,0};
static const char *swig_ofxTLColorSample_base_names[] = {"ofxTLKeyframe *",0};
static swig_lua_class _wrap_class_ofxTLColorSample = { "ofxTLColorSample", "ofxTLColorSample", &SWIGTYPE_p_ofxTLColorSample,_proxy__wrap_new_ofxTLColorSample, swig_delete_ofxTLColorSample, swig_ofxTLColorSample_methods, swig_ofxTLColorSample_attributes, &swig_ofxTLColorSample_Sf_SwigStatic, swig_ofxTLColorSample_meta, swig_ofxTLColorSample_bases, swig_ofxTLColorSample_base_names };

static int _wrap_new_ofxTLColorTrack(lua_State* L) { { int SWIG_arg = 0; ofxTLColorTrack *result = 0 ;
    SWIG_check_num_args("ofxTLColorTrack::ofxTLColorTrack",0,0) result = (ofxTLColorTrack *)new ofxTLColorTrack();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxTLColorTrack,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ofxTLColorTrack_loadColorPalette__SWIG_0(lua_State* L) { { int SWIG_arg = 0;
    ofxTLColorTrack *arg1 = (ofxTLColorTrack *) 0 ; ofBaseHasPixels *arg2 = 0 ;
    SWIG_check_num_args("ofxTLColorTrack::loadColorPalette",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLColorTrack::loadColorPalette",1,"ofxTLColorTrack *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxTLColorTrack::loadColorPalette",2,"ofBaseHasPixels &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLColorTrack,0))){
      SWIG_fail_ptr("ofxTLColorTrack_loadColorPalette",1,SWIGTYPE_p_ofxTLColorTrack); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofBaseHasPixels,0))){
      SWIG_fail_ptr("ofxTLColorTrack_loadColorPalette",2,SWIGTYPE_p_ofBaseHasPixels); }  (arg1)->loadColorPalette(*arg2);
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLColorTrack_loadColorPalette__SWIG_1(lua_State* L) { { int SWIG_arg = 0;
    ofxTLColorTrack *arg1 = (ofxTLColorTrack *) 0 ; string arg2 ; bool result;
    SWIG_check_num_args("ofxTLColorTrack::loadColorPalette",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLColorTrack::loadColorPalette",1,"ofxTLColorTrack *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxTLColorTrack::loadColorPalette",2,"string");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLColorTrack,0))){
      SWIG_fail_ptr("ofxTLColorTrack_loadColorPalette",1,SWIGTYPE_p_ofxTLColorTrack); } 
    (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2)); result = (bool)(arg1)->loadColorPalette(arg2);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLColorTrack_loadColorPalette(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L);
  if (argc == 2) { int _v = 0; { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofBaseHasPixels, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  } }  if (!_v) goto check_1; return _wrap_ofxTLColorTrack_loadColorPalette__SWIG_0(L);} 
  check_1: if (argc == 2) { return _wrap_ofxTLColorTrack_loadColorPalette__SWIG_1(L);} 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofxTLColorTrack_loadColorPalette'\n"
  "  Possible C/C++ prototypes are:\n" "    ofxTLColorTrack::loadColorPalette(ofBaseHasPixels &)\n"
  "    ofxTLColorTrack::loadColorPalette(string)\n"); lua_error(L);return 0; }
static int _wrap_ofxTLColorTrack_getPalettePath(lua_State* L) { { int SWIG_arg = 0;
    ofxTLColorTrack *arg1 = (ofxTLColorTrack *) 0 ; string result; SWIG_check_num_args("ofxTLColorTrack::getPalettePath",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLColorTrack::getPalettePath",1,"ofxTLColorTrack *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLColorTrack,0))){
      SWIG_fail_ptr("ofxTLColorTrack_getPalettePath",1,SWIGTYPE_p_ofxTLColorTrack); }  result = (arg1)->getPalettePath();
    lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ofxTLColorTrack_getColor(lua_State* L) { { int SWIG_arg = 0; ofxTLColorTrack *arg1 = (ofxTLColorTrack *) 0 ;
    ofColor result; SWIG_check_num_args("ofxTLColorTrack::getColor",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLColorTrack::getColor",1,"ofxTLColorTrack *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLColorTrack,0))){
      SWIG_fail_ptr("ofxTLColorTrack_getColor",1,SWIGTYPE_p_ofxTLColorTrack); }  result = (arg1)->getColor(); {
      ofColor * resultptr = new ofColor(result); SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofColor,1); SWIG_arg++; } 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLColorTrack_getColorAtSecond(lua_State* L) { { int SWIG_arg = 0;
    ofxTLColorTrack *arg1 = (ofxTLColorTrack *) 0 ; float arg2 ; ofColor result;
    SWIG_check_num_args("ofxTLColorTrack::getColorAtSecond",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLColorTrack::getColorAtSecond",1,"ofxTLColorTrack *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxTLColorTrack::getColorAtSecond",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLColorTrack,0))){
      SWIG_fail_ptr("ofxTLColorTrack_getColorAtSecond",1,SWIGTYPE_p_ofxTLColorTrack); }  arg2 = (float)lua_tonumber(L, 2);
    result = (arg1)->getColorAtSecond(arg2); { ofColor * resultptr = new ofColor(result);
      SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofColor,1); SWIG_arg++; }  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ofxTLColorTrack_getColorAtMillis(lua_State* L) { { int SWIG_arg = 0;
    ofxTLColorTrack *arg1 = (ofxTLColorTrack *) 0 ; unsigned long long arg2 ; ofColor result;
    SWIG_check_num_args("ofxTLColorTrack::getColorAtMillis",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLColorTrack::getColorAtMillis",1,"ofxTLColorTrack *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxTLColorTrack::getColorAtMillis",2,"unsigned long long");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLColorTrack,0))){
      SWIG_fail_ptr("ofxTLColorTrack_getColorAtMillis",1,SWIGTYPE_p_ofxTLColorTrack); } 
    arg2 = (unsigned long long)lua_tonumber(L, 2); result = (arg1)->getColorAtMillis(arg2); {
      ofColor * resultptr = new ofColor(result); SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofColor,1); SWIG_arg++; } 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLColorTrack_getColorAtPosition(lua_State* L) { { int SWIG_arg = 0;
    ofxTLColorTrack *arg1 = (ofxTLColorTrack *) 0 ; float arg2 ; ofColor result;
    SWIG_check_num_args("ofxTLColorTrack::getColorAtPosition",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLColorTrack::getColorAtPosition",1,"ofxTLColorTrack *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxTLColorTrack::getColorAtPosition",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLColorTrack,0))){
      SWIG_fail_ptr("ofxTLColorTrack_getColorAtPosition",1,SWIGTYPE_p_ofxTLColorTrack); }  arg2 = (float)lua_tonumber(L, 2);
    result = (arg1)->getColorAtPosition(arg2); { ofColor * resultptr = new ofColor(result);
      SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofColor,1); SWIG_arg++; }  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ofxTLColorTrack_setDefaultColor(lua_State* L) { { int SWIG_arg = 0;
    ofxTLColorTrack *arg1 = (ofxTLColorTrack *) 0 ; ofColor arg2 ; ofColor *argp2 ;
    SWIG_check_num_args("ofxTLColorTrack::setDefaultColor",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLColorTrack::setDefaultColor",1,"ofxTLColorTrack *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxTLColorTrack::setDefaultColor",2,"ofColor");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLColorTrack,0))){
      SWIG_fail_ptr("ofxTLColorTrack_setDefaultColor",1,SWIGTYPE_p_ofxTLColorTrack); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ofColor,0))){
      SWIG_fail_ptr("ofxTLColorTrack_setDefaultColor",2,SWIGTYPE_p_ofColor); }  arg2 = *argp2; (arg1)->setDefaultColor(arg2);
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLColorTrack_getDefaultColor(lua_State* L) { { int SWIG_arg = 0;
    ofxTLColorTrack *arg1 = (ofxTLColorTrack *) 0 ; ofColor result; SWIG_check_num_args("ofxTLColorTrack::getDefaultColor",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLColorTrack::getDefaultColor",1,"ofxTLColorTrack *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLColorTrack,0))){
      SWIG_fail_ptr("ofxTLColorTrack_getDefaultColor",1,SWIGTYPE_p_ofxTLColorTrack); }  result = (arg1)->getDefaultColor(); {
      ofColor * resultptr = new ofColor(result); SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofColor,1); SWIG_arg++; } 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLColorTrack_getTrack(lua_State* L) { { int SWIG_arg = 0; ofxTLColorTrack *arg1 = (ofxTLColorTrack *) 0 ;
    ofxTLTrack *result = 0 ; SWIG_check_num_args("ofxTLColorTrack::getTrack",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLColorTrack::getTrack",1,"ofxTLColorTrack *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLColorTrack,0))){
      SWIG_fail_ptr("ofxTLColorTrack_getTrack",1,SWIGTYPE_p_ofxTLColorTrack); } 
    result = (ofxTLTrack *)ofxTLColorTrack_getTrack(arg1); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxTLTrack,0); SWIG_arg++; 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static void swig_delete_ofxTLColorTrack(void *obj) {
ofxTLColorTrack *arg1 = (ofxTLColorTrack *) obj;
delete arg1;
}
static int _proxy__wrap_new_ofxTLColorTrack(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ofxTLColorTrack);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ofxTLColorTrack_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ofxTLColorTrack_methods[]= {
    { "loadColorPalette", _wrap_ofxTLColorTrack_loadColorPalette},
    { "getPalettePath", _wrap_ofxTLColorTrack_getPalettePath},
    { "getColor", _wrap_ofxTLColorTrack_getColor},
    { "getColorAtSecond", _wrap_ofxTLColorTrack_getColorAtSecond},
    { "getColorAtMillis", _wrap_ofxTLColorTrack_getColorAtMillis},
    { "getColorAtPosition", _wrap_ofxTLColorTrack_getColorAtPosition},
    { "setDefaultColor", _wrap_ofxTLColorTrack_setDefaultColor},
    { "getDefaultColor", _wrap_ofxTLColorTrack_getDefaultColor},
    { "getTrack", _wrap_ofxTLColorTrack_getTrack},
    {0,0}
};
static swig_lua_method swig_ofxTLColorTrack_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ofxTLColorTrack_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ofxTLColorTrack_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ofxTLColorTrack_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ofxTLColorTrack_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ofxTLColorTrack_Sf_SwigStatic = {
    "ofxTLColorTrack",
    swig_ofxTLColorTrack_Sf_SwigStatic_methods,
    swig_ofxTLColorTrack_Sf_SwigStatic_attributes,
    swig_ofxTLColorTrack_Sf_SwigStatic_constants,
    swig_ofxTLColorTrack_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ofxTLColorTrack_bases[] = {0,0};
static const char *swig_ofxTLColorTrack_base_names[] = {"ofxTLKeyframes *",0};
static swig_lua_class _wrap_class_ofxTLColorTrack = { "ofxTLColorTrack", "ofxTLColorTrack", &SWIGTYPE_p_ofxTLColorTrack,_proxy__wrap_new_ofxTLColorTrack, swig_delete_ofxTLColorTrack, swig_ofxTLColorTrack_methods, swig_ofxTLColorTrack_attributes, &swig_ofxTLColorTrack_Sf_SwigStatic, swig_ofxTLColorTrack_meta, swig_ofxTLColorTrack_bases, swig_ofxTLColorTrack_base_names };

static int _wrap_ClickPoint_value_set(lua_State* L) { { int SWIG_arg = 0; ClickPoint *arg1 = (ClickPoint *) 0 ; float arg2 ;
    SWIG_check_num_args("ClickPoint::value",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ClickPoint::value",1,"ClickPoint *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ClickPoint::value",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ClickPoint,0))){
      SWIG_fail_ptr("ClickPoint_value_set",1,SWIGTYPE_p_ClickPoint); }  arg2 = (float)lua_tonumber(L, 2);
    if (arg1) (arg1)->value = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ClickPoint_value_get(lua_State* L) { { int SWIG_arg = 0; ClickPoint *arg1 = (ClickPoint *) 0 ; float result;
    SWIG_check_num_args("ClickPoint::value",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ClickPoint::value",1,"ClickPoint *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ClickPoint,0))){
      SWIG_fail_ptr("ClickPoint_value_get",1,SWIGTYPE_p_ClickPoint); }  result = (float) ((arg1)->value);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ClickPoint_time_set(lua_State* L) { { int SWIG_arg = 0; ClickPoint *arg1 = (ClickPoint *) 0 ;
    unsigned long long arg2 ; SWIG_check_num_args("ClickPoint::time",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ClickPoint::time",1,"ClickPoint *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ClickPoint::time",2,"unsigned long long");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ClickPoint,0))){
      SWIG_fail_ptr("ClickPoint_time_set",1,SWIGTYPE_p_ClickPoint); }  arg2 = (unsigned long long)lua_tonumber(L, 2);
    if (arg1) (arg1)->time = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ClickPoint_time_get(lua_State* L) { { int SWIG_arg = 0; ClickPoint *arg1 = (ClickPoint *) 0 ;
    unsigned long long result; SWIG_check_num_args("ClickPoint::time",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ClickPoint::time",1,"ClickPoint *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ClickPoint,0))){
      SWIG_fail_ptr("ClickPoint_time_get",1,SWIGTYPE_p_ClickPoint); }  result = (unsigned long long) ((arg1)->time);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_new_ClickPoint(lua_State* L) { { int SWIG_arg = 0; ClickPoint *result = 0 ;
    SWIG_check_num_args("ClickPoint::ClickPoint",0,0) result = (ClickPoint *)new ClickPoint();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ClickPoint,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static void swig_delete_ClickPoint(void *obj) {
ClickPoint *arg1 = (ClickPoint *) obj;
delete arg1;
}
static int _proxy__wrap_new_ClickPoint(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ClickPoint);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ClickPoint_attributes[] = {
    { "value", _wrap_ClickPoint_value_get, _wrap_ClickPoint_value_set },
    { "time", _wrap_ClickPoint_time_get, _wrap_ClickPoint_time_set },
    {0,0,0}
};
static swig_lua_method swig_ClickPoint_methods[]= {
    {0,0}
};
static swig_lua_method swig_ClickPoint_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ClickPoint_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ClickPoint_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ClickPoint_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ClickPoint_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ClickPoint_Sf_SwigStatic = {
    "ClickPoint",
    swig_ClickPoint_Sf_SwigStatic_methods,
    swig_ClickPoint_Sf_SwigStatic_attributes,
    swig_ClickPoint_Sf_SwigStatic_constants,
    swig_ClickPoint_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ClickPoint_bases[] = {0};
static const char *swig_ClickPoint_base_names[] = {0};
static swig_lua_class _wrap_class_ClickPoint = { "ClickPoint", "ClickPoint", &SWIGTYPE_p_ClickPoint,_proxy__wrap_new_ClickPoint, swig_delete_ClickPoint, swig_ClickPoint_methods, swig_ClickPoint_attributes, &swig_ClickPoint_Sf_SwigStatic, swig_ClickPoint_meta, swig_ClickPoint_bases, swig_ClickPoint_base_names };

static int _wrap_new_ofxTLEmptyTrack(lua_State* L) { { int SWIG_arg = 0; ofxTLEmptyTrack *result = 0 ;
    SWIG_check_num_args("ofxTLEmptyTrack::ofxTLEmptyTrack",0,0) result = (ofxTLEmptyTrack *)new ofxTLEmptyTrack();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxTLEmptyTrack,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ofxTLEmptyTrack_getTrack(lua_State* L) { { int SWIG_arg = 0; ofxTLEmptyTrack *arg1 = (ofxTLEmptyTrack *) 0 ;
    ofxTLTrack *result = 0 ; SWIG_check_num_args("ofxTLEmptyTrack::getTrack",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLEmptyTrack::getTrack",1,"ofxTLEmptyTrack *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLEmptyTrack,0))){
      SWIG_fail_ptr("ofxTLEmptyTrack_getTrack",1,SWIGTYPE_p_ofxTLEmptyTrack); } 
    result = (ofxTLTrack *)ofxTLEmptyTrack_getTrack(arg1); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxTLTrack,0); SWIG_arg++; 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static void swig_delete_ofxTLEmptyTrack(void *obj) {
ofxTLEmptyTrack *arg1 = (ofxTLEmptyTrack *) obj;
delete arg1;
}
static int _proxy__wrap_new_ofxTLEmptyTrack(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ofxTLEmptyTrack);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ofxTLEmptyTrack_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ofxTLEmptyTrack_methods[]= {
    { "getTrack", _wrap_ofxTLEmptyTrack_getTrack},
    {0,0}
};
static swig_lua_method swig_ofxTLEmptyTrack_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ofxTLEmptyTrack_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ofxTLEmptyTrack_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ofxTLEmptyTrack_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ofxTLEmptyTrack_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ofxTLEmptyTrack_Sf_SwigStatic = {
    "ofxTLEmptyTrack",
    swig_ofxTLEmptyTrack_Sf_SwigStatic_methods,
    swig_ofxTLEmptyTrack_Sf_SwigStatic_attributes,
    swig_ofxTLEmptyTrack_Sf_SwigStatic_constants,
    swig_ofxTLEmptyTrack_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ofxTLEmptyTrack_bases[] = {0,0};
static const char *swig_ofxTLEmptyTrack_base_names[] = {"ofxTLTrack *",0};
static swig_lua_class _wrap_class_ofxTLEmptyTrack = { "ofxTLEmptyTrack", "ofxTLEmptyTrack", &SWIGTYPE_p_ofxTLEmptyTrack,_proxy__wrap_new_ofxTLEmptyTrack, swig_delete_ofxTLEmptyTrack, swig_ofxTLEmptyTrack_methods, swig_ofxTLEmptyTrack_attributes, &swig_ofxTLEmptyTrack_Sf_SwigStatic, swig_ofxTLEmptyTrack_meta, swig_ofxTLEmptyTrack_bases, swig_ofxTLEmptyTrack_base_names };

static int _wrap_ofxTLEmptyKeyframe_color_set(lua_State* L) { { int SWIG_arg = 0;
    ofxTLEmptyKeyframe *arg1 = (ofxTLEmptyKeyframe *) 0 ; ofColor arg2 ; ofColor *argp2 ;
    SWIG_check_num_args("ofxTLEmptyKeyframe::color",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLEmptyKeyframe::color",1,"ofxTLEmptyKeyframe *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxTLEmptyKeyframe::color",2,"ofColor");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLEmptyKeyframe,0))){
      SWIG_fail_ptr("ofxTLEmptyKeyframe_color_set",1,SWIGTYPE_p_ofxTLEmptyKeyframe); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ofColor,0))){
      SWIG_fail_ptr("ofxTLEmptyKeyframe_color_set",2,SWIGTYPE_p_ofColor); }  arg2 = *argp2; if (arg1) (arg1)->color = arg2;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLEmptyKeyframe_color_get(lua_State* L) { { int SWIG_arg = 0;
    ofxTLEmptyKeyframe *arg1 = (ofxTLEmptyKeyframe *) 0 ; ofColor result; SWIG_check_num_args("ofxTLEmptyKeyframe::color",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLEmptyKeyframe::color",1,"ofxTLEmptyKeyframe *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLEmptyKeyframe,0))){
      SWIG_fail_ptr("ofxTLEmptyKeyframe_color_get",1,SWIGTYPE_p_ofxTLEmptyKeyframe); }  result =  ((arg1)->color); {
      ofColor * resultptr = new ofColor(result); SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofColor,1); SWIG_arg++; } 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_new_ofxTLEmptyKeyframe(lua_State* L) { { int SWIG_arg = 0; ofxTLEmptyKeyframe *result = 0 ;
    SWIG_check_num_args("ofxTLEmptyKeyframe::ofxTLEmptyKeyframe",0,0) result = (ofxTLEmptyKeyframe *)new ofxTLEmptyKeyframe();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxTLEmptyKeyframe,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static void swig_delete_ofxTLEmptyKeyframe(void *obj) {
ofxTLEmptyKeyframe *arg1 = (ofxTLEmptyKeyframe *) obj;
delete arg1;
}
static int _proxy__wrap_new_ofxTLEmptyKeyframe(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ofxTLEmptyKeyframe);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ofxTLEmptyKeyframe_attributes[] = {
    { "color", _wrap_ofxTLEmptyKeyframe_color_get, _wrap_ofxTLEmptyKeyframe_color_set },
    {0,0,0}
};
static swig_lua_method swig_ofxTLEmptyKeyframe_methods[]= {
    {0,0}
};
static swig_lua_method swig_ofxTLEmptyKeyframe_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ofxTLEmptyKeyframe_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ofxTLEmptyKeyframe_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ofxTLEmptyKeyframe_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ofxTLEmptyKeyframe_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ofxTLEmptyKeyframe_Sf_SwigStatic = {
    "ofxTLEmptyKeyframe",
    swig_ofxTLEmptyKeyframe_Sf_SwigStatic_methods,
    swig_ofxTLEmptyKeyframe_Sf_SwigStatic_attributes,
    swig_ofxTLEmptyKeyframe_Sf_SwigStatic_constants,
    swig_ofxTLEmptyKeyframe_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ofxTLEmptyKeyframe_bases[] = {0,0};
static const char *swig_ofxTLEmptyKeyframe_base_names[] = {"ofxTLKeyframe *",0};
static swig_lua_class _wrap_class_ofxTLEmptyKeyframe = { "ofxTLEmptyKeyframe", "ofxTLEmptyKeyframe", &SWIGTYPE_p_ofxTLEmptyKeyframe,_proxy__wrap_new_ofxTLEmptyKeyframe, swig_delete_ofxTLEmptyKeyframe, swig_ofxTLEmptyKeyframe_methods, swig_ofxTLEmptyKeyframe_attributes, &swig_ofxTLEmptyKeyframe_Sf_SwigStatic, swig_ofxTLEmptyKeyframe_meta, swig_ofxTLEmptyKeyframe_bases, swig_ofxTLEmptyKeyframe_base_names };

static int _wrap_new_ofxTLEmptyKeyframes(lua_State* L) { { int SWIG_arg = 0; ofxTLEmptyKeyframes *result = 0 ;
    SWIG_check_num_args("ofxTLEmptyKeyframes::ofxTLEmptyKeyframes",0,0)
    result = (ofxTLEmptyKeyframes *)new ofxTLEmptyKeyframes();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxTLEmptyKeyframes,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ofxTLEmptyKeyframes_getCurrentColor(lua_State* L) { { int SWIG_arg = 0;
    ofxTLEmptyKeyframes *arg1 = (ofxTLEmptyKeyframes *) 0 ; ofColor result;
    SWIG_check_num_args("ofxTLEmptyKeyframes::getCurrentColor",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLEmptyKeyframes::getCurrentColor",1,"ofxTLEmptyKeyframes *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLEmptyKeyframes,0))){
      SWIG_fail_ptr("ofxTLEmptyKeyframes_getCurrentColor",1,SWIGTYPE_p_ofxTLEmptyKeyframes); } 
    result = (arg1)->getCurrentColor(); { ofColor * resultptr = new ofColor(result);
      SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofColor,1); SWIG_arg++; }  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ofxTLEmptyKeyframes_getColorAtTime(lua_State* L) { { int SWIG_arg = 0;
    ofxTLEmptyKeyframes *arg1 = (ofxTLEmptyKeyframes *) 0 ; unsigned long long arg2 ; ofColor result;
    SWIG_check_num_args("ofxTLEmptyKeyframes::getColorAtTime",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLEmptyKeyframes::getColorAtTime",1,"ofxTLEmptyKeyframes *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxTLEmptyKeyframes::getColorAtTime",2,"unsigned long long");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLEmptyKeyframes,0))){
      SWIG_fail_ptr("ofxTLEmptyKeyframes_getColorAtTime",1,SWIGTYPE_p_ofxTLEmptyKeyframes); } 
    arg2 = (unsigned long long)lua_tonumber(L, 2); result = (arg1)->getColorAtTime(arg2); {
      ofColor * resultptr = new ofColor(result); SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofColor,1); SWIG_arg++; } 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLEmptyKeyframes_getTrack(lua_State* L) { { int SWIG_arg = 0;
    ofxTLEmptyKeyframes *arg1 = (ofxTLEmptyKeyframes *) 0 ; ofxTLTrack *result = 0 ;
    SWIG_check_num_args("ofxTLEmptyKeyframes::getTrack",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLEmptyKeyframes::getTrack",1,"ofxTLEmptyKeyframes *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLEmptyKeyframes,0))){
      SWIG_fail_ptr("ofxTLEmptyKeyframes_getTrack",1,SWIGTYPE_p_ofxTLEmptyKeyframes); } 
    result = (ofxTLTrack *)ofxTLEmptyKeyframes_getTrack(arg1);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxTLTrack,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static void swig_delete_ofxTLEmptyKeyframes(void *obj) {
ofxTLEmptyKeyframes *arg1 = (ofxTLEmptyKeyframes *) obj;
delete arg1;
}
static int _proxy__wrap_new_ofxTLEmptyKeyframes(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ofxTLEmptyKeyframes);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ofxTLEmptyKeyframes_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ofxTLEmptyKeyframes_methods[]= {
    { "getCurrentColor", _wrap_ofxTLEmptyKeyframes_getCurrentColor},
    { "getColorAtTime", _wrap_ofxTLEmptyKeyframes_getColorAtTime},
    { "getTrack", _wrap_ofxTLEmptyKeyframes_getTrack},
    {0,0}
};
static swig_lua_method swig_ofxTLEmptyKeyframes_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ofxTLEmptyKeyframes_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ofxTLEmptyKeyframes_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ofxTLEmptyKeyframes_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ofxTLEmptyKeyframes_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ofxTLEmptyKeyframes_Sf_SwigStatic = {
    "ofxTLEmptyKeyframes",
    swig_ofxTLEmptyKeyframes_Sf_SwigStatic_methods,
    swig_ofxTLEmptyKeyframes_Sf_SwigStatic_attributes,
    swig_ofxTLEmptyKeyframes_Sf_SwigStatic_constants,
    swig_ofxTLEmptyKeyframes_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ofxTLEmptyKeyframes_bases[] = {0,0};
static const char *swig_ofxTLEmptyKeyframes_base_names[] = {"ofxTLKeyframes *",0};
static swig_lua_class _wrap_class_ofxTLEmptyKeyframes = { "ofxTLEmptyKeyframes", "ofxTLEmptyKeyframes", &SWIGTYPE_p_ofxTLEmptyKeyframes,_proxy__wrap_new_ofxTLEmptyKeyframes, swig_delete_ofxTLEmptyKeyframes, swig_ofxTLEmptyKeyframes_methods, swig_ofxTLEmptyKeyframes_attributes, &swig_ofxTLEmptyKeyframes_Sf_SwigStatic, swig_ofxTLEmptyKeyframes_meta, swig_ofxTLEmptyKeyframes_bases, swig_ofxTLEmptyKeyframes_base_names };

static int _wrap_new_ofxTLVideoTrack(lua_State* L) { { int SWIG_arg = 0; ofxTLVideoTrack *result = 0 ;
    SWIG_check_num_args("ofxTLVideoTrack::ofxTLVideoTrack",0,0) result = (ofxTLVideoTrack *)new ofxTLVideoTrack();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxTLVideoTrack,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ofxTLVideoTrack_setup(lua_State* L) { { int SWIG_arg = 0; ofxTLVideoTrack *arg1 = (ofxTLVideoTrack *) 0 ;
    SWIG_check_num_args("ofxTLVideoTrack::setup",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLVideoTrack::setup",1,"ofxTLVideoTrack *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLVideoTrack,0))){
      SWIG_fail_ptr("ofxTLVideoTrack_setup",1,SWIGTYPE_p_ofxTLVideoTrack); }  (arg1)->setup(); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLVideoTrack_draw(lua_State* L) { { int SWIG_arg = 0; ofxTLVideoTrack *arg1 = (ofxTLVideoTrack *) 0 ;
    SWIG_check_num_args("ofxTLVideoTrack::draw",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLVideoTrack::draw",1,"ofxTLVideoTrack *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLVideoTrack,0))){
      SWIG_fail_ptr("ofxTLVideoTrack_draw",1,SWIGTYPE_p_ofxTLVideoTrack); }  (arg1)->draw(); return SWIG_arg; fail: SWIGUNUSED; }
   lua_error(L); return 0; }
static int _wrap_ofxTLVideoTrack_enable(lua_State* L) { { int SWIG_arg = 0; ofxTLVideoTrack *arg1 = (ofxTLVideoTrack *) 0 ;
    SWIG_check_num_args("ofxTLVideoTrack::enable",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLVideoTrack::enable",1,"ofxTLVideoTrack *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLVideoTrack,0))){
      SWIG_fail_ptr("ofxTLVideoTrack_enable",1,SWIGTYPE_p_ofxTLVideoTrack); }  (arg1)->enable(); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLVideoTrack_disable(lua_State* L) { { int SWIG_arg = 0; ofxTLVideoTrack *arg1 = (ofxTLVideoTrack *) 0 ;
    SWIG_check_num_args("ofxTLVideoTrack::disable",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLVideoTrack::disable",1,"ofxTLVideoTrack *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLVideoTrack,0))){
      SWIG_fail_ptr("ofxTLVideoTrack_disable",1,SWIGTYPE_p_ofxTLVideoTrack); }  (arg1)->disable(); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLVideoTrack_load(lua_State* L) { { int SWIG_arg = 0; ofxTLVideoTrack *arg1 = (ofxTLVideoTrack *) 0 ;
    string arg2 ; bool result; SWIG_check_num_args("ofxTLVideoTrack::load",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLVideoTrack::load",1,"ofxTLVideoTrack *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxTLVideoTrack::load",2,"string");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLVideoTrack,0))){
      SWIG_fail_ptr("ofxTLVideoTrack_load",1,SWIGTYPE_p_ofxTLVideoTrack); }  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
    result = (bool)(arg1)->load(arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ofxTLVideoTrack_setPlayer__SWIG_0(lua_State* L) { { int SWIG_arg = 0;
    ofxTLVideoTrack *arg1 = (ofxTLVideoTrack *) 0 ; ofVideoPlayer *arg2 = 0 ;
    SWIG_check_num_args("ofxTLVideoTrack::setPlayer",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLVideoTrack::setPlayer",1,"ofxTLVideoTrack *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxTLVideoTrack::setPlayer",2,"ofVideoPlayer &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLVideoTrack,0))){
      SWIG_fail_ptr("ofxTLVideoTrack_setPlayer",1,SWIGTYPE_p_ofxTLVideoTrack); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVideoPlayer,0))){
      SWIG_fail_ptr("ofxTLVideoTrack_setPlayer",2,SWIGTYPE_p_ofVideoPlayer); }  (arg1)->setPlayer(*arg2); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLVideoTrack_setPlayer__SWIG_1(lua_State* L) { { int SWIG_arg = 0;
    ofxTLVideoTrack *arg1 = (ofxTLVideoTrack *) 0 ; ofPtr< ofVideoPlayer > arg2 ; ofPtr< ofVideoPlayer > *argp2 ;
    SWIG_check_num_args("ofxTLVideoTrack::setPlayer",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLVideoTrack::setPlayer",1,"ofxTLVideoTrack *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxTLVideoTrack::setPlayer",2,"ofPtr< ofVideoPlayer >");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLVideoTrack,0))){
      SWIG_fail_ptr("ofxTLVideoTrack_setPlayer",1,SWIGTYPE_p_ofxTLVideoTrack); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ofPtrT_ofVideoPlayer_t,0))){
      SWIG_fail_ptr("ofxTLVideoTrack_setPlayer",2,SWIGTYPE_p_ofPtrT_ofVideoPlayer_t); }  arg2 = *argp2; (arg1)->setPlayer(arg2);
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLVideoTrack_setPlayer(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L);
  if (argc == 2) { int _v = 0; { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVideoPlayer, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  } }  if (!_v) goto check_1; return _wrap_ofxTLVideoTrack_setPlayer__SWIG_0(L);}  check_1:
  if (argc == 2) { return _wrap_ofxTLVideoTrack_setPlayer__SWIG_1(L);} 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofxTLVideoTrack_setPlayer'\n"
  "  Possible C/C++ prototypes are:\n" "    ofxTLVideoTrack::setPlayer(ofVideoPlayer &)\n"
  "    ofxTLVideoTrack::setPlayer(ofPtr< ofVideoPlayer >)\n"); lua_error(L);return 0; }
static int _wrap_ofxTLVideoTrack_getPlayer(lua_State* L) { { int SWIG_arg = 0; ofxTLVideoTrack *arg1 = (ofxTLVideoTrack *) 0 ;
    ofPtr< ofVideoPlayer > result; SWIG_check_num_args("ofxTLVideoTrack::getPlayer",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLVideoTrack::getPlayer",1,"ofxTLVideoTrack *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLVideoTrack,0))){
      SWIG_fail_ptr("ofxTLVideoTrack_getPlayer",1,SWIGTYPE_p_ofxTLVideoTrack); }  result = (arg1)->getPlayer(); {
      ofPtr< ofVideoPlayer > * resultptr = new ofPtr< ofVideoPlayer >(result);
      SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofPtrT_ofVideoPlayer_t,1); SWIG_arg++; }  return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLVideoTrack_update(lua_State* L) { { int SWIG_arg = 0; ofxTLVideoTrack *arg1 = (ofxTLVideoTrack *) 0 ;
    SWIG_check_num_args("ofxTLVideoTrack::update",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLVideoTrack::update",1,"ofxTLVideoTrack *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLVideoTrack,0))){
      SWIG_fail_ptr("ofxTLVideoTrack_update",1,SWIGTYPE_p_ofxTLVideoTrack); }  (arg1)->update(); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLVideoTrack_mousePressed(lua_State* L) { { int SWIG_arg = 0;
    ofxTLVideoTrack *arg1 = (ofxTLVideoTrack *) 0 ; ofMouseEventArgs *arg2 = 0 ; long arg3 ; bool result;
    SWIG_check_num_args("ofxTLVideoTrack::mousePressed",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLVideoTrack::mousePressed",1,"ofxTLVideoTrack *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxTLVideoTrack::mousePressed",2,"ofMouseEventArgs &");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxTLVideoTrack::mousePressed",3,"long");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLVideoTrack,0))){
      SWIG_fail_ptr("ofxTLVideoTrack_mousePressed",1,SWIGTYPE_p_ofxTLVideoTrack); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofMouseEventArgs,0))){
      SWIG_fail_ptr("ofxTLVideoTrack_mousePressed",2,SWIGTYPE_p_ofMouseEventArgs); }  arg3 = (long)lua_tonumber(L, 3);
    result = (bool)(arg1)->mousePressed(*arg2,arg3); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLVideoTrack_mouseMoved(lua_State* L) { { int SWIG_arg = 0; ofxTLVideoTrack *arg1 = (ofxTLVideoTrack *) 0 ;
    ofMouseEventArgs *arg2 = 0 ; long arg3 ; SWIG_check_num_args("ofxTLVideoTrack::mouseMoved",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLVideoTrack::mouseMoved",1,"ofxTLVideoTrack *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxTLVideoTrack::mouseMoved",2,"ofMouseEventArgs &");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxTLVideoTrack::mouseMoved",3,"long");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLVideoTrack,0))){
      SWIG_fail_ptr("ofxTLVideoTrack_mouseMoved",1,SWIGTYPE_p_ofxTLVideoTrack); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofMouseEventArgs,0))){
      SWIG_fail_ptr("ofxTLVideoTrack_mouseMoved",2,SWIGTYPE_p_ofMouseEventArgs); }  arg3 = (long)lua_tonumber(L, 3);
    (arg1)->mouseMoved(*arg2,arg3); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLVideoTrack_mouseDragged(lua_State* L) { { int SWIG_arg = 0;
    ofxTLVideoTrack *arg1 = (ofxTLVideoTrack *) 0 ; ofMouseEventArgs *arg2 = 0 ; long arg3 ;
    SWIG_check_num_args("ofxTLVideoTrack::mouseDragged",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLVideoTrack::mouseDragged",1,"ofxTLVideoTrack *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxTLVideoTrack::mouseDragged",2,"ofMouseEventArgs &");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxTLVideoTrack::mouseDragged",3,"long");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLVideoTrack,0))){
      SWIG_fail_ptr("ofxTLVideoTrack_mouseDragged",1,SWIGTYPE_p_ofxTLVideoTrack); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofMouseEventArgs,0))){
      SWIG_fail_ptr("ofxTLVideoTrack_mouseDragged",2,SWIGTYPE_p_ofMouseEventArgs); }  arg3 = (long)lua_tonumber(L, 3);
    (arg1)->mouseDragged(*arg2,arg3); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLVideoTrack_keyPressed(lua_State* L) { { int SWIG_arg = 0; ofxTLVideoTrack *arg1 = (ofxTLVideoTrack *) 0 ;
    ofKeyEventArgs *arg2 = 0 ; SWIG_check_num_args("ofxTLVideoTrack::keyPressed",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLVideoTrack::keyPressed",1,"ofxTLVideoTrack *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxTLVideoTrack::keyPressed",2,"ofKeyEventArgs &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLVideoTrack,0))){
      SWIG_fail_ptr("ofxTLVideoTrack_keyPressed",1,SWIGTYPE_p_ofxTLVideoTrack); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofKeyEventArgs,0))){
      SWIG_fail_ptr("ofxTLVideoTrack_keyPressed",2,SWIGTYPE_p_ofKeyEventArgs); }  (arg1)->keyPressed(*arg2); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLVideoTrack_playbackStarted(lua_State* L) { { int SWIG_arg = 0;
    ofxTLVideoTrack *arg1 = (ofxTLVideoTrack *) 0 ; ofxTLPlaybackEventArgs *arg2 = 0 ;
    SWIG_check_num_args("ofxTLVideoTrack::playbackStarted",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLVideoTrack::playbackStarted",1,"ofxTLVideoTrack *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxTLVideoTrack::playbackStarted",2,"ofxTLPlaybackEventArgs &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLVideoTrack,0))){
      SWIG_fail_ptr("ofxTLVideoTrack_playbackStarted",1,SWIGTYPE_p_ofxTLVideoTrack); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofxTLPlaybackEventArgs,0))){
      SWIG_fail_ptr("ofxTLVideoTrack_playbackStarted",2,SWIGTYPE_p_ofxTLPlaybackEventArgs); }  (arg1)->playbackStarted(*arg2);
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLVideoTrack_playbackLooped(lua_State* L) { { int SWIG_arg = 0;
    ofxTLVideoTrack *arg1 = (ofxTLVideoTrack *) 0 ; ofxTLPlaybackEventArgs *arg2 = 0 ;
    SWIG_check_num_args("ofxTLVideoTrack::playbackLooped",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLVideoTrack::playbackLooped",1,"ofxTLVideoTrack *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxTLVideoTrack::playbackLooped",2,"ofxTLPlaybackEventArgs &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLVideoTrack,0))){
      SWIG_fail_ptr("ofxTLVideoTrack_playbackLooped",1,SWIGTYPE_p_ofxTLVideoTrack); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofxTLPlaybackEventArgs,0))){
      SWIG_fail_ptr("ofxTLVideoTrack_playbackLooped",2,SWIGTYPE_p_ofxTLPlaybackEventArgs); }  (arg1)->playbackLooped(*arg2);
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLVideoTrack_playbackEnded(lua_State* L) { { int SWIG_arg = 0;
    ofxTLVideoTrack *arg1 = (ofxTLVideoTrack *) 0 ; ofxTLPlaybackEventArgs *arg2 = 0 ;
    SWIG_check_num_args("ofxTLVideoTrack::playbackEnded",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLVideoTrack::playbackEnded",1,"ofxTLVideoTrack *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxTLVideoTrack::playbackEnded",2,"ofxTLPlaybackEventArgs &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLVideoTrack,0))){
      SWIG_fail_ptr("ofxTLVideoTrack_playbackEnded",1,SWIGTYPE_p_ofxTLVideoTrack); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofxTLPlaybackEventArgs,0))){
      SWIG_fail_ptr("ofxTLVideoTrack_playbackEnded",2,SWIGTYPE_p_ofxTLPlaybackEventArgs); }  (arg1)->playbackEnded(*arg2);
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLVideoTrack_getSelectedFrame(lua_State* L) { { int SWIG_arg = 0;
    ofxTLVideoTrack *arg1 = (ofxTLVideoTrack *) 0 ; int result; SWIG_check_num_args("ofxTLVideoTrack::getSelectedFrame",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLVideoTrack::getSelectedFrame",1,"ofxTLVideoTrack *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLVideoTrack,0))){
      SWIG_fail_ptr("ofxTLVideoTrack_getSelectedFrame",1,SWIGTYPE_p_ofxTLVideoTrack); } 
    result = (int)(arg1)->getSelectedFrame(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLVideoTrack_getCurrentFrame(lua_State* L) { { int SWIG_arg = 0;
    ofxTLVideoTrack *arg1 = (ofxTLVideoTrack *) 0 ; int result; SWIG_check_num_args("ofxTLVideoTrack::getCurrentFrame",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLVideoTrack::getCurrentFrame",1,"ofxTLVideoTrack *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLVideoTrack,0))){
      SWIG_fail_ptr("ofxTLVideoTrack_getCurrentFrame",1,SWIGTYPE_p_ofxTLVideoTrack); }  result = (int)(arg1)->getCurrentFrame();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLVideoTrack_getCurrentTime(lua_State* L) { { int SWIG_arg = 0;
    ofxTLVideoTrack *arg1 = (ofxTLVideoTrack *) 0 ; float result; SWIG_check_num_args("ofxTLVideoTrack::getCurrentTime",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLVideoTrack::getCurrentTime",1,"ofxTLVideoTrack *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLVideoTrack,0))){
      SWIG_fail_ptr("ofxTLVideoTrack_getCurrentTime",1,SWIGTYPE_p_ofxTLVideoTrack); }  result = (float)(arg1)->getCurrentTime();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLVideoTrack_getDuration(lua_State* L) { { int SWIG_arg = 0; ofxTLVideoTrack *arg1 = (ofxTLVideoTrack *) 0 ;
    float result; SWIG_check_num_args("ofxTLVideoTrack::getDuration",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLVideoTrack::getDuration",1,"ofxTLVideoTrack *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLVideoTrack,0))){
      SWIG_fail_ptr("ofxTLVideoTrack_getDuration",1,SWIGTYPE_p_ofxTLVideoTrack); }  result = (float)(arg1)->getDuration();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLVideoTrack_setDrawVideoPreview(lua_State* L) { { int SWIG_arg = 0;
    ofxTLVideoTrack *arg1 = (ofxTLVideoTrack *) 0 ; bool arg2 ; SWIG_check_num_args("ofxTLVideoTrack::setDrawVideoPreview",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLVideoTrack::setDrawVideoPreview",1,"ofxTLVideoTrack *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ofxTLVideoTrack::setDrawVideoPreview",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLVideoTrack,0))){
      SWIG_fail_ptr("ofxTLVideoTrack_setDrawVideoPreview",1,SWIGTYPE_p_ofxTLVideoTrack); }  arg2 = (lua_toboolean(L, 2)!=0);
    (arg1)->setDrawVideoPreview(arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLVideoTrack_getDrawVideoPreview(lua_State* L) { { int SWIG_arg = 0;
    ofxTLVideoTrack *arg1 = (ofxTLVideoTrack *) 0 ; bool result; SWIG_check_num_args("ofxTLVideoTrack::getDrawVideoPreview",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLVideoTrack::getDrawVideoPreview",1,"ofxTLVideoTrack *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLVideoTrack,0))){
      SWIG_fail_ptr("ofxTLVideoTrack_getDrawVideoPreview",1,SWIGTYPE_p_ofxTLVideoTrack); } 
    result = (bool)(arg1)->getDrawVideoPreview(); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLVideoTrack_isLoaded(lua_State* L) { { int SWIG_arg = 0; ofxTLVideoTrack *arg1 = (ofxTLVideoTrack *) 0 ;
    bool result; SWIG_check_num_args("ofxTLVideoTrack::isLoaded",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLVideoTrack::isLoaded",1,"ofxTLVideoTrack *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLVideoTrack,0))){
      SWIG_fail_ptr("ofxTLVideoTrack_isLoaded",1,SWIGTYPE_p_ofxTLVideoTrack); }  result = (bool)(arg1)->isLoaded();
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLVideoTrack_selectFrame(lua_State* L) { { int SWIG_arg = 0; ofxTLVideoTrack *arg1 = (ofxTLVideoTrack *) 0 ;
    int arg2 ; int result; SWIG_check_num_args("ofxTLVideoTrack::selectFrame",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLVideoTrack::selectFrame",1,"ofxTLVideoTrack *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxTLVideoTrack::selectFrame",2,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLVideoTrack,0))){
      SWIG_fail_ptr("ofxTLVideoTrack_selectFrame",1,SWIGTYPE_p_ofxTLVideoTrack); }  arg2 = (int)lua_tonumber(L, 2);
    result = (int)(arg1)->selectFrame(arg2); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLVideoTrack_toggleThumbs(lua_State* L) { { int SWIG_arg = 0;
    ofxTLVideoTrack *arg1 = (ofxTLVideoTrack *) 0 ; SWIG_check_num_args("ofxTLVideoTrack::toggleThumbs",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLVideoTrack::toggleThumbs",1,"ofxTLVideoTrack *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLVideoTrack,0))){
      SWIG_fail_ptr("ofxTLVideoTrack_toggleThumbs",1,SWIGTYPE_p_ofxTLVideoTrack); }  (arg1)->toggleThumbs(); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLVideoTrack_setInFrame(lua_State* L) { { int SWIG_arg = 0; ofxTLVideoTrack *arg1 = (ofxTLVideoTrack *) 0 ;
    int arg2 ; SWIG_check_num_args("ofxTLVideoTrack::setInFrame",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLVideoTrack::setInFrame",1,"ofxTLVideoTrack *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxTLVideoTrack::setInFrame",2,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLVideoTrack,0))){
      SWIG_fail_ptr("ofxTLVideoTrack_setInFrame",1,SWIGTYPE_p_ofxTLVideoTrack); }  arg2 = (int)lua_tonumber(L, 2);
    (arg1)->setInFrame(arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLVideoTrack_setOutFrame(lua_State* L) { { int SWIG_arg = 0; ofxTLVideoTrack *arg1 = (ofxTLVideoTrack *) 0 ;
    int arg2 ; SWIG_check_num_args("ofxTLVideoTrack::setOutFrame",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLVideoTrack::setOutFrame",1,"ofxTLVideoTrack *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxTLVideoTrack::setOutFrame",2,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLVideoTrack,0))){
      SWIG_fail_ptr("ofxTLVideoTrack_setOutFrame",1,SWIGTYPE_p_ofxTLVideoTrack); }  arg2 = (int)lua_tonumber(L, 2);
    (arg1)->setOutFrame(arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLVideoTrack_togglePlay(lua_State* L) { { int SWIG_arg = 0; ofxTLVideoTrack *arg1 = (ofxTLVideoTrack *) 0 ;
    bool result; SWIG_check_num_args("ofxTLVideoTrack::togglePlay",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLVideoTrack::togglePlay",1,"ofxTLVideoTrack *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLVideoTrack,0))){
      SWIG_fail_ptr("ofxTLVideoTrack_togglePlay",1,SWIGTYPE_p_ofxTLVideoTrack); }  result = (bool)(arg1)->togglePlay();
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLVideoTrack_play(lua_State* L) { { int SWIG_arg = 0; ofxTLVideoTrack *arg1 = (ofxTLVideoTrack *) 0 ;
    SWIG_check_num_args("ofxTLVideoTrack::play",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLVideoTrack::play",1,"ofxTLVideoTrack *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLVideoTrack,0))){
      SWIG_fail_ptr("ofxTLVideoTrack_play",1,SWIGTYPE_p_ofxTLVideoTrack); }  (arg1)->play(); return SWIG_arg; fail: SWIGUNUSED; }
   lua_error(L); return 0; }
static int _wrap_ofxTLVideoTrack_stop(lua_State* L) { { int SWIG_arg = 0; ofxTLVideoTrack *arg1 = (ofxTLVideoTrack *) 0 ;
    SWIG_check_num_args("ofxTLVideoTrack::stop",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLVideoTrack::stop",1,"ofxTLVideoTrack *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLVideoTrack,0))){
      SWIG_fail_ptr("ofxTLVideoTrack_stop",1,SWIGTYPE_p_ofxTLVideoTrack); }  (arg1)->stop(); return SWIG_arg; fail: SWIGUNUSED; }
   lua_error(L); return 0; }
static int _wrap_ofxTLVideoTrack_getIsPlaying(lua_State* L) { { int SWIG_arg = 0;
    ofxTLVideoTrack *arg1 = (ofxTLVideoTrack *) 0 ; bool result; SWIG_check_num_args("ofxTLVideoTrack::getIsPlaying",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLVideoTrack::getIsPlaying",1,"ofxTLVideoTrack *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLVideoTrack,0))){
      SWIG_fail_ptr("ofxTLVideoTrack_getIsPlaying",1,SWIGTYPE_p_ofxTLVideoTrack); }  result = (bool)(arg1)->getIsPlaying();
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLVideoTrack_setPlayAlongToTimeline(lua_State* L) { { int SWIG_arg = 0;
    ofxTLVideoTrack *arg1 = (ofxTLVideoTrack *) 0 ; bool arg2 ;
    SWIG_check_num_args("ofxTLVideoTrack::setPlayAlongToTimeline",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLVideoTrack::setPlayAlongToTimeline",1,"ofxTLVideoTrack *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ofxTLVideoTrack::setPlayAlongToTimeline",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLVideoTrack,0))){
      SWIG_fail_ptr("ofxTLVideoTrack_setPlayAlongToTimeline",1,SWIGTYPE_p_ofxTLVideoTrack); }  arg2 = (lua_toboolean(L, 2)!=0);
    (arg1)->setPlayAlongToTimeline(arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLVideoTrack_getPlayAlongToTimeline(lua_State* L) { { int SWIG_arg = 0;
    ofxTLVideoTrack *arg1 = (ofxTLVideoTrack *) 0 ; bool result;
    SWIG_check_num_args("ofxTLVideoTrack::getPlayAlongToTimeline",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLVideoTrack::getPlayAlongToTimeline",1,"ofxTLVideoTrack *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLVideoTrack,0))){
      SWIG_fail_ptr("ofxTLVideoTrack_getPlayAlongToTimeline",1,SWIGTYPE_p_ofxTLVideoTrack); } 
    result = (bool)(arg1)->getPlayAlongToTimeline(); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLVideoTrack_getTrackType(lua_State* L) { { int SWIG_arg = 0;
    ofxTLVideoTrack *arg1 = (ofxTLVideoTrack *) 0 ; string result; SWIG_check_num_args("ofxTLVideoTrack::getTrackType",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLVideoTrack::getTrackType",1,"ofxTLVideoTrack *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLVideoTrack,0))){
      SWIG_fail_ptr("ofxTLVideoTrack_getTrackType",1,SWIGTYPE_p_ofxTLVideoTrack); }  result = (arg1)->getTrackType();
    lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ofxTLVideoTrack_getTrack(lua_State* L) { { int SWIG_arg = 0; ofxTLVideoTrack *arg1 = (ofxTLVideoTrack *) 0 ;
    ofxTLTrack *result = 0 ; SWIG_check_num_args("ofxTLVideoTrack::getTrack",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLVideoTrack::getTrack",1,"ofxTLVideoTrack *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLVideoTrack,0))){
      SWIG_fail_ptr("ofxTLVideoTrack_getTrack",1,SWIGTYPE_p_ofxTLVideoTrack); } 
    result = (ofxTLTrack *)ofxTLVideoTrack_getTrack(arg1); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxTLTrack,0); SWIG_arg++; 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static void swig_delete_ofxTLVideoTrack(void *obj) {
ofxTLVideoTrack *arg1 = (ofxTLVideoTrack *) obj;
delete arg1;
}
static int _proxy__wrap_new_ofxTLVideoTrack(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ofxTLVideoTrack);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ofxTLVideoTrack_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ofxTLVideoTrack_methods[]= {
    { "setup", _wrap_ofxTLVideoTrack_setup},
    { "draw", _wrap_ofxTLVideoTrack_draw},
    { "enable", _wrap_ofxTLVideoTrack_enable},
    { "disable", _wrap_ofxTLVideoTrack_disable},
    { "load", _wrap_ofxTLVideoTrack_load},
    { "setPlayer", _wrap_ofxTLVideoTrack_setPlayer},
    { "getPlayer", _wrap_ofxTLVideoTrack_getPlayer},
    { "update", _wrap_ofxTLVideoTrack_update},
    { "mousePressed", _wrap_ofxTLVideoTrack_mousePressed},
    { "mouseMoved", _wrap_ofxTLVideoTrack_mouseMoved},
    { "mouseDragged", _wrap_ofxTLVideoTrack_mouseDragged},
    { "keyPressed", _wrap_ofxTLVideoTrack_keyPressed},
    { "playbackStarted", _wrap_ofxTLVideoTrack_playbackStarted},
    { "playbackLooped", _wrap_ofxTLVideoTrack_playbackLooped},
    { "playbackEnded", _wrap_ofxTLVideoTrack_playbackEnded},
    { "getSelectedFrame", _wrap_ofxTLVideoTrack_getSelectedFrame},
    { "getCurrentFrame", _wrap_ofxTLVideoTrack_getCurrentFrame},
    { "getCurrentTime", _wrap_ofxTLVideoTrack_getCurrentTime},
    { "getDuration", _wrap_ofxTLVideoTrack_getDuration},
    { "setDrawVideoPreview", _wrap_ofxTLVideoTrack_setDrawVideoPreview},
    { "getDrawVideoPreview", _wrap_ofxTLVideoTrack_getDrawVideoPreview},
    { "isLoaded", _wrap_ofxTLVideoTrack_isLoaded},
    { "selectFrame", _wrap_ofxTLVideoTrack_selectFrame},
    { "toggleThumbs", _wrap_ofxTLVideoTrack_toggleThumbs},
    { "setInFrame", _wrap_ofxTLVideoTrack_setInFrame},
    { "setOutFrame", _wrap_ofxTLVideoTrack_setOutFrame},
    { "togglePlay", _wrap_ofxTLVideoTrack_togglePlay},
    { "play", _wrap_ofxTLVideoTrack_play},
    { "stop", _wrap_ofxTLVideoTrack_stop},
    { "getIsPlaying", _wrap_ofxTLVideoTrack_getIsPlaying},
    { "setPlayAlongToTimeline", _wrap_ofxTLVideoTrack_setPlayAlongToTimeline},
    { "getPlayAlongToTimeline", _wrap_ofxTLVideoTrack_getPlayAlongToTimeline},
    { "getTrackType", _wrap_ofxTLVideoTrack_getTrackType},
    { "getTrack", _wrap_ofxTLVideoTrack_getTrack},
    {0,0}
};
static swig_lua_method swig_ofxTLVideoTrack_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ofxTLVideoTrack_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ofxTLVideoTrack_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ofxTLVideoTrack_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ofxTLVideoTrack_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ofxTLVideoTrack_Sf_SwigStatic = {
    "ofxTLVideoTrack",
    swig_ofxTLVideoTrack_Sf_SwigStatic_methods,
    swig_ofxTLVideoTrack_Sf_SwigStatic_attributes,
    swig_ofxTLVideoTrack_Sf_SwigStatic_constants,
    swig_ofxTLVideoTrack_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ofxTLVideoTrack_bases[] = {0};
static const char *swig_ofxTLVideoTrack_base_names[] = {0};
static swig_lua_class _wrap_class_ofxTLVideoTrack = { "ofxTLVideoTrack", "ofxTLVideoTrack", &SWIGTYPE_p_ofxTLVideoTrack,_proxy__wrap_new_ofxTLVideoTrack, swig_delete_ofxTLVideoTrack, swig_ofxTLVideoTrack_methods, swig_ofxTLVideoTrack_attributes, &swig_ofxTLVideoTrack_Sf_SwigStatic, swig_ofxTLVideoTrack_meta, swig_ofxTLVideoTrack_bases, swig_ofxTLVideoTrack_base_names };

static int _wrap_glTypeForImageType(lua_State* L) { { int SWIG_arg = 0; int arg1 ; GLint result;
    SWIG_check_num_args("glTypeForImageType",1,1) if(!lua_isnumber(L,1)) SWIG_fail_arg("glTypeForImageType",1,"int");
    arg1 = (int)lua_tonumber(L, 1); result = glTypeForImageType(arg1); { GLint * resultptr = new GLint(result);
      SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_GLint,1); SWIG_arg++; }  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_PreviewTexture_texture_set(lua_State* L) { { int SWIG_arg = 0; PreviewTexture *arg1 = (PreviewTexture *) 0 ;
    ofTexture *arg2 = (ofTexture *) 0 ; SWIG_check_num_args("PreviewTexture::texture",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PreviewTexture::texture",1,"PreviewTexture *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("PreviewTexture::texture",2,"ofTexture *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PreviewTexture,0))){
      SWIG_fail_ptr("PreviewTexture_texture_set",1,SWIGTYPE_p_PreviewTexture); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofTexture,SWIG_POINTER_DISOWN))){
      SWIG_fail_ptr("PreviewTexture_texture_set",2,SWIGTYPE_p_ofTexture); }  if (arg1) (arg1)->texture = arg2; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_PreviewTexture_texture_get(lua_State* L) { { int SWIG_arg = 0; PreviewTexture *arg1 = (PreviewTexture *) 0 ;
    ofTexture *result = 0 ; SWIG_check_num_args("PreviewTexture::texture",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PreviewTexture::texture",1,"PreviewTexture *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PreviewTexture,0))){
      SWIG_fail_ptr("PreviewTexture_texture_get",1,SWIGTYPE_p_PreviewTexture); }  result = (ofTexture *) ((arg1)->texture);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofTexture,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_PreviewTexture_bounds_set(lua_State* L) { { int SWIG_arg = 0; PreviewTexture *arg1 = (PreviewTexture *) 0 ;
    ofRectangle arg2 ; ofRectangle *argp2 ; SWIG_check_num_args("PreviewTexture::bounds",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PreviewTexture::bounds",1,"PreviewTexture *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("PreviewTexture::bounds",2,"ofRectangle");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PreviewTexture,0))){
      SWIG_fail_ptr("PreviewTexture_bounds_set",1,SWIGTYPE_p_PreviewTexture); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ofRectangle,0))){
      SWIG_fail_ptr("PreviewTexture_bounds_set",2,SWIGTYPE_p_ofRectangle); }  arg2 = *argp2; if (arg1) (arg1)->bounds = arg2;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_PreviewTexture_bounds_get(lua_State* L) { { int SWIG_arg = 0; PreviewTexture *arg1 = (PreviewTexture *) 0 ;
    ofRectangle result; SWIG_check_num_args("PreviewTexture::bounds",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PreviewTexture::bounds",1,"PreviewTexture *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PreviewTexture,0))){
      SWIG_fail_ptr("PreviewTexture_bounds_get",1,SWIGTYPE_p_PreviewTexture); }  result =  ((arg1)->bounds); {
      ofRectangle * resultptr = new ofRectangle(result);
      SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofRectangle,1); SWIG_arg++; }  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_PreviewTexture_frameIndex_set(lua_State* L) { { int SWIG_arg = 0; PreviewTexture *arg1 = (PreviewTexture *) 0 ;
    int arg2 ; SWIG_check_num_args("PreviewTexture::frameIndex",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PreviewTexture::frameIndex",1,"PreviewTexture *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("PreviewTexture::frameIndex",2,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PreviewTexture,0))){
      SWIG_fail_ptr("PreviewTexture_frameIndex_set",1,SWIGTYPE_p_PreviewTexture); }  arg2 = (int)lua_tonumber(L, 2);
    if (arg1) (arg1)->frameIndex = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_PreviewTexture_frameIndex_get(lua_State* L) { { int SWIG_arg = 0; PreviewTexture *arg1 = (PreviewTexture *) 0 ;
    int result; SWIG_check_num_args("PreviewTexture::frameIndex",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PreviewTexture::frameIndex",1,"PreviewTexture *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PreviewTexture,0))){
      SWIG_fail_ptr("PreviewTexture_frameIndex_get",1,SWIGTYPE_p_PreviewTexture); }  result = (int) ((arg1)->frameIndex);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_new_PreviewTexture(lua_State* L) { { int SWIG_arg = 0; PreviewTexture *result = 0 ;
    SWIG_check_num_args("PreviewTexture::PreviewTexture",0,0) result = (PreviewTexture *)new PreviewTexture();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_PreviewTexture,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static void swig_delete_PreviewTexture(void *obj) {
PreviewTexture *arg1 = (PreviewTexture *) obj;
delete arg1;
}
static int _proxy__wrap_new_PreviewTexture(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_PreviewTexture);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_PreviewTexture_attributes[] = {
    { "texture", _wrap_PreviewTexture_texture_get, _wrap_PreviewTexture_texture_set },
    { "bounds", _wrap_PreviewTexture_bounds_get, _wrap_PreviewTexture_bounds_set },
    { "frameIndex", _wrap_PreviewTexture_frameIndex_get, _wrap_PreviewTexture_frameIndex_set },
    {0,0,0}
};
static swig_lua_method swig_PreviewTexture_methods[]= {
    {0,0}
};
static swig_lua_method swig_PreviewTexture_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_PreviewTexture_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_PreviewTexture_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_PreviewTexture_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_PreviewTexture_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_PreviewTexture_Sf_SwigStatic = {
    "PreviewTexture",
    swig_PreviewTexture_Sf_SwigStatic_methods,
    swig_PreviewTexture_Sf_SwigStatic_attributes,
    swig_PreviewTexture_Sf_SwigStatic_constants,
    swig_PreviewTexture_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_PreviewTexture_bases[] = {0};
static const char *swig_PreviewTexture_base_names[] = {0};
static swig_lua_class _wrap_class_PreviewTexture = { "PreviewTexture", "PreviewTexture", &SWIGTYPE_p_PreviewTexture,_proxy__wrap_new_PreviewTexture, swig_delete_PreviewTexture, swig_PreviewTexture_methods, swig_PreviewTexture_attributes, &swig_PreviewTexture_Sf_SwigStatic, swig_PreviewTexture_meta, swig_PreviewTexture_bases, swig_PreviewTexture_base_names };

static int _wrap_new_ofxTLImageSequence(lua_State* L) { { int SWIG_arg = 0; ofxTLImageSequence *result = 0 ;
    SWIG_check_num_args("ofxTLImageSequence::ofxTLImageSequence",0,0) result = (ofxTLImageSequence *)new ofxTLImageSequence();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxTLImageSequence,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ofxTLImageSequence_loadSequence(lua_State* L) { { int SWIG_arg = 0;
    ofxTLImageSequence *arg1 = (ofxTLImageSequence *) 0 ; string arg2 ; bool result;
    SWIG_check_num_args("ofxTLImageSequence::loadSequence",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLImageSequence::loadSequence",1,"ofxTLImageSequence *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxTLImageSequence::loadSequence",2,"string");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLImageSequence,0))){
      SWIG_fail_ptr("ofxTLImageSequence_loadSequence",1,SWIGTYPE_p_ofxTLImageSequence); } 
    (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2)); result = (bool)(arg1)->loadSequence(arg2);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLImageSequence_getImageWidth(lua_State* L) { { int SWIG_arg = 0;
    ofxTLImageSequence *arg1 = (ofxTLImageSequence *) 0 ; float result;
    SWIG_check_num_args("ofxTLImageSequence::getImageWidth",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLImageSequence::getImageWidth",1,"ofxTLImageSequence *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLImageSequence,0))){
      SWIG_fail_ptr("ofxTLImageSequence_getImageWidth",1,SWIGTYPE_p_ofxTLImageSequence); } 
    result = (float)(arg1)->getImageWidth(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLImageSequence_getImageHeight(lua_State* L) { { int SWIG_arg = 0;
    ofxTLImageSequence *arg1 = (ofxTLImageSequence *) 0 ; float result;
    SWIG_check_num_args("ofxTLImageSequence::getImageHeight",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLImageSequence::getImageHeight",1,"ofxTLImageSequence *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLImageSequence,0))){
      SWIG_fail_ptr("ofxTLImageSequence_getImageHeight",1,SWIGTYPE_p_ofxTLImageSequence); } 
    result = (float)(arg1)->getImageHeight(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLImageSequence_getThumbWidth(lua_State* L) { { int SWIG_arg = 0;
    ofxTLImageSequence *arg1 = (ofxTLImageSequence *) 0 ; float result;
    SWIG_check_num_args("ofxTLImageSequence::getThumbWidth",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLImageSequence::getThumbWidth",1,"ofxTLImageSequence *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLImageSequence,0))){
      SWIG_fail_ptr("ofxTLImageSequence_getThumbWidth",1,SWIGTYPE_p_ofxTLImageSequence); } 
    result = (float)(arg1)->getThumbWidth(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLImageSequence_getThumbHeight(lua_State* L) { { int SWIG_arg = 0;
    ofxTLImageSequence *arg1 = (ofxTLImageSequence *) 0 ; float result;
    SWIG_check_num_args("ofxTLImageSequence::getThumbHeight",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLImageSequence::getThumbHeight",1,"ofxTLImageSequence *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLImageSequence,0))){
      SWIG_fail_ptr("ofxTLImageSequence_getThumbHeight",1,SWIGTYPE_p_ofxTLImageSequence); } 
    result = (float)(arg1)->getThumbHeight(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLImageSequence_previewTextures_set(lua_State* L) { { int SWIG_arg = 0;
    ofxTLImageSequence *arg1 = (ofxTLImageSequence *) 0 ; vector< PreviewTexture > *arg2 = (vector< PreviewTexture > *) 0 ;
    SWIG_check_num_args("ofxTLImageSequence::previewTextures",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLImageSequence::previewTextures",1,"ofxTLImageSequence *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofxTLImageSequence::previewTextures",2,"vector< PreviewTexture > *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLImageSequence,0))){
      SWIG_fail_ptr("ofxTLImageSequence_previewTextures_set",1,SWIGTYPE_p_ofxTLImageSequence); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_vectorT_PreviewTexture_t,0))){
      SWIG_fail_ptr("ofxTLImageSequence_previewTextures_set",2,SWIGTYPE_p_vectorT_PreviewTexture_t); } 
    if (arg1) (arg1)->previewTextures = *arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLImageSequence_previewTextures_get(lua_State* L) { { int SWIG_arg = 0;
    ofxTLImageSequence *arg1 = (ofxTLImageSequence *) 0 ; vector< PreviewTexture > *result = 0 ;
    SWIG_check_num_args("ofxTLImageSequence::previewTextures",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLImageSequence::previewTextures",1,"ofxTLImageSequence *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLImageSequence,0))){
      SWIG_fail_ptr("ofxTLImageSequence_previewTextures_get",1,SWIGTYPE_p_ofxTLImageSequence); } 
    result = (vector< PreviewTexture > *)& ((arg1)->previewTextures);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_vectorT_PreviewTexture_t,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ofxTLImageSequence_getImageAtTime(lua_State* L) { { int SWIG_arg = 0;
    ofxTLImageSequence *arg1 = (ofxTLImageSequence *) 0 ; float arg2 ; ofImage *result = 0 ;
    SWIG_check_num_args("ofxTLImageSequence::getImageAtTime",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLImageSequence::getImageAtTime",1,"ofxTLImageSequence *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxTLImageSequence::getImageAtTime",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLImageSequence,0))){
      SWIG_fail_ptr("ofxTLImageSequence_getImageAtTime",1,SWIGTYPE_p_ofxTLImageSequence); }  arg2 = (float)lua_tonumber(L, 2);
    result = (ofImage *)(arg1)->getImageAtTime(arg2); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofImage,0); SWIG_arg++; 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLImageSequence_getImageAtFrame(lua_State* L) { { int SWIG_arg = 0;
    ofxTLImageSequence *arg1 = (ofxTLImageSequence *) 0 ; int arg2 ; ofImage *result = 0 ;
    SWIG_check_num_args("ofxTLImageSequence::getImageAtFrame",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLImageSequence::getImageAtFrame",1,"ofxTLImageSequence *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxTLImageSequence::getImageAtFrame",2,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLImageSequence,0))){
      SWIG_fail_ptr("ofxTLImageSequence_getImageAtFrame",1,SWIGTYPE_p_ofxTLImageSequence); }  arg2 = (int)lua_tonumber(L, 2);
    result = (ofImage *)(arg1)->getImageAtFrame(arg2); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofImage,0); SWIG_arg++; 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLImageSequence_mousePressed(lua_State* L) { { int SWIG_arg = 0;
    ofxTLImageSequence *arg1 = (ofxTLImageSequence *) 0 ; ofMouseEventArgs *arg2 = 0 ;
    SWIG_check_num_args("ofxTLImageSequence::mousePressed",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLImageSequence::mousePressed",1,"ofxTLImageSequence *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxTLImageSequence::mousePressed",2,"ofMouseEventArgs &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLImageSequence,0))){
      SWIG_fail_ptr("ofxTLImageSequence_mousePressed",1,SWIGTYPE_p_ofxTLImageSequence); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofMouseEventArgs,0))){
      SWIG_fail_ptr("ofxTLImageSequence_mousePressed",2,SWIGTYPE_p_ofMouseEventArgs); }  (arg1)->mousePressed(*arg2);
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLImageSequence_mouseMoved(lua_State* L) { { int SWIG_arg = 0;
    ofxTLImageSequence *arg1 = (ofxTLImageSequence *) 0 ; ofMouseEventArgs *arg2 = 0 ;
    SWIG_check_num_args("ofxTLImageSequence::mouseMoved",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLImageSequence::mouseMoved",1,"ofxTLImageSequence *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxTLImageSequence::mouseMoved",2,"ofMouseEventArgs &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLImageSequence,0))){
      SWIG_fail_ptr("ofxTLImageSequence_mouseMoved",1,SWIGTYPE_p_ofxTLImageSequence); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofMouseEventArgs,0))){
      SWIG_fail_ptr("ofxTLImageSequence_mouseMoved",2,SWIGTYPE_p_ofMouseEventArgs); }  (arg1)->mouseMoved(*arg2);
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLImageSequence_mouseDragged(lua_State* L) { { int SWIG_arg = 0;
    ofxTLImageSequence *arg1 = (ofxTLImageSequence *) 0 ; ofMouseEventArgs *arg2 = 0 ; bool arg3 ;
    SWIG_check_num_args("ofxTLImageSequence::mouseDragged",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLImageSequence::mouseDragged",1,"ofxTLImageSequence *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxTLImageSequence::mouseDragged",2,"ofMouseEventArgs &");
    if(!lua_isboolean(L,3)) SWIG_fail_arg("ofxTLImageSequence::mouseDragged",3,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLImageSequence,0))){
      SWIG_fail_ptr("ofxTLImageSequence_mouseDragged",1,SWIGTYPE_p_ofxTLImageSequence); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofMouseEventArgs,0))){
      SWIG_fail_ptr("ofxTLImageSequence_mouseDragged",2,SWIGTYPE_p_ofMouseEventArgs); }  arg3 = (lua_toboolean(L, 3)!=0);
    (arg1)->mouseDragged(*arg2,arg3); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLImageSequence_mouseReleased(lua_State* L) { { int SWIG_arg = 0;
    ofxTLImageSequence *arg1 = (ofxTLImageSequence *) 0 ; ofMouseEventArgs *arg2 = 0 ;
    SWIG_check_num_args("ofxTLImageSequence::mouseReleased",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLImageSequence::mouseReleased",1,"ofxTLImageSequence *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxTLImageSequence::mouseReleased",2,"ofMouseEventArgs &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLImageSequence,0))){
      SWIG_fail_ptr("ofxTLImageSequence_mouseReleased",1,SWIGTYPE_p_ofxTLImageSequence); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofMouseEventArgs,0))){
      SWIG_fail_ptr("ofxTLImageSequence_mouseReleased",2,SWIGTYPE_p_ofMouseEventArgs); }  (arg1)->mouseReleased(*arg2);
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLImageSequence_reset(lua_State* L) { { int SWIG_arg = 0;
    ofxTLImageSequence *arg1 = (ofxTLImageSequence *) 0 ; SWIG_check_num_args("ofxTLImageSequence::reset",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLImageSequence::reset",1,"ofxTLImageSequence *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLImageSequence,0))){
      SWIG_fail_ptr("ofxTLImageSequence_reset",1,SWIGTYPE_p_ofxTLImageSequence); }  (arg1)->reset(); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLImageSequence_drawRectChanged(lua_State* L) { { int SWIG_arg = 0;
    ofxTLImageSequence *arg1 = (ofxTLImageSequence *) 0 ; SWIG_check_num_args("ofxTLImageSequence::drawRectChanged",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLImageSequence::drawRectChanged",1,"ofxTLImageSequence *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLImageSequence,0))){
      SWIG_fail_ptr("ofxTLImageSequence_drawRectChanged",1,SWIGTYPE_p_ofxTLImageSequence); }  (arg1)->drawRectChanged();
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLImageSequence_setZoomBounds(lua_State* L) { { int SWIG_arg = 0;
    ofxTLImageSequence *arg1 = (ofxTLImageSequence *) 0 ; ofRange arg2 ; ofRange *argp2 ;
    SWIG_check_num_args("ofxTLImageSequence::setZoomBounds",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLImageSequence::setZoomBounds",1,"ofxTLImageSequence *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxTLImageSequence::setZoomBounds",2,"ofRange");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLImageSequence,0))){
      SWIG_fail_ptr("ofxTLImageSequence_setZoomBounds",1,SWIGTYPE_p_ofxTLImageSequence); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ofRange,0))){
      SWIG_fail_ptr("ofxTLImageSequence_setZoomBounds",2,SWIGTYPE_p_ofRange); }  arg2 = *argp2; (arg1)->setZoomBounds(arg2);
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLImageSequence_purgeFrames(lua_State* L) { { int SWIG_arg = 0;
    ofxTLImageSequence *arg1 = (ofxTLImageSequence *) 0 ; SWIG_check_num_args("ofxTLImageSequence::purgeFrames",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLImageSequence::purgeFrames",1,"ofxTLImageSequence *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLImageSequence,0))){
      SWIG_fail_ptr("ofxTLImageSequence_purgeFrames",1,SWIGTYPE_p_ofxTLImageSequence); }  (arg1)->purgeFrames();
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLImageSequence_getTrack(lua_State* L) { { int SWIG_arg = 0;
    ofxTLImageSequence *arg1 = (ofxTLImageSequence *) 0 ; ofxTLTrack *result = 0 ;
    SWIG_check_num_args("ofxTLImageSequence::getTrack",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLImageSequence::getTrack",1,"ofxTLImageSequence *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLImageSequence,0))){
      SWIG_fail_ptr("ofxTLImageSequence_getTrack",1,SWIGTYPE_p_ofxTLImageSequence); } 
    result = (ofxTLTrack *)ofxTLImageSequence_getTrack(arg1); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxTLTrack,0); SWIG_arg++; 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static void swig_delete_ofxTLImageSequence(void *obj) {
ofxTLImageSequence *arg1 = (ofxTLImageSequence *) obj;
delete arg1;
}
static int _proxy__wrap_new_ofxTLImageSequence(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ofxTLImageSequence);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ofxTLImageSequence_attributes[] = {
    { "previewTextures", _wrap_ofxTLImageSequence_previewTextures_get, _wrap_ofxTLImageSequence_previewTextures_set },
    {0,0,0}
};
static swig_lua_method swig_ofxTLImageSequence_methods[]= {
    { "loadSequence", _wrap_ofxTLImageSequence_loadSequence},
    { "getImageWidth", _wrap_ofxTLImageSequence_getImageWidth},
    { "getImageHeight", _wrap_ofxTLImageSequence_getImageHeight},
    { "getThumbWidth", _wrap_ofxTLImageSequence_getThumbWidth},
    { "getThumbHeight", _wrap_ofxTLImageSequence_getThumbHeight},
    { "getImageAtTime", _wrap_ofxTLImageSequence_getImageAtTime},
    { "getImageAtFrame", _wrap_ofxTLImageSequence_getImageAtFrame},
    { "mousePressed", _wrap_ofxTLImageSequence_mousePressed},
    { "mouseMoved", _wrap_ofxTLImageSequence_mouseMoved},
    { "mouseDragged", _wrap_ofxTLImageSequence_mouseDragged},
    { "mouseReleased", _wrap_ofxTLImageSequence_mouseReleased},
    { "reset", _wrap_ofxTLImageSequence_reset},
    { "drawRectChanged", _wrap_ofxTLImageSequence_drawRectChanged},
    { "setZoomBounds", _wrap_ofxTLImageSequence_setZoomBounds},
    { "purgeFrames", _wrap_ofxTLImageSequence_purgeFrames},
    { "getTrack", _wrap_ofxTLImageSequence_getTrack},
    {0,0}
};
static swig_lua_method swig_ofxTLImageSequence_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ofxTLImageSequence_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ofxTLImageSequence_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ofxTLImageSequence_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ofxTLImageSequence_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ofxTLImageSequence_Sf_SwigStatic = {
    "ofxTLImageSequence",
    swig_ofxTLImageSequence_Sf_SwigStatic_methods,
    swig_ofxTLImageSequence_Sf_SwigStatic_attributes,
    swig_ofxTLImageSequence_Sf_SwigStatic_constants,
    swig_ofxTLImageSequence_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ofxTLImageSequence_bases[] = {0,0};
static const char *swig_ofxTLImageSequence_base_names[] = {"ofxTLTrack *",0};
static swig_lua_class _wrap_class_ofxTLImageSequence = { "ofxTLImageSequence", "ofxTLImageSequence", &SWIGTYPE_p_ofxTLImageSequence,_proxy__wrap_new_ofxTLImageSequence, swig_delete_ofxTLImageSequence, swig_ofxTLImageSequence_methods, swig_ofxTLImageSequence_attributes, &swig_ofxTLImageSequence_Sf_SwigStatic, swig_ofxTLImageSequence_meta, swig_ofxTLImageSequence_bases, swig_ofxTLImageSequence_base_names };

static int _wrap_ofxTLSwitch_timeRange_set(lua_State* L) { { int SWIG_arg = 0; ofxTLSwitch *arg1 = (ofxTLSwitch *) 0 ;
    ofLongRange arg2 ; ofLongRange *argp2 ; SWIG_check_num_args("ofxTLSwitch::timeRange",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLSwitch::timeRange",1,"ofxTLSwitch *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxTLSwitch::timeRange",2,"ofLongRange");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLSwitch,0))){
      SWIG_fail_ptr("ofxTLSwitch_timeRange_set",1,SWIGTYPE_p_ofxTLSwitch); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ofLongRange,0))){
      SWIG_fail_ptr("ofxTLSwitch_timeRange_set",2,SWIGTYPE_p_ofLongRange); }  arg2 = *argp2; if (arg1) (arg1)->timeRange = arg2;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLSwitch_timeRange_get(lua_State* L) { { int SWIG_arg = 0; ofxTLSwitch *arg1 = (ofxTLSwitch *) 0 ;
    ofLongRange result; SWIG_check_num_args("ofxTLSwitch::timeRange",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLSwitch::timeRange",1,"ofxTLSwitch *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLSwitch,0))){
      SWIG_fail_ptr("ofxTLSwitch_timeRange_get",1,SWIGTYPE_p_ofxTLSwitch); }  result =  ((arg1)->timeRange); {
      ofLongRange * resultptr = new ofLongRange(result);
      SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofLongRange,1); SWIG_arg++; }  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ofxTLSwitch_startSelected_set(lua_State* L) { { int SWIG_arg = 0; ofxTLSwitch *arg1 = (ofxTLSwitch *) 0 ;
    bool arg2 ; SWIG_check_num_args("ofxTLSwitch::startSelected",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLSwitch::startSelected",1,"ofxTLSwitch *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ofxTLSwitch::startSelected",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLSwitch,0))){
      SWIG_fail_ptr("ofxTLSwitch_startSelected_set",1,SWIGTYPE_p_ofxTLSwitch); }  arg2 = (lua_toboolean(L, 2)!=0);
    if (arg1) (arg1)->startSelected = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLSwitch_startSelected_get(lua_State* L) { { int SWIG_arg = 0; ofxTLSwitch *arg1 = (ofxTLSwitch *) 0 ;
    bool result; SWIG_check_num_args("ofxTLSwitch::startSelected",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLSwitch::startSelected",1,"ofxTLSwitch *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLSwitch,0))){
      SWIG_fail_ptr("ofxTLSwitch_startSelected_get",1,SWIGTYPE_p_ofxTLSwitch); }  result = (bool) ((arg1)->startSelected);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLSwitch_endSelected_set(lua_State* L) { { int SWIG_arg = 0; ofxTLSwitch *arg1 = (ofxTLSwitch *) 0 ;
    bool arg2 ; SWIG_check_num_args("ofxTLSwitch::endSelected",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLSwitch::endSelected",1,"ofxTLSwitch *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ofxTLSwitch::endSelected",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLSwitch,0))){
      SWIG_fail_ptr("ofxTLSwitch_endSelected_set",1,SWIGTYPE_p_ofxTLSwitch); }  arg2 = (lua_toboolean(L, 2)!=0);
    if (arg1) (arg1)->endSelected = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLSwitch_endSelected_get(lua_State* L) { { int SWIG_arg = 0; ofxTLSwitch *arg1 = (ofxTLSwitch *) 0 ;
    bool result; SWIG_check_num_args("ofxTLSwitch::endSelected",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLSwitch::endSelected",1,"ofxTLSwitch *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLSwitch,0))){
      SWIG_fail_ptr("ofxTLSwitch_endSelected_get",1,SWIGTYPE_p_ofxTLSwitch); }  result = (bool) ((arg1)->endSelected);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLSwitch_edgeDragOffset_set(lua_State* L) { { int SWIG_arg = 0; ofxTLSwitch *arg1 = (ofxTLSwitch *) 0 ;
    long arg2 ; SWIG_check_num_args("ofxTLSwitch::edgeDragOffset",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLSwitch::edgeDragOffset",1,"ofxTLSwitch *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxTLSwitch::edgeDragOffset",2,"long");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLSwitch,0))){
      SWIG_fail_ptr("ofxTLSwitch_edgeDragOffset_set",1,SWIGTYPE_p_ofxTLSwitch); }  arg2 = (long)lua_tonumber(L, 2);
    if (arg1) (arg1)->edgeDragOffset = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLSwitch_edgeDragOffset_get(lua_State* L) { { int SWIG_arg = 0; ofxTLSwitch *arg1 = (ofxTLSwitch *) 0 ;
    long result; SWIG_check_num_args("ofxTLSwitch::edgeDragOffset",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLSwitch::edgeDragOffset",1,"ofxTLSwitch *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLSwitch,0))){
      SWIG_fail_ptr("ofxTLSwitch_edgeDragOffset_get",1,SWIGTYPE_p_ofxTLSwitch); }  result = (long) ((arg1)->edgeDragOffset);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLSwitch_display_set(lua_State* L) { { int SWIG_arg = 0; ofxTLSwitch *arg1 = (ofxTLSwitch *) 0 ;
    ofRectangle arg2 ; ofRectangle *argp2 ; SWIG_check_num_args("ofxTLSwitch::display",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLSwitch::display",1,"ofxTLSwitch *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxTLSwitch::display",2,"ofRectangle");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLSwitch,0))){
      SWIG_fail_ptr("ofxTLSwitch_display_set",1,SWIGTYPE_p_ofxTLSwitch); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ofRectangle,0))){
      SWIG_fail_ptr("ofxTLSwitch_display_set",2,SWIGTYPE_p_ofRectangle); }  arg2 = *argp2; if (arg1) (arg1)->display = arg2;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLSwitch_display_get(lua_State* L) { { int SWIG_arg = 0; ofxTLSwitch *arg1 = (ofxTLSwitch *) 0 ;
    ofRectangle result; SWIG_check_num_args("ofxTLSwitch::display",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLSwitch::display",1,"ofxTLSwitch *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLSwitch,0))){
      SWIG_fail_ptr("ofxTLSwitch_display_get",1,SWIGTYPE_p_ofxTLSwitch); }  result =  ((arg1)->display); {
      ofRectangle * resultptr = new ofRectangle(result);
      SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofRectangle,1); SWIG_arg++; }  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ofxTLSwitch_textField_set(lua_State* L) { { int SWIG_arg = 0; ofxTLSwitch *arg1 = (ofxTLSwitch *) 0 ;
    ofxTextInputField arg2 ; ofxTextInputField *argp2 ; SWIG_check_num_args("ofxTLSwitch::textField",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLSwitch::textField",1,"ofxTLSwitch *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxTLSwitch::textField",2,"ofxTextInputField");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLSwitch,0))){
      SWIG_fail_ptr("ofxTLSwitch_textField_set",1,SWIGTYPE_p_ofxTLSwitch); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ofxTextInputField,0))){
      SWIG_fail_ptr("ofxTLSwitch_textField_set",2,SWIGTYPE_p_ofxTextInputField); }  arg2 = *argp2;
    if (arg1) (arg1)->textField = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLSwitch_textField_get(lua_State* L) { { int SWIG_arg = 0; ofxTLSwitch *arg1 = (ofxTLSwitch *) 0 ;
    ofxTextInputField result; SWIG_check_num_args("ofxTLSwitch::textField",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLSwitch::textField",1,"ofxTLSwitch *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLSwitch,0))){
      SWIG_fail_ptr("ofxTLSwitch_textField_get",1,SWIGTYPE_p_ofxTLSwitch); }  result =  ((arg1)->textField); {
      ofxTextInputField * resultptr = new ofxTextInputField(result);
      SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofxTextInputField,1); SWIG_arg++; }  return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLSwitch_textFieldDisplay_set(lua_State* L) { { int SWIG_arg = 0; ofxTLSwitch *arg1 = (ofxTLSwitch *) 0 ;
    ofRectangle arg2 ; ofRectangle *argp2 ; SWIG_check_num_args("ofxTLSwitch::textFieldDisplay",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLSwitch::textFieldDisplay",1,"ofxTLSwitch *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxTLSwitch::textFieldDisplay",2,"ofRectangle");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLSwitch,0))){
      SWIG_fail_ptr("ofxTLSwitch_textFieldDisplay_set",1,SWIGTYPE_p_ofxTLSwitch); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ofRectangle,0))){
      SWIG_fail_ptr("ofxTLSwitch_textFieldDisplay_set",2,SWIGTYPE_p_ofRectangle); }  arg2 = *argp2;
    if (arg1) (arg1)->textFieldDisplay = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLSwitch_textFieldDisplay_get(lua_State* L) { { int SWIG_arg = 0; ofxTLSwitch *arg1 = (ofxTLSwitch *) 0 ;
    ofRectangle result; SWIG_check_num_args("ofxTLSwitch::textFieldDisplay",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLSwitch::textFieldDisplay",1,"ofxTLSwitch *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLSwitch,0))){
      SWIG_fail_ptr("ofxTLSwitch_textFieldDisplay_get",1,SWIGTYPE_p_ofxTLSwitch); }  result =  ((arg1)->textFieldDisplay); {
      ofRectangle * resultptr = new ofRectangle(result);
      SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofRectangle,1); SWIG_arg++; }  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_new_ofxTLSwitch(lua_State* L) { { int SWIG_arg = 0; ofxTLSwitch *result = 0 ;
    SWIG_check_num_args("ofxTLSwitch::ofxTLSwitch",0,0) result = (ofxTLSwitch *)new ofxTLSwitch();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxTLSwitch,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static void swig_delete_ofxTLSwitch(void *obj) {
ofxTLSwitch *arg1 = (ofxTLSwitch *) obj;
delete arg1;
}
static int _proxy__wrap_new_ofxTLSwitch(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ofxTLSwitch);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ofxTLSwitch_attributes[] = {
    { "timeRange", _wrap_ofxTLSwitch_timeRange_get, _wrap_ofxTLSwitch_timeRange_set },
    { "startSelected", _wrap_ofxTLSwitch_startSelected_get, _wrap_ofxTLSwitch_startSelected_set },
    { "endSelected", _wrap_ofxTLSwitch_endSelected_get, _wrap_ofxTLSwitch_endSelected_set },
    { "edgeDragOffset", _wrap_ofxTLSwitch_edgeDragOffset_get, _wrap_ofxTLSwitch_edgeDragOffset_set },
    { "display", _wrap_ofxTLSwitch_display_get, _wrap_ofxTLSwitch_display_set },
    { "textField", _wrap_ofxTLSwitch_textField_get, _wrap_ofxTLSwitch_textField_set },
    { "textFieldDisplay", _wrap_ofxTLSwitch_textFieldDisplay_get, _wrap_ofxTLSwitch_textFieldDisplay_set },
    {0,0,0}
};
static swig_lua_method swig_ofxTLSwitch_methods[]= {
    {0,0}
};
static swig_lua_method swig_ofxTLSwitch_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ofxTLSwitch_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ofxTLSwitch_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ofxTLSwitch_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ofxTLSwitch_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ofxTLSwitch_Sf_SwigStatic = {
    "ofxTLSwitch",
    swig_ofxTLSwitch_Sf_SwigStatic_methods,
    swig_ofxTLSwitch_Sf_SwigStatic_attributes,
    swig_ofxTLSwitch_Sf_SwigStatic_constants,
    swig_ofxTLSwitch_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ofxTLSwitch_bases[] = {0,0};
static const char *swig_ofxTLSwitch_base_names[] = {"ofxTLKeyframe *",0};
static swig_lua_class _wrap_class_ofxTLSwitch = { "ofxTLSwitch", "ofxTLSwitch", &SWIGTYPE_p_ofxTLSwitch,_proxy__wrap_new_ofxTLSwitch, swig_delete_ofxTLSwitch, swig_ofxTLSwitch_methods, swig_ofxTLSwitch_attributes, &swig_ofxTLSwitch_Sf_SwigStatic, swig_ofxTLSwitch_meta, swig_ofxTLSwitch_bases, swig_ofxTLSwitch_base_names };

static int _wrap_new_ofxTLSwitches(lua_State* L) { { int SWIG_arg = 0; ofxTLSwitches *result = 0 ;
    SWIG_check_num_args("ofxTLSwitches::ofxTLSwitches",0,0) result = (ofxTLSwitches *)new ofxTLSwitches();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxTLSwitches,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ofxTLSwitches_isOn(lua_State* L) { { int SWIG_arg = 0; ofxTLSwitches *arg1 = (ofxTLSwitches *) 0 ; bool result;
    SWIG_check_num_args("ofxTLSwitches::isOn",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLSwitches::isOn",1,"ofxTLSwitches *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLSwitches,0))){
      SWIG_fail_ptr("ofxTLSwitches_isOn",1,SWIGTYPE_p_ofxTLSwitches); }  result = (bool)(arg1)->isOn();
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLSwitches_isOnAtMillis(lua_State* L) { { int SWIG_arg = 0; ofxTLSwitches *arg1 = (ofxTLSwitches *) 0 ;
    long arg2 ; bool result; SWIG_check_num_args("ofxTLSwitches::isOnAtMillis",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLSwitches::isOnAtMillis",1,"ofxTLSwitches *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxTLSwitches::isOnAtMillis",2,"long");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLSwitches,0))){
      SWIG_fail_ptr("ofxTLSwitches_isOnAtMillis",1,SWIGTYPE_p_ofxTLSwitches); }  arg2 = (long)lua_tonumber(L, 2);
    result = (bool)(arg1)->isOnAtMillis(arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLSwitches_isOnAtPercent(lua_State* L) { { int SWIG_arg = 0; ofxTLSwitches *arg1 = (ofxTLSwitches *) 0 ;
    float arg2 ; bool result; SWIG_check_num_args("ofxTLSwitches::isOnAtPercent",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLSwitches::isOnAtPercent",1,"ofxTLSwitches *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxTLSwitches::isOnAtPercent",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLSwitches,0))){
      SWIG_fail_ptr("ofxTLSwitches_isOnAtPercent",1,SWIGTYPE_p_ofxTLSwitches); }  arg2 = (float)lua_tonumber(L, 2);
    result = (bool)(arg1)->isOnAtPercent(arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLSwitches_getActiveSwitchAtMillis(lua_State* L) { { int SWIG_arg = 0;
    ofxTLSwitches *arg1 = (ofxTLSwitches *) 0 ; long arg2 ; ofxTLSwitch *result = 0 ;
    SWIG_check_num_args("ofxTLSwitches::getActiveSwitchAtMillis",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLSwitches::getActiveSwitchAtMillis",1,"ofxTLSwitches *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxTLSwitches::getActiveSwitchAtMillis",2,"long");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLSwitches,0))){
      SWIG_fail_ptr("ofxTLSwitches_getActiveSwitchAtMillis",1,SWIGTYPE_p_ofxTLSwitches); }  arg2 = (long)lua_tonumber(L, 2);
    result = (ofxTLSwitch *)(arg1)->getActiveSwitchAtMillis(arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxTLSwitch,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ofxTLSwitches_getTrack(lua_State* L) { { int SWIG_arg = 0; ofxTLSwitches *arg1 = (ofxTLSwitches *) 0 ;
    ofxTLTrack *result = 0 ; SWIG_check_num_args("ofxTLSwitches::getTrack",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLSwitches::getTrack",1,"ofxTLSwitches *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLSwitches,0))){
      SWIG_fail_ptr("ofxTLSwitches_getTrack",1,SWIGTYPE_p_ofxTLSwitches); } 
    result = (ofxTLTrack *)ofxTLSwitches_getTrack(arg1); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxTLTrack,0); SWIG_arg++; 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static void swig_delete_ofxTLSwitches(void *obj) {
ofxTLSwitches *arg1 = (ofxTLSwitches *) obj;
delete arg1;
}
static int _proxy__wrap_new_ofxTLSwitches(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ofxTLSwitches);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ofxTLSwitches_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ofxTLSwitches_methods[]= {
    { "isOn", _wrap_ofxTLSwitches_isOn},
    { "isOnAtMillis", _wrap_ofxTLSwitches_isOnAtMillis},
    { "isOnAtPercent", _wrap_ofxTLSwitches_isOnAtPercent},
    { "getActiveSwitchAtMillis", _wrap_ofxTLSwitches_getActiveSwitchAtMillis},
    { "getTrack", _wrap_ofxTLSwitches_getTrack},
    {0,0}
};
static swig_lua_method swig_ofxTLSwitches_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ofxTLSwitches_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ofxTLSwitches_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ofxTLSwitches_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ofxTLSwitches_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ofxTLSwitches_Sf_SwigStatic = {
    "ofxTLSwitches",
    swig_ofxTLSwitches_Sf_SwigStatic_methods,
    swig_ofxTLSwitches_Sf_SwigStatic_attributes,
    swig_ofxTLSwitches_Sf_SwigStatic_constants,
    swig_ofxTLSwitches_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ofxTLSwitches_bases[] = {0,0};
static const char *swig_ofxTLSwitches_base_names[] = {"ofxTLKeyframes *",0};
static swig_lua_class _wrap_class_ofxTLSwitches = { "ofxTLSwitches", "ofxTLSwitches", &SWIGTYPE_p_ofxTLSwitches,_proxy__wrap_new_ofxTLSwitches, swig_delete_ofxTLSwitches, swig_ofxTLSwitches_methods, swig_ofxTLSwitches_attributes, &swig_ofxTLSwitches_Sf_SwigStatic, swig_ofxTLSwitches_meta, swig_ofxTLSwitches_bases, swig_ofxTLSwitches_base_names };

static int _wrap_new_ofxTLBangs(lua_State* L) { { int SWIG_arg = 0; ofxTLBangs *result = 0 ;
    SWIG_check_num_args("ofxTLBangs::ofxTLBangs",0,0) result = (ofxTLBangs *)new ofxTLBangs();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxTLBangs,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ofxTLBangs_getTrack(lua_State* L) { { int SWIG_arg = 0; ofxTLBangs *arg1 = (ofxTLBangs *) 0 ;
    ofxTLTrack *result = 0 ; SWIG_check_num_args("ofxTLBangs::getTrack",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLBangs::getTrack",1,"ofxTLBangs *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLBangs,0))){
      SWIG_fail_ptr("ofxTLBangs_getTrack",1,SWIGTYPE_p_ofxTLBangs); }  result = (ofxTLTrack *)ofxTLBangs_getTrack(arg1);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxTLTrack,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static void swig_delete_ofxTLBangs(void *obj) {
ofxTLBangs *arg1 = (ofxTLBangs *) obj;
delete arg1;
}
static int _proxy__wrap_new_ofxTLBangs(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ofxTLBangs);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ofxTLBangs_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ofxTLBangs_methods[]= {
    { "getTrack", _wrap_ofxTLBangs_getTrack},
    {0,0}
};
static swig_lua_method swig_ofxTLBangs_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ofxTLBangs_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ofxTLBangs_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ofxTLBangs_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ofxTLBangs_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ofxTLBangs_Sf_SwigStatic = {
    "ofxTLBangs",
    swig_ofxTLBangs_Sf_SwigStatic_methods,
    swig_ofxTLBangs_Sf_SwigStatic_attributes,
    swig_ofxTLBangs_Sf_SwigStatic_constants,
    swig_ofxTLBangs_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ofxTLBangs_bases[] = {0,0};
static const char *swig_ofxTLBangs_base_names[] = {"ofxTLKeyframes *",0};
static swig_lua_class _wrap_class_ofxTLBangs = { "ofxTLBangs", "ofxTLBangs", &SWIGTYPE_p_ofxTLBangs,_proxy__wrap_new_ofxTLBangs, swig_delete_ofxTLBangs, swig_ofxTLBangs_methods, swig_ofxTLBangs_attributes, &swig_ofxTLBangs_Sf_SwigStatic, swig_ofxTLBangs_meta, swig_ofxTLBangs_bases, swig_ofxTLBangs_base_names };

static int _wrap_ofxTLCameraFrame_position_set(lua_State* L) { { int SWIG_arg = 0;
    ofxTLCameraFrame *arg1 = (ofxTLCameraFrame *) 0 ; glm::vec3 arg2 ; glm::vec3 *argp2 ;
    SWIG_check_num_args("ofxTLCameraFrame::position",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLCameraFrame::position",1,"ofxTLCameraFrame *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxTLCameraFrame::position",2,"glm::vec3");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLCameraFrame,0))){
      SWIG_fail_ptr("ofxTLCameraFrame_position_set",1,SWIGTYPE_p_ofxTLCameraFrame); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_glm__vec3,0))){
      SWIG_fail_ptr("ofxTLCameraFrame_position_set",2,SWIGTYPE_p_glm__vec3); }  arg2 = *argp2;
    if (arg1) (arg1)->position = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLCameraFrame_position_get(lua_State* L) { { int SWIG_arg = 0;
    ofxTLCameraFrame *arg1 = (ofxTLCameraFrame *) 0 ; glm::vec3 result; SWIG_check_num_args("ofxTLCameraFrame::position",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLCameraFrame::position",1,"ofxTLCameraFrame *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLCameraFrame,0))){
      SWIG_fail_ptr("ofxTLCameraFrame_position_get",1,SWIGTYPE_p_ofxTLCameraFrame); }  result =  ((arg1)->position); {
      glm::vec3 * resultptr = new glm::vec3(result);
      SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_glm__vec3,1); SWIG_arg++; }  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ofxTLCameraFrame_orientation_set(lua_State* L) { { int SWIG_arg = 0;
    ofxTLCameraFrame *arg1 = (ofxTLCameraFrame *) 0 ; glm::quat arg2 ; glm::quat *argp2 ;
    SWIG_check_num_args("ofxTLCameraFrame::orientation",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLCameraFrame::orientation",1,"ofxTLCameraFrame *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxTLCameraFrame::orientation",2,"glm::quat");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLCameraFrame,0))){
      SWIG_fail_ptr("ofxTLCameraFrame_orientation_set",1,SWIGTYPE_p_ofxTLCameraFrame); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_glm__quat,0))){
      SWIG_fail_ptr("ofxTLCameraFrame_orientation_set",2,SWIGTYPE_p_glm__quat); }  arg2 = *argp2;
    if (arg1) (arg1)->orientation = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLCameraFrame_orientation_get(lua_State* L) { { int SWIG_arg = 0;
    ofxTLCameraFrame *arg1 = (ofxTLCameraFrame *) 0 ; glm::quat result; SWIG_check_num_args("ofxTLCameraFrame::orientation",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLCameraFrame::orientation",1,"ofxTLCameraFrame *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLCameraFrame,0))){
      SWIG_fail_ptr("ofxTLCameraFrame_orientation_get",1,SWIGTYPE_p_ofxTLCameraFrame); }  result =  ((arg1)->orientation); {
      glm::quat * resultptr = new glm::quat(result);
      SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_glm__quat,1); SWIG_arg++; }  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ofxTLCameraFrame_easeIn_set(lua_State* L) { { int SWIG_arg = 0;
    ofxTLCameraFrame *arg1 = (ofxTLCameraFrame *) 0 ; CameraTrackEase arg2 ; SWIG_check_num_args("ofxTLCameraFrame::easeIn",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLCameraFrame::easeIn",1,"ofxTLCameraFrame *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxTLCameraFrame::easeIn",2,"CameraTrackEase");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLCameraFrame,0))){
      SWIG_fail_ptr("ofxTLCameraFrame_easeIn_set",1,SWIGTYPE_p_ofxTLCameraFrame); } 
    arg2 = (CameraTrackEase)(int)lua_tonumber(L, 2); if (arg1) (arg1)->easeIn = arg2; return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ofxTLCameraFrame_easeIn_get(lua_State* L) { { int SWIG_arg = 0;
    ofxTLCameraFrame *arg1 = (ofxTLCameraFrame *) 0 ; CameraTrackEase result;
    SWIG_check_num_args("ofxTLCameraFrame::easeIn",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLCameraFrame::easeIn",1,"ofxTLCameraFrame *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLCameraFrame,0))){
      SWIG_fail_ptr("ofxTLCameraFrame_easeIn_get",1,SWIGTYPE_p_ofxTLCameraFrame); } 
    result = (CameraTrackEase) ((arg1)->easeIn); lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLCameraFrame_easeOut_set(lua_State* L) { { int SWIG_arg = 0;
    ofxTLCameraFrame *arg1 = (ofxTLCameraFrame *) 0 ; CameraTrackEase arg2 ;
    SWIG_check_num_args("ofxTLCameraFrame::easeOut",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLCameraFrame::easeOut",1,"ofxTLCameraFrame *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxTLCameraFrame::easeOut",2,"CameraTrackEase");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLCameraFrame,0))){
      SWIG_fail_ptr("ofxTLCameraFrame_easeOut_set",1,SWIGTYPE_p_ofxTLCameraFrame); } 
    arg2 = (CameraTrackEase)(int)lua_tonumber(L, 2); if (arg1) (arg1)->easeOut = arg2; return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ofxTLCameraFrame_easeOut_get(lua_State* L) { { int SWIG_arg = 0;
    ofxTLCameraFrame *arg1 = (ofxTLCameraFrame *) 0 ; CameraTrackEase result;
    SWIG_check_num_args("ofxTLCameraFrame::easeOut",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLCameraFrame::easeOut",1,"ofxTLCameraFrame *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLCameraFrame,0))){
      SWIG_fail_ptr("ofxTLCameraFrame_easeOut_get",1,SWIGTYPE_p_ofxTLCameraFrame); } 
    result = (CameraTrackEase) ((arg1)->easeOut); lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLCameraFrame_easeInSelected_set(lua_State* L) { { int SWIG_arg = 0;
    ofxTLCameraFrame *arg1 = (ofxTLCameraFrame *) 0 ; bool arg2 ; SWIG_check_num_args("ofxTLCameraFrame::easeInSelected",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLCameraFrame::easeInSelected",1,"ofxTLCameraFrame *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ofxTLCameraFrame::easeInSelected",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLCameraFrame,0))){
      SWIG_fail_ptr("ofxTLCameraFrame_easeInSelected_set",1,SWIGTYPE_p_ofxTLCameraFrame); }  arg2 = (lua_toboolean(L, 2)!=0);
    if (arg1) (arg1)->easeInSelected = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLCameraFrame_easeInSelected_get(lua_State* L) { { int SWIG_arg = 0;
    ofxTLCameraFrame *arg1 = (ofxTLCameraFrame *) 0 ; bool result; SWIG_check_num_args("ofxTLCameraFrame::easeInSelected",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLCameraFrame::easeInSelected",1,"ofxTLCameraFrame *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLCameraFrame,0))){
      SWIG_fail_ptr("ofxTLCameraFrame_easeInSelected_get",1,SWIGTYPE_p_ofxTLCameraFrame); } 
    result = (bool) ((arg1)->easeInSelected); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_new_ofxTLCameraFrame(lua_State* L) { { int SWIG_arg = 0; ofxTLCameraFrame *result = 0 ;
    SWIG_check_num_args("ofxTLCameraFrame::ofxTLCameraFrame",0,0) result = (ofxTLCameraFrame *)new ofxTLCameraFrame();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxTLCameraFrame,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static void swig_delete_ofxTLCameraFrame(void *obj) {
ofxTLCameraFrame *arg1 = (ofxTLCameraFrame *) obj;
delete arg1;
}
static int _proxy__wrap_new_ofxTLCameraFrame(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ofxTLCameraFrame);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ofxTLCameraFrame_attributes[] = {
    { "position", _wrap_ofxTLCameraFrame_position_get, _wrap_ofxTLCameraFrame_position_set },
    { "orientation", _wrap_ofxTLCameraFrame_orientation_get, _wrap_ofxTLCameraFrame_orientation_set },
    { "easeIn", _wrap_ofxTLCameraFrame_easeIn_get, _wrap_ofxTLCameraFrame_easeIn_set },
    { "easeOut", _wrap_ofxTLCameraFrame_easeOut_get, _wrap_ofxTLCameraFrame_easeOut_set },
    { "easeInSelected", _wrap_ofxTLCameraFrame_easeInSelected_get, _wrap_ofxTLCameraFrame_easeInSelected_set },
    {0,0,0}
};
static swig_lua_method swig_ofxTLCameraFrame_methods[]= {
    {0,0}
};
static swig_lua_method swig_ofxTLCameraFrame_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ofxTLCameraFrame_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ofxTLCameraFrame_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ofxTLCameraFrame_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ofxTLCameraFrame_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ofxTLCameraFrame_Sf_SwigStatic = {
    "ofxTLCameraFrame",
    swig_ofxTLCameraFrame_Sf_SwigStatic_methods,
    swig_ofxTLCameraFrame_Sf_SwigStatic_attributes,
    swig_ofxTLCameraFrame_Sf_SwigStatic_constants,
    swig_ofxTLCameraFrame_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ofxTLCameraFrame_bases[] = {0,0};
static const char *swig_ofxTLCameraFrame_base_names[] = {"ofxTLKeyframe *",0};
static swig_lua_class _wrap_class_ofxTLCameraFrame = { "ofxTLCameraFrame", "ofxTLCameraFrame", &SWIGTYPE_p_ofxTLCameraFrame,_proxy__wrap_new_ofxTLCameraFrame, swig_delete_ofxTLCameraFrame, swig_ofxTLCameraFrame_methods, swig_ofxTLCameraFrame_attributes, &swig_ofxTLCameraFrame_Sf_SwigStatic, swig_ofxTLCameraFrame_meta, swig_ofxTLCameraFrame_bases, swig_ofxTLCameraFrame_base_names };

static int _wrap_new_ofxTLCameraTrack(lua_State* L) { { int SWIG_arg = 0; ofxTLCameraTrack *result = 0 ;
    SWIG_check_num_args("ofxTLCameraTrack::ofxTLCameraTrack",0,0) result = (ofxTLCameraTrack *)new ofxTLCameraTrack();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxTLCameraTrack,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ofxTLCameraTrack_setTimelineInOutToTrack(lua_State* L) { { int SWIG_arg = 0;
    ofxTLCameraTrack *arg1 = (ofxTLCameraTrack *) 0 ; SWIG_check_num_args("ofxTLCameraTrack::setTimelineInOutToTrack",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLCameraTrack::setTimelineInOutToTrack",1,"ofxTLCameraTrack *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLCameraTrack,0))){
      SWIG_fail_ptr("ofxTLCameraTrack_setTimelineInOutToTrack",1,SWIGTYPE_p_ofxTLCameraTrack); } 
    (arg1)->setTimelineInOutToTrack(); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLCameraTrack_lockCameraToTrack_set(lua_State* L) { { int SWIG_arg = 0;
    ofxTLCameraTrack *arg1 = (ofxTLCameraTrack *) 0 ; bool arg2 ; SWIG_check_num_args("ofxTLCameraTrack::lockCameraToTrack",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLCameraTrack::lockCameraToTrack",1,"ofxTLCameraTrack *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ofxTLCameraTrack::lockCameraToTrack",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLCameraTrack,0))){
      SWIG_fail_ptr("ofxTLCameraTrack_lockCameraToTrack_set",1,SWIGTYPE_p_ofxTLCameraTrack); }  arg2 = (lua_toboolean(L, 2)!=0);
    if (arg1) (arg1)->lockCameraToTrack = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLCameraTrack_lockCameraToTrack_get(lua_State* L) { { int SWIG_arg = 0;
    ofxTLCameraTrack *arg1 = (ofxTLCameraTrack *) 0 ; bool result;
    SWIG_check_num_args("ofxTLCameraTrack::lockCameraToTrack",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLCameraTrack::lockCameraToTrack",1,"ofxTLCameraTrack *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLCameraTrack,0))){
      SWIG_fail_ptr("ofxTLCameraTrack_lockCameraToTrack_get",1,SWIGTYPE_p_ofxTLCameraTrack); } 
    result = (bool) ((arg1)->lockCameraToTrack); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLCameraTrack_setCamera(lua_State* L) { { int SWIG_arg = 0;
    ofxTLCameraTrack *arg1 = (ofxTLCameraTrack *) 0 ; ofCamera *arg2 = 0 ;
    SWIG_check_num_args("ofxTLCameraTrack::setCamera",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLCameraTrack::setCamera",1,"ofxTLCameraTrack *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxTLCameraTrack::setCamera",2,"ofCamera &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLCameraTrack,0))){
      SWIG_fail_ptr("ofxTLCameraTrack_setCamera",1,SWIGTYPE_p_ofxTLCameraTrack); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofCamera,0))){
      SWIG_fail_ptr("ofxTLCameraTrack_setCamera",2,SWIGTYPE_p_ofCamera); }  (arg1)->setCamera(*arg2); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLCameraTrack_setDampening(lua_State* L) { { int SWIG_arg = 0;
    ofxTLCameraTrack *arg1 = (ofxTLCameraTrack *) 0 ; float arg2 ; SWIG_check_num_args("ofxTLCameraTrack::setDampening",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLCameraTrack::setDampening",1,"ofxTLCameraTrack *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxTLCameraTrack::setDampening",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLCameraTrack,0))){
      SWIG_fail_ptr("ofxTLCameraTrack_setDampening",1,SWIGTYPE_p_ofxTLCameraTrack); }  arg2 = (float)lua_tonumber(L, 2);
    (arg1)->setDampening(arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLCameraTrack_getDampening(lua_State* L) { { int SWIG_arg = 0;
    ofxTLCameraTrack *arg1 = (ofxTLCameraTrack *) 0 ; float result; SWIG_check_num_args("ofxTLCameraTrack::getDampening",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLCameraTrack::getDampening",1,"ofxTLCameraTrack *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLCameraTrack,0))){
      SWIG_fail_ptr("ofxTLCameraTrack_getDampening",1,SWIGTYPE_p_ofxTLCameraTrack); }  result = (float)(arg1)->getDampening();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLCameraTrack_jumpToTarget(lua_State* L) { { int SWIG_arg = 0;
    ofxTLCameraTrack *arg1 = (ofxTLCameraTrack *) 0 ; SWIG_check_num_args("ofxTLCameraTrack::jumpToTarget",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLCameraTrack::jumpToTarget",1,"ofxTLCameraTrack *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLCameraTrack,0))){
      SWIG_fail_ptr("ofxTLCameraTrack_jumpToTarget",1,SWIGTYPE_p_ofxTLCameraTrack); }  (arg1)->jumpToTarget(); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLCameraTrack_draw3d(lua_State* L) { { int SWIG_arg = 0; ofxTLCameraTrack *arg1 = (ofxTLCameraTrack *) 0 ;
    SWIG_check_num_args("ofxTLCameraTrack::draw3d",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLCameraTrack::draw3d",1,"ofxTLCameraTrack *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLCameraTrack,0))){
      SWIG_fail_ptr("ofxTLCameraTrack_draw3d",1,SWIGTYPE_p_ofxTLCameraTrack); }  (arg1)->draw3d(); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLCameraTrack_getTrack(lua_State* L) { { int SWIG_arg = 0; ofxTLCameraTrack *arg1 = (ofxTLCameraTrack *) 0 ;
    ofxTLTrack *result = 0 ; SWIG_check_num_args("ofxTLCameraTrack::getTrack",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLCameraTrack::getTrack",1,"ofxTLCameraTrack *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLCameraTrack,0))){
      SWIG_fail_ptr("ofxTLCameraTrack_getTrack",1,SWIGTYPE_p_ofxTLCameraTrack); } 
    result = (ofxTLTrack *)ofxTLCameraTrack_getTrack(arg1); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxTLTrack,0); SWIG_arg++; 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLCameraTrack_setLockCameraToTrack(lua_State* L) { { int SWIG_arg = 0;
    ofxTLCameraTrack *arg1 = (ofxTLCameraTrack *) 0 ; bool arg2 ;
    SWIG_check_num_args("ofxTLCameraTrack::setLockCameraToTrack",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLCameraTrack::setLockCameraToTrack",1,"ofxTLCameraTrack *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ofxTLCameraTrack::setLockCameraToTrack",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLCameraTrack,0))){
      SWIG_fail_ptr("ofxTLCameraTrack_setLockCameraToTrack",1,SWIGTYPE_p_ofxTLCameraTrack); }  arg2 = (lua_toboolean(L, 2)!=0);
    ofxTLCameraTrack_setLockCameraToTrack(arg1,arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLCameraTrack_getLockCameraToTrack(lua_State* L) { { int SWIG_arg = 0;
    ofxTLCameraTrack *arg1 = (ofxTLCameraTrack *) 0 ; bool result;
    SWIG_check_num_args("ofxTLCameraTrack::getLockCameraToTrack",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLCameraTrack::getLockCameraToTrack",1,"ofxTLCameraTrack *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLCameraTrack,0))){
      SWIG_fail_ptr("ofxTLCameraTrack_getLockCameraToTrack",1,SWIGTYPE_p_ofxTLCameraTrack); } 
    result = (bool)ofxTLCameraTrack_getLockCameraToTrack(arg1); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static void swig_delete_ofxTLCameraTrack(void *obj) {
ofxTLCameraTrack *arg1 = (ofxTLCameraTrack *) obj;
delete arg1;
}
static int _proxy__wrap_new_ofxTLCameraTrack(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ofxTLCameraTrack);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ofxTLCameraTrack_attributes[] = {
    { "lockCameraToTrack", _wrap_ofxTLCameraTrack_lockCameraToTrack_get, _wrap_ofxTLCameraTrack_lockCameraToTrack_set },
    {0,0,0}
};
static swig_lua_method swig_ofxTLCameraTrack_methods[]= {
    { "setTimelineInOutToTrack", _wrap_ofxTLCameraTrack_setTimelineInOutToTrack},
    { "setCamera", _wrap_ofxTLCameraTrack_setCamera},
    { "setDampening", _wrap_ofxTLCameraTrack_setDampening},
    { "getDampening", _wrap_ofxTLCameraTrack_getDampening},
    { "jumpToTarget", _wrap_ofxTLCameraTrack_jumpToTarget},
    { "draw3d", _wrap_ofxTLCameraTrack_draw3d},
    { "getTrack", _wrap_ofxTLCameraTrack_getTrack},
    { "setLockCameraToTrack", _wrap_ofxTLCameraTrack_setLockCameraToTrack},
    { "getLockCameraToTrack", _wrap_ofxTLCameraTrack_getLockCameraToTrack},
    {0,0}
};
static swig_lua_method swig_ofxTLCameraTrack_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ofxTLCameraTrack_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ofxTLCameraTrack_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ofxTLCameraTrack_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ofxTLCameraTrack_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ofxTLCameraTrack_Sf_SwigStatic = {
    "ofxTLCameraTrack",
    swig_ofxTLCameraTrack_Sf_SwigStatic_methods,
    swig_ofxTLCameraTrack_Sf_SwigStatic_attributes,
    swig_ofxTLCameraTrack_Sf_SwigStatic_constants,
    swig_ofxTLCameraTrack_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ofxTLCameraTrack_bases[] = {0,0};
static const char *swig_ofxTLCameraTrack_base_names[] = {"ofxTLKeyframes *",0};
static swig_lua_class _wrap_class_ofxTLCameraTrack = { "ofxTLCameraTrack", "ofxTLCameraTrack", &SWIGTYPE_p_ofxTLCameraTrack,_proxy__wrap_new_ofxTLCameraTrack, swig_delete_ofxTLCameraTrack, swig_ofxTLCameraTrack_methods, swig_ofxTLCameraTrack_attributes, &swig_ofxTLCameraTrack_Sf_SwigStatic, swig_ofxTLCameraTrack_meta, swig_ofxTLCameraTrack_bases, swig_ofxTLCameraTrack_base_names };

static int _wrap_new_ofxTLAudioTrack(lua_State* L) { { int SWIG_arg = 0; ofxTLAudioTrack *result = 0 ;
    SWIG_check_num_args("ofxTLAudioTrack::ofxTLAudioTrack",0,0) result = (ofxTLAudioTrack *)new ofxTLAudioTrack();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxTLAudioTrack,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ofxTLAudioTrack_loadSoundfile(lua_State* L) { { int SWIG_arg = 0;
    ofxTLAudioTrack *arg1 = (ofxTLAudioTrack *) 0 ; string arg2 ; bool result;
    SWIG_check_num_args("ofxTLAudioTrack::loadSoundfile",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLAudioTrack::loadSoundfile",1,"ofxTLAudioTrack *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxTLAudioTrack::loadSoundfile",2,"string");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLAudioTrack,0))){
      SWIG_fail_ptr("ofxTLAudioTrack_loadSoundfile",1,SWIGTYPE_p_ofxTLAudioTrack); } 
    (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2)); result = (bool)(arg1)->loadSoundfile(arg2);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLAudioTrack_isSoundLoaded(lua_State* L) { { int SWIG_arg = 0;
    ofxTLAudioTrack *arg1 = (ofxTLAudioTrack *) 0 ; bool result; SWIG_check_num_args("ofxTLAudioTrack::isSoundLoaded",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLAudioTrack::isSoundLoaded",1,"ofxTLAudioTrack *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLAudioTrack,0))){
      SWIG_fail_ptr("ofxTLAudioTrack_isSoundLoaded",1,SWIGTYPE_p_ofxTLAudioTrack); }  result = (bool)(arg1)->isSoundLoaded();
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLAudioTrack_getDuration(lua_State* L) { { int SWIG_arg = 0; ofxTLAudioTrack *arg1 = (ofxTLAudioTrack *) 0 ;
    float result; SWIG_check_num_args("ofxTLAudioTrack::getDuration",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLAudioTrack::getDuration",1,"ofxTLAudioTrack *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLAudioTrack,0))){
      SWIG_fail_ptr("ofxTLAudioTrack_getDuration",1,SWIGTYPE_p_ofxTLAudioTrack); }  result = (float)(arg1)->getDuration();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLAudioTrack_getSoundfilePath(lua_State* L) { { int SWIG_arg = 0;
    ofxTLAudioTrack *arg1 = (ofxTLAudioTrack *) 0 ; string result; SWIG_check_num_args("ofxTLAudioTrack::getSoundfilePath",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLAudioTrack::getSoundfilePath",1,"ofxTLAudioTrack *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLAudioTrack,0))){
      SWIG_fail_ptr("ofxTLAudioTrack_getSoundfilePath",1,SWIGTYPE_p_ofxTLAudioTrack); }  result = (arg1)->getSoundfilePath();
    lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ofxTLAudioTrack_setFFTDampening(lua_State* L) { { int SWIG_arg = 0;
    ofxTLAudioTrack *arg1 = (ofxTLAudioTrack *) 0 ; float arg2 ; SWIG_check_num_args("ofxTLAudioTrack::setFFTDampening",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLAudioTrack::setFFTDampening",1,"ofxTLAudioTrack *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxTLAudioTrack::setFFTDampening",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLAudioTrack,0))){
      SWIG_fail_ptr("ofxTLAudioTrack_setFFTDampening",1,SWIGTYPE_p_ofxTLAudioTrack); }  arg2 = (float)lua_tonumber(L, 2);
    (arg1)->setFFTDampening(arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLAudioTrack_getFFTDampening(lua_State* L) { { int SWIG_arg = 0;
    ofxTLAudioTrack *arg1 = (ofxTLAudioTrack *) 0 ; float result; SWIG_check_num_args("ofxTLAudioTrack::getFFTDampening",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLAudioTrack::getFFTDampening",1,"ofxTLAudioTrack *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLAudioTrack,0))){
      SWIG_fail_ptr("ofxTLAudioTrack_getFFTDampening",1,SWIGTYPE_p_ofxTLAudioTrack); } 
    result = (float)(arg1)->getFFTDampening(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLAudioTrack_setUseFFTEnvelope(lua_State* L) { { int SWIG_arg = 0;
    ofxTLAudioTrack *arg1 = (ofxTLAudioTrack *) 0 ; bool arg2 ; SWIG_check_num_args("ofxTLAudioTrack::setUseFFTEnvelope",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLAudioTrack::setUseFFTEnvelope",1,"ofxTLAudioTrack *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ofxTLAudioTrack::setUseFFTEnvelope",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLAudioTrack,0))){
      SWIG_fail_ptr("ofxTLAudioTrack_setUseFFTEnvelope",1,SWIGTYPE_p_ofxTLAudioTrack); }  arg2 = (lua_toboolean(L, 2)!=0);
    (arg1)->setUseFFTEnvelope(arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLAudioTrack_getUseFFTEnvelope(lua_State* L) { { int SWIG_arg = 0;
    ofxTLAudioTrack *arg1 = (ofxTLAudioTrack *) 0 ; bool result; SWIG_check_num_args("ofxTLAudioTrack::getUseFFTEnvelope",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLAudioTrack::getUseFFTEnvelope",1,"ofxTLAudioTrack *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLAudioTrack,0))){
      SWIG_fail_ptr("ofxTLAudioTrack_getUseFFTEnvelope",1,SWIGTYPE_p_ofxTLAudioTrack); } 
    result = (bool)(arg1)->getUseFFTEnvelope(); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLAudioTrack_boundsChanged(lua_State* L) { { int SWIG_arg = 0;
    ofxTLAudioTrack *arg1 = (ofxTLAudioTrack *) 0 ; ofEventArgs *arg2 = 0 ;
    SWIG_check_num_args("ofxTLAudioTrack::boundsChanged",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLAudioTrack::boundsChanged",1,"ofxTLAudioTrack *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxTLAudioTrack::boundsChanged",2,"ofEventArgs &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLAudioTrack,0))){
      SWIG_fail_ptr("ofxTLAudioTrack_boundsChanged",1,SWIGTYPE_p_ofxTLAudioTrack); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofEventArgs,0))){
      SWIG_fail_ptr("ofxTLAudioTrack_boundsChanged",2,SWIGTYPE_p_ofEventArgs); }  (arg1)->boundsChanged(*arg2); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLAudioTrack_setSpeed(lua_State* L) { { int SWIG_arg = 0; ofxTLAudioTrack *arg1 = (ofxTLAudioTrack *) 0 ;
    float arg2 ; SWIG_check_num_args("ofxTLAudioTrack::setSpeed",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLAudioTrack::setSpeed",1,"ofxTLAudioTrack *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxTLAudioTrack::setSpeed",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLAudioTrack,0))){
      SWIG_fail_ptr("ofxTLAudioTrack_setSpeed",1,SWIGTYPE_p_ofxTLAudioTrack); }  arg2 = (float)lua_tonumber(L, 2);
    (arg1)->setSpeed(arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLAudioTrack_getSpeed(lua_State* L) { { int SWIG_arg = 0; ofxTLAudioTrack *arg1 = (ofxTLAudioTrack *) 0 ;
    float result; SWIG_check_num_args("ofxTLAudioTrack::getSpeed",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLAudioTrack::getSpeed",1,"ofxTLAudioTrack *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLAudioTrack,0))){
      SWIG_fail_ptr("ofxTLAudioTrack_getSpeed",1,SWIGTYPE_p_ofxTLAudioTrack); }  result = (float)(arg1)->getSpeed();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLAudioTrack_setVolume(lua_State* L) { { int SWIG_arg = 0; ofxTLAudioTrack *arg1 = (ofxTLAudioTrack *) 0 ;
    float arg2 ; SWIG_check_num_args("ofxTLAudioTrack::setVolume",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLAudioTrack::setVolume",1,"ofxTLAudioTrack *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxTLAudioTrack::setVolume",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLAudioTrack,0))){
      SWIG_fail_ptr("ofxTLAudioTrack_setVolume",1,SWIGTYPE_p_ofxTLAudioTrack); }  arg2 = (float)lua_tonumber(L, 2);
    (arg1)->setVolume(arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLAudioTrack_setPan(lua_State* L) { { int SWIG_arg = 0; ofxTLAudioTrack *arg1 = (ofxTLAudioTrack *) 0 ;
    float arg2 ; SWIG_check_num_args("ofxTLAudioTrack::setPan",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLAudioTrack::setPan",1,"ofxTLAudioTrack *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxTLAudioTrack::setPan",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLAudioTrack,0))){
      SWIG_fail_ptr("ofxTLAudioTrack_setPan",1,SWIGTYPE_p_ofxTLAudioTrack); }  arg2 = (float)lua_tonumber(L, 2);
    (arg1)->setPan(arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLAudioTrack_setFFTLogAverages__SWIG_0(lua_State* L) { { int SWIG_arg = 0;
    ofxTLAudioTrack *arg1 = (ofxTLAudioTrack *) 0 ; int arg2 ; int arg3 ;
    SWIG_check_num_args("ofxTLAudioTrack::setFFTLogAverages",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLAudioTrack::setFFTLogAverages",1,"ofxTLAudioTrack *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxTLAudioTrack::setFFTLogAverages",2,"int");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxTLAudioTrack::setFFTLogAverages",3,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLAudioTrack,0))){
      SWIG_fail_ptr("ofxTLAudioTrack_setFFTLogAverages",1,SWIGTYPE_p_ofxTLAudioTrack); }  arg2 = (int)lua_tonumber(L, 2);
    arg3 = (int)lua_tonumber(L, 3); (arg1)->setFFTLogAverages(arg2,arg3); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ofxTLAudioTrack_setFFTLogAverages__SWIG_1(lua_State* L) { { int SWIG_arg = 0;
    ofxTLAudioTrack *arg1 = (ofxTLAudioTrack *) 0 ; int arg2 ; SWIG_check_num_args("ofxTLAudioTrack::setFFTLogAverages",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLAudioTrack::setFFTLogAverages",1,"ofxTLAudioTrack *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxTLAudioTrack::setFFTLogAverages",2,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLAudioTrack,0))){
      SWIG_fail_ptr("ofxTLAudioTrack_setFFTLogAverages",1,SWIGTYPE_p_ofxTLAudioTrack); }  arg2 = (int)lua_tonumber(L, 2);
    (arg1)->setFFTLogAverages(arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLAudioTrack_setFFTLogAverages__SWIG_2(lua_State* L) { { int SWIG_arg = 0;
    ofxTLAudioTrack *arg1 = (ofxTLAudioTrack *) 0 ; SWIG_check_num_args("ofxTLAudioTrack::setFFTLogAverages",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLAudioTrack::setFFTLogAverages",1,"ofxTLAudioTrack *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLAudioTrack,0))){
      SWIG_fail_ptr("ofxTLAudioTrack_setFFTLogAverages",1,SWIGTYPE_p_ofxTLAudioTrack); }  (arg1)->setFFTLogAverages();
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLAudioTrack_setFFTLogAverages(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L);
  if (argc == 1) { return _wrap_ofxTLAudioTrack_setFFTLogAverages__SWIG_2(L);}  if (argc == 2) {
    return _wrap_ofxTLAudioTrack_setFFTLogAverages__SWIG_1(L);}  if (argc == 3) {
    return _wrap_ofxTLAudioTrack_setFFTLogAverages__SWIG_0(L);} 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofxTLAudioTrack_setFFTLogAverages'\n"
  "  Possible C/C++ prototypes are:\n" "    ofxTLAudioTrack::setFFTLogAverages(int,int)\n"
  "    ofxTLAudioTrack::setFFTLogAverages(int)\n" "    ofxTLAudioTrack::setFFTLogAverages()\n"); lua_error(L);return 0; }
static int _wrap_ofxTLAudioTrack_getLogAverageMinBandwidth(lua_State* L) { { int SWIG_arg = 0;
    ofxTLAudioTrack *arg1 = (ofxTLAudioTrack *) 0 ; int result;
    SWIG_check_num_args("ofxTLAudioTrack::getLogAverageMinBandwidth",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLAudioTrack::getLogAverageMinBandwidth",1,"ofxTLAudioTrack *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLAudioTrack,0))){
      SWIG_fail_ptr("ofxTLAudioTrack_getLogAverageMinBandwidth",1,SWIGTYPE_p_ofxTLAudioTrack); } 
    result = (int)(arg1)->getLogAverageMinBandwidth(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLAudioTrack_getLogAverageBandsPerOctave(lua_State* L) { { int SWIG_arg = 0;
    ofxTLAudioTrack *arg1 = (ofxTLAudioTrack *) 0 ; int result;
    SWIG_check_num_args("ofxTLAudioTrack::getLogAverageBandsPerOctave",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLAudioTrack::getLogAverageBandsPerOctave",1,"ofxTLAudioTrack *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLAudioTrack,0))){
      SWIG_fail_ptr("ofxTLAudioTrack_getLogAverageBandsPerOctave",1,SWIGTYPE_p_ofxTLAudioTrack); } 
    result = (int)(arg1)->getLogAverageBandsPerOctave(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLAudioTrack_getFFTSize(lua_State* L) { { int SWIG_arg = 0; ofxTLAudioTrack *arg1 = (ofxTLAudioTrack *) 0 ;
    int result; SWIG_check_num_args("ofxTLAudioTrack::getFFTSize",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLAudioTrack::getFFTSize",1,"ofxTLAudioTrack *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLAudioTrack,0))){
      SWIG_fail_ptr("ofxTLAudioTrack_getFFTSize",1,SWIGTYPE_p_ofxTLAudioTrack); }  result = (int)(arg1)->getFFTSize();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLAudioTrack_getFFT(lua_State* L) { { int SWIG_arg = 0; ofxTLAudioTrack *arg1 = (ofxTLAudioTrack *) 0 ;
    vector< float > *result = 0 ; SWIG_check_num_args("ofxTLAudioTrack::getFFT",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLAudioTrack::getFFT",1,"ofxTLAudioTrack *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLAudioTrack,0))){
      SWIG_fail_ptr("ofxTLAudioTrack_getFFT",1,SWIGTYPE_p_ofxTLAudioTrack); }  result = (vector< float > *) &(arg1)->getFFT();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_vectorT_float_t,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ofxTLAudioTrack_getBufferSize(lua_State* L) { { int SWIG_arg = 0;
    ofxTLAudioTrack *arg1 = (ofxTLAudioTrack *) 0 ; int result; SWIG_check_num_args("ofxTLAudioTrack::getBufferSize",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLAudioTrack::getBufferSize",1,"ofxTLAudioTrack *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLAudioTrack,0))){
      SWIG_fail_ptr("ofxTLAudioTrack_getBufferSize",1,SWIGTYPE_p_ofxTLAudioTrack); }  result = (int)(arg1)->getBufferSize();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTLAudioTrack_getCurrentBuffer__SWIG_0(lua_State* L) { { int SWIG_arg = 0;
    ofxTLAudioTrack *arg1 = (ofxTLAudioTrack *) 0 ; int arg2 ; vector< float > *result = 0 ;
    SWIG_check_num_args("ofxTLAudioTrack::getCurrentBuffer",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLAudioTrack::getCurrentBuffer",1,"ofxTLAudioTrack *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxTLAudioTrack::getCurrentBuffer",2,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLAudioTrack,0))){
      SWIG_fail_ptr("ofxTLAudioTrack_getCurrentBuffer",1,SWIGTYPE_p_ofxTLAudioTrack); }  arg2 = (int)lua_tonumber(L, 2);
    result = (vector< float > *) &(arg1)->getCurrentBuffer(arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_vectorT_float_t,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ofxTLAudioTrack_getCurrentBuffer__SWIG_1(lua_State* L) { { int SWIG_arg = 0;
    ofxTLAudioTrack *arg1 = (ofxTLAudioTrack *) 0 ; vector< float > *result = 0 ;
    SWIG_check_num_args("ofxTLAudioTrack::getCurrentBuffer",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLAudioTrack::getCurrentBuffer",1,"ofxTLAudioTrack *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLAudioTrack,0))){
      SWIG_fail_ptr("ofxTLAudioTrack_getCurrentBuffer",1,SWIGTYPE_p_ofxTLAudioTrack); } 
    result = (vector< float > *) &(arg1)->getCurrentBuffer();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_vectorT_float_t,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ofxTLAudioTrack_getCurrentBuffer(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L);
  if (argc == 1) { return _wrap_ofxTLAudioTrack_getCurrentBuffer__SWIG_1(L);}  if (argc == 2) {
    return _wrap_ofxTLAudioTrack_getCurrentBuffer__SWIG_0(L);} 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofxTLAudioTrack_getCurrentBuffer'\n"
  "  Possible C/C++ prototypes are:\n" "    ofxTLAudioTrack::getCurrentBuffer(int)\n"
  "    ofxTLAudioTrack::getCurrentBuffer()\n"); lua_error(L);return 0; }
static int _wrap_ofxTLAudioTrack_getBufferForFrame__SWIG_0(lua_State* L) { { int SWIG_arg = 0;
    ofxTLAudioTrack *arg1 = (ofxTLAudioTrack *) 0 ; int arg2 ; int arg3 ; vector< float > *result = 0 ;
    SWIG_check_num_args("ofxTLAudioTrack::getBufferForFrame",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLAudioTrack::getBufferForFrame",1,"ofxTLAudioTrack *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxTLAudioTrack::getBufferForFrame",2,"int");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxTLAudioTrack::getBufferForFrame",3,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLAudioTrack,0))){
      SWIG_fail_ptr("ofxTLAudioTrack_getBufferForFrame",1,SWIGTYPE_p_ofxTLAudioTrack); }  arg2 = (int)lua_tonumber(L, 2);
    arg3 = (int)lua_tonumber(L, 3); result = (vector< float > *) &(arg1)->getBufferForFrame(arg2,arg3);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_vectorT_float_t,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ofxTLAudioTrack_getBufferForFrame__SWIG_1(lua_State* L) { { int SWIG_arg = 0;
    ofxTLAudioTrack *arg1 = (ofxTLAudioTrack *) 0 ; int arg2 ; vector< float > *result = 0 ;
    SWIG_check_num_args("ofxTLAudioTrack::getBufferForFrame",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLAudioTrack::getBufferForFrame",1,"ofxTLAudioTrack *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxTLAudioTrack::getBufferForFrame",2,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLAudioTrack,0))){
      SWIG_fail_ptr("ofxTLAudioTrack_getBufferForFrame",1,SWIGTYPE_p_ofxTLAudioTrack); }  arg2 = (int)lua_tonumber(L, 2);
    result = (vector< float > *) &(arg1)->getBufferForFrame(arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_vectorT_float_t,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ofxTLAudioTrack_getBufferForFrame(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L);
  if (argc == 2) { return _wrap_ofxTLAudioTrack_getBufferForFrame__SWIG_1(L);}  if (argc == 3) {
    return _wrap_ofxTLAudioTrack_getBufferForFrame__SWIG_0(L);} 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofxTLAudioTrack_getBufferForFrame'\n"
  "  Possible C/C++ prototypes are:\n" "    ofxTLAudioTrack::getBufferForFrame(int,int)\n"
  "    ofxTLAudioTrack::getBufferForFrame(int)\n"); lua_error(L);return 0; }
static int _wrap_ofxTLAudioTrack_getTrack(lua_State* L) { { int SWIG_arg = 0; ofxTLAudioTrack *arg1 = (ofxTLAudioTrack *) 0 ;
    ofxTLTrack *result = 0 ; SWIG_check_num_args("ofxTLAudioTrack::getTrack",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTLAudioTrack::getTrack",1,"ofxTLAudioTrack *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTLAudioTrack,0))){
      SWIG_fail_ptr("ofxTLAudioTrack_getTrack",1,SWIGTYPE_p_ofxTLAudioTrack); } 
    result = (ofxTLTrack *)ofxTLAudioTrack_getTrack(arg1); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxTLTrack,0); SWIG_arg++; 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static void swig_delete_ofxTLAudioTrack(void *obj) {
ofxTLAudioTrack *arg1 = (ofxTLAudioTrack *) obj;
delete arg1;
}
static int _proxy__wrap_new_ofxTLAudioTrack(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ofxTLAudioTrack);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ofxTLAudioTrack_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ofxTLAudioTrack_methods[]= {
    { "loadSoundfile", _wrap_ofxTLAudioTrack_loadSoundfile},
    { "isSoundLoaded", _wrap_ofxTLAudioTrack_isSoundLoaded},
    { "getDuration", _wrap_ofxTLAudioTrack_getDuration},
    { "getSoundfilePath", _wrap_ofxTLAudioTrack_getSoundfilePath},
    { "setFFTDampening", _wrap_ofxTLAudioTrack_setFFTDampening},
    { "getFFTDampening", _wrap_ofxTLAudioTrack_getFFTDampening},
    { "setUseFFTEnvelope", _wrap_ofxTLAudioTrack_setUseFFTEnvelope},
    { "getUseFFTEnvelope", _wrap_ofxTLAudioTrack_getUseFFTEnvelope},
    { "boundsChanged", _wrap_ofxTLAudioTrack_boundsChanged},
    { "setSpeed", _wrap_ofxTLAudioTrack_setSpeed},
    { "getSpeed", _wrap_ofxTLAudioTrack_getSpeed},
    { "setVolume", _wrap_ofxTLAudioTrack_setVolume},
    { "setPan", _wrap_ofxTLAudioTrack_setPan},
    { "setFFTLogAverages", _wrap_ofxTLAudioTrack_setFFTLogAverages},
    { "getLogAverageMinBandwidth", _wrap_ofxTLAudioTrack_getLogAverageMinBandwidth},
    { "getLogAverageBandsPerOctave", _wrap_ofxTLAudioTrack_getLogAverageBandsPerOctave},
    { "getFFTSize", _wrap_ofxTLAudioTrack_getFFTSize},
    { "getFFT", _wrap_ofxTLAudioTrack_getFFT},
    { "getBufferSize", _wrap_ofxTLAudioTrack_getBufferSize},
    { "getCurrentBuffer", _wrap_ofxTLAudioTrack_getCurrentBuffer},
    { "getBufferForFrame", _wrap_ofxTLAudioTrack_getBufferForFrame},
    { "getTrack", _wrap_ofxTLAudioTrack_getTrack},
    {0,0}
};
static swig_lua_method swig_ofxTLAudioTrack_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ofxTLAudioTrack_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ofxTLAudioTrack_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ofxTLAudioTrack_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ofxTLAudioTrack_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ofxTLAudioTrack_Sf_SwigStatic = {
    "ofxTLAudioTrack",
    swig_ofxTLAudioTrack_Sf_SwigStatic_methods,
    swig_ofxTLAudioTrack_Sf_SwigStatic_attributes,
    swig_ofxTLAudioTrack_Sf_SwigStatic_constants,
    swig_ofxTLAudioTrack_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ofxTLAudioTrack_bases[] = {0,0};
static const char *swig_ofxTLAudioTrack_base_names[] = {"ofxTLTrack *",0};
static swig_lua_class _wrap_class_ofxTLAudioTrack = { "ofxTLAudioTrack", "ofxTLAudioTrack", &SWIGTYPE_p_ofxTLAudioTrack,_proxy__wrap_new_ofxTLAudioTrack, swig_delete_ofxTLAudioTrack, swig_ofxTLAudioTrack_methods, swig_ofxTLAudioTrack_attributes, &swig_ofxTLAudioTrack_Sf_SwigStatic, swig_ofxTLAudioTrack_meta, swig_ofxTLAudioTrack_bases, swig_ofxTLAudioTrack_base_names };

static int _wrap_UndoItem_track_set(lua_State* L) { { int SWIG_arg = 0; UndoItem *arg1 = (UndoItem *) 0 ;
    ofxTLTrack *arg2 = (ofxTLTrack *) 0 ; SWIG_check_num_args("UndoItem::track",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UndoItem::track",1,"UndoItem *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("UndoItem::track",2,"ofxTLTrack *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_UndoItem,0))){
      SWIG_fail_ptr("UndoItem_track_set",1,SWIGTYPE_p_UndoItem); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofxTLTrack,SWIG_POINTER_DISOWN))){
      SWIG_fail_ptr("UndoItem_track_set",2,SWIGTYPE_p_ofxTLTrack); }  if (arg1) (arg1)->track = arg2; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_UndoItem_track_get(lua_State* L) { { int SWIG_arg = 0; UndoItem *arg1 = (UndoItem *) 0 ;
    ofxTLTrack *result = 0 ; SWIG_check_num_args("UndoItem::track",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UndoItem::track",1,"UndoItem *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_UndoItem,0))){
      SWIG_fail_ptr("UndoItem_track_get",1,SWIGTYPE_p_UndoItem); }  result = (ofxTLTrack *) ((arg1)->track);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxTLTrack,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_UndoItem_stateBuffer_set(lua_State* L) { { int SWIG_arg = 0; UndoItem *arg1 = (UndoItem *) 0 ;
    string *arg2 = 0 ; string temp2 ; SWIG_check_num_args("UndoItem::stateBuffer",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UndoItem::stateBuffer",1,"UndoItem *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("UndoItem::stateBuffer",2,"string const &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_UndoItem,0))){
      SWIG_fail_ptr("UndoItem_stateBuffer_set",1,SWIGTYPE_p_UndoItem); } 
    temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2; if (arg1) (arg1)->stateBuffer = *arg2; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_UndoItem_stateBuffer_get(lua_State* L) { { int SWIG_arg = 0; UndoItem *arg1 = (UndoItem *) 0 ;
    string *result = 0 ; SWIG_check_num_args("UndoItem::stateBuffer",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UndoItem::stateBuffer",1,"UndoItem *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_UndoItem,0))){
      SWIG_fail_ptr("UndoItem_stateBuffer_get",1,SWIGTYPE_p_UndoItem); }  result = (string *) & ((arg1)->stateBuffer);
    lua_pushlstring(L,result->data(),result->size()); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_new_UndoItem(lua_State* L) { { int SWIG_arg = 0; UndoItem *result = 0 ;
    SWIG_check_num_args("UndoItem::UndoItem",0,0) result = (UndoItem *)new UndoItem();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_UndoItem,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static void swig_delete_UndoItem(void *obj) {
UndoItem *arg1 = (UndoItem *) obj;
delete arg1;
}
static int _proxy__wrap_new_UndoItem(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_UndoItem);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_UndoItem_attributes[] = {
    { "track", _wrap_UndoItem_track_get, _wrap_UndoItem_track_set },
    { "stateBuffer", _wrap_UndoItem_stateBuffer_get, _wrap_UndoItem_stateBuffer_set },
    {0,0,0}
};
static swig_lua_method swig_UndoItem_methods[]= {
    {0,0}
};
static swig_lua_method swig_UndoItem_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_UndoItem_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_UndoItem_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_UndoItem_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_UndoItem_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_UndoItem_Sf_SwigStatic = {
    "UndoItem",
    swig_UndoItem_Sf_SwigStatic_methods,
    swig_UndoItem_Sf_SwigStatic_attributes,
    swig_UndoItem_Sf_SwigStatic_constants,
    swig_UndoItem_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_UndoItem_bases[] = {0};
static const char *swig_UndoItem_base_names[] = {0};
static swig_lua_class _wrap_class_UndoItem = { "UndoItem", "UndoItem", &SWIGTYPE_p_UndoItem,_proxy__wrap_new_UndoItem, swig_delete_UndoItem, swig_UndoItem_methods, swig_UndoItem_attributes, &swig_UndoItem_Sf_SwigStatic, swig_UndoItem_meta, swig_UndoItem_bases, swig_UndoItem_base_names };

static int _wrap_new_ofxTimeline(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *result = 0 ;
    SWIG_check_num_args("ofxTimeline::ofxTimeline",0,0) result = (ofxTimeline *)new ofxTimeline();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxTimeline,1); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ofxTimeline_setup__SWIG_0(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    string *arg2 = 0 ; string temp2 ; SWIG_check_num_args("ofxTimeline::setup",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::setup",1,"ofxTimeline *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxTimeline::setup",2,"string const &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_setup",1,SWIGTYPE_p_ofxTimeline); } 
    temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2; (arg1)->setup((string const &)*arg2); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_setup__SWIG_1(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    SWIG_check_num_args("ofxTimeline::setup",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::setup",1,"ofxTimeline *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_setup",1,SWIGTYPE_p_ofxTimeline); }  (arg1)->setup(); return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ofxTimeline_setup(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 1) {
    return _wrap_ofxTimeline_setup__SWIG_1(L);}  if (argc == 2) { return _wrap_ofxTimeline_setup__SWIG_0(L);} 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofxTimeline_setup'\n" "  Possible C/C++ prototypes are:\n"
  "    ofxTimeline::setup(string const &)\n" "    ofxTimeline::setup()\n"); lua_error(L);return 0; }
static int _wrap_ofxTimeline_moveToThread(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    SWIG_check_num_args("ofxTimeline::moveToThread",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::moveToThread",1,"ofxTimeline *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_moveToThread",1,SWIGTYPE_p_ofxTimeline); }  (arg1)->moveToThread(); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_removeFromThread(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    SWIG_check_num_args("ofxTimeline::removeFromThread",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::removeFromThread",1,"ofxTimeline *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_removeFromThread",1,SWIGTYPE_p_ofxTimeline); }  (arg1)->removeFromThread(); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_toggleEnabled(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    bool result; SWIG_check_num_args("ofxTimeline::toggleEnabled",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::toggleEnabled",1,"ofxTimeline *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_toggleEnabled",1,SWIGTYPE_p_ofxTimeline); }  result = (bool)(arg1)->toggleEnabled();
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_enable(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    SWIG_check_num_args("ofxTimeline::enable",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::enable",1,"ofxTimeline *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_enable",1,SWIGTYPE_p_ofxTimeline); }  (arg1)->enable(); return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ofxTimeline_disable(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    SWIG_check_num_args("ofxTimeline::disable",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::disable",1,"ofxTimeline *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_disable",1,SWIGTYPE_p_ofxTimeline); }  (arg1)->disable(); return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ofxTimeline_getIsEnabled(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    bool result; SWIG_check_num_args("ofxTimeline::getIsEnabled",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::getIsEnabled",1,"ofxTimeline *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_getIsEnabled",1,SWIGTYPE_p_ofxTimeline); }  result = (bool)(arg1)->getIsEnabled();
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_enableEvents(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    SWIG_check_num_args("ofxTimeline::enableEvents",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::enableEvents",1,"ofxTimeline *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_enableEvents",1,SWIGTYPE_p_ofxTimeline); }  (arg1)->enableEvents(); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_disableEvents(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    SWIG_check_num_args("ofxTimeline::disableEvents",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::disableEvents",1,"ofxTimeline *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_disableEvents",1,SWIGTYPE_p_ofxTimeline); }  (arg1)->disableEvents(); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_clear(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    SWIG_check_num_args("ofxTimeline::clear",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::clear",1,"ofxTimeline *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_clear",1,SWIGTYPE_p_ofxTimeline); }  (arg1)->clear(); return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ofxTimeline_reset(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    SWIG_check_num_args("ofxTimeline::reset",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::reset",1,"ofxTimeline *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_reset",1,SWIGTYPE_p_ofxTimeline); }  (arg1)->reset(); return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ofxTimeline_setName(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ; string arg2 ;
    SWIG_check_num_args("ofxTimeline::setName",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::setName",1,"ofxTimeline *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxTimeline::setName",2,"string");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_setName",1,SWIGTYPE_p_ofxTimeline); }  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
    (arg1)->setName(arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_getName(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ; string result;
    SWIG_check_num_args("ofxTimeline::getName",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::getName",1,"ofxTimeline *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_getName",1,SWIGTYPE_p_ofxTimeline); }  result = (arg1)->getName();
    lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ofxTimeline_play(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    SWIG_check_num_args("ofxTimeline::play",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::play",1,"ofxTimeline *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_play",1,SWIGTYPE_p_ofxTimeline); }  (arg1)->play(); return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ofxTimeline_stop(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    SWIG_check_num_args("ofxTimeline::stop",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::stop",1,"ofxTimeline *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_stop",1,SWIGTYPE_p_ofxTimeline); }  (arg1)->stop(); return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ofxTimeline_togglePlay(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ; bool result;
    SWIG_check_num_args("ofxTimeline::togglePlay",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::togglePlay",1,"ofxTimeline *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_togglePlay",1,SWIGTYPE_p_ofxTimeline); }  result = (bool)(arg1)->togglePlay();
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_getIsPlaying(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    bool result; SWIG_check_num_args("ofxTimeline::getIsPlaying",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::getIsPlaying",1,"ofxTimeline *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_getIsPlaying",1,SWIGTYPE_p_ofxTimeline); }  result = (bool)(arg1)->getIsPlaying();
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_getSpacebarTogglesPlay(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    bool result; SWIG_check_num_args("ofxTimeline::getSpacebarTogglesPlay",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::getSpacebarTogglesPlay",1,"ofxTimeline *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_getSpacebarTogglesPlay",1,SWIGTYPE_p_ofxTimeline); } 
    result = (bool)(arg1)->getSpacebarTogglesPlay(); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_setSpacebarTogglePlay(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    bool arg2 ; SWIG_check_num_args("ofxTimeline::setSpacebarTogglePlay",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::setSpacebarTogglePlay",1,"ofxTimeline *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ofxTimeline::setSpacebarTogglePlay",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_setSpacebarTogglePlay",1,SWIGTYPE_p_ofxTimeline); }  arg2 = (lua_toboolean(L, 2)!=0);
    (arg1)->setSpacebarTogglePlay(arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_playSelectedTrack(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    SWIG_check_num_args("ofxTimeline::playSelectedTrack",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::playSelectedTrack",1,"ofxTimeline *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_playSelectedTrack",1,SWIGTYPE_p_ofxTimeline); }  (arg1)->playSelectedTrack(); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_stopSelectedTrack(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    SWIG_check_num_args("ofxTimeline::stopSelectedTrack",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::stopSelectedTrack",1,"ofxTimeline *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_stopSelectedTrack",1,SWIGTYPE_p_ofxTimeline); }  (arg1)->stopSelectedTrack(); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_togglePlaySelectedTrack(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    bool result; SWIG_check_num_args("ofxTimeline::togglePlaySelectedTrack",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::togglePlaySelectedTrack",1,"ofxTimeline *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_togglePlaySelectedTrack",1,SWIGTYPE_p_ofxTimeline); } 
    result = (bool)(arg1)->togglePlaySelectedTrack(); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_setLoopType__SWIG_0(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    ofLoopType arg2 ; ofLoopType *argp2 ; SWIG_check_num_args("ofxTimeline::setLoopType",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::setLoopType",1,"ofxTimeline *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxTimeline::setLoopType",2,"ofLoopType");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_setLoopType",1,SWIGTYPE_p_ofxTimeline); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ofLoopType,0))){
      SWIG_fail_ptr("ofxTimeline_setLoopType",2,SWIGTYPE_p_ofLoopType); }  arg2 = *argp2; (arg1)->setLoopType(arg2);
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_getLoopType(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    ofLoopType result; SWIG_check_num_args("ofxTimeline::getLoopType",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::getLoopType",1,"ofxTimeline *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_getLoopType",1,SWIGTYPE_p_ofxTimeline); }  result = (arg1)->getLoopType(); {
      ofLoopType * resultptr = new ofLoopType(result);
      SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofLoopType,1); SWIG_arg++; }  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ofxTimeline_isDone(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ; bool result;
    SWIG_check_num_args("ofxTimeline::isDone",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::isDone",1,"ofxTimeline *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_isDone",1,SWIGTYPE_p_ofxTimeline); }  result = (bool)(arg1)->isDone();
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_toggleShow(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ; bool result;
    SWIG_check_num_args("ofxTimeline::toggleShow",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::toggleShow",1,"ofxTimeline *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_toggleShow",1,SWIGTYPE_p_ofxTimeline); }  result = (bool)(arg1)->toggleShow();
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_show(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    SWIG_check_num_args("ofxTimeline::show",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::show",1,"ofxTimeline *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_show",1,SWIGTYPE_p_ofxTimeline); }  (arg1)->show(); return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ofxTimeline_hide(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    SWIG_check_num_args("ofxTimeline::hide",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::hide",1,"ofxTimeline *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_hide",1,SWIGTYPE_p_ofxTimeline); }  (arg1)->hide(); return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ofxTimeline_getIsShowing(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    bool result; SWIG_check_num_args("ofxTimeline::getIsShowing",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::getIsShowing",1,"ofxTimeline *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_getIsShowing",1,SWIGTYPE_p_ofxTimeline); }  result = (bool)(arg1)->getIsShowing();
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_draw(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    SWIG_check_num_args("ofxTimeline::draw",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::draw",1,"ofxTimeline *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_draw",1,SWIGTYPE_p_ofxTimeline); }  (arg1)->draw(); return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ofxTimeline_mousePressed(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    ofMouseEventArgs *arg2 = 0 ; SWIG_check_num_args("ofxTimeline::mousePressed",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::mousePressed",1,"ofxTimeline *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxTimeline::mousePressed",2,"ofMouseEventArgs &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_mousePressed",1,SWIGTYPE_p_ofxTimeline); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofMouseEventArgs,0))){
      SWIG_fail_ptr("ofxTimeline_mousePressed",2,SWIGTYPE_p_ofMouseEventArgs); }  (arg1)->mousePressed(*arg2); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_mouseMoved(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    ofMouseEventArgs *arg2 = 0 ; SWIG_check_num_args("ofxTimeline::mouseMoved",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::mouseMoved",1,"ofxTimeline *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxTimeline::mouseMoved",2,"ofMouseEventArgs &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_mouseMoved",1,SWIGTYPE_p_ofxTimeline); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofMouseEventArgs,0))){
      SWIG_fail_ptr("ofxTimeline_mouseMoved",2,SWIGTYPE_p_ofMouseEventArgs); }  (arg1)->mouseMoved(*arg2); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_mouseDragged(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    ofMouseEventArgs *arg2 = 0 ; SWIG_check_num_args("ofxTimeline::mouseDragged",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::mouseDragged",1,"ofxTimeline *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxTimeline::mouseDragged",2,"ofMouseEventArgs &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_mouseDragged",1,SWIGTYPE_p_ofxTimeline); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofMouseEventArgs,0))){
      SWIG_fail_ptr("ofxTimeline_mouseDragged",2,SWIGTYPE_p_ofMouseEventArgs); }  (arg1)->mouseDragged(*arg2); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_mouseReleased(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    ofMouseEventArgs *arg2 = 0 ; SWIG_check_num_args("ofxTimeline::mouseReleased",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::mouseReleased",1,"ofxTimeline *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxTimeline::mouseReleased",2,"ofMouseEventArgs &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_mouseReleased",1,SWIGTYPE_p_ofxTimeline); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofMouseEventArgs,0))){
      SWIG_fail_ptr("ofxTimeline_mouseReleased",2,SWIGTYPE_p_ofMouseEventArgs); }  (arg1)->mouseReleased(*arg2);
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_keyPressed(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    ofKeyEventArgs *arg2 = 0 ; SWIG_check_num_args("ofxTimeline::keyPressed",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::keyPressed",1,"ofxTimeline *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxTimeline::keyPressed",2,"ofKeyEventArgs &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_keyPressed",1,SWIGTYPE_p_ofxTimeline); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofKeyEventArgs,0))){
      SWIG_fail_ptr("ofxTimeline_keyPressed",2,SWIGTYPE_p_ofKeyEventArgs); }  (arg1)->keyPressed(*arg2); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_keyReleased(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    ofKeyEventArgs *arg2 = 0 ; SWIG_check_num_args("ofxTimeline::keyReleased",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::keyReleased",1,"ofxTimeline *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxTimeline::keyReleased",2,"ofKeyEventArgs &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_keyReleased",1,SWIGTYPE_p_ofxTimeline); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofKeyEventArgs,0))){
      SWIG_fail_ptr("ofxTimeline_keyReleased",2,SWIGTYPE_p_ofKeyEventArgs); }  (arg1)->keyReleased(*arg2); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_windowResized(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    ofResizeEventArgs *arg2 = 0 ; SWIG_check_num_args("ofxTimeline::windowResized",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::windowResized",1,"ofxTimeline *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxTimeline::windowResized",2,"ofResizeEventArgs &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_windowResized",1,SWIGTYPE_p_ofxTimeline); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofResizeEventArgs,0))){
      SWIG_fail_ptr("ofxTimeline_windowResized",2,SWIGTYPE_p_ofResizeEventArgs); }  (arg1)->windowResized(*arg2);
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_exit(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    ofEventArgs *arg2 = 0 ; SWIG_check_num_args("ofxTimeline::exit",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::exit",1,"ofxTimeline *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxTimeline::exit",2,"ofEventArgs &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_exit",1,SWIGTYPE_p_ofxTimeline); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofEventArgs,0))){
      SWIG_fail_ptr("ofxTimeline_exit",2,SWIGTYPE_p_ofEventArgs); }  (arg1)->exit(*arg2); return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ofxTimeline_setShowTimeControls(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    bool arg2 ; SWIG_check_num_args("ofxTimeline::setShowTimeControls",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::setShowTimeControls",1,"ofxTimeline *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ofxTimeline::setShowTimeControls",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_setShowTimeControls",1,SWIGTYPE_p_ofxTimeline); }  arg2 = (lua_toboolean(L, 2)!=0);
    (arg1)->setShowTimeControls(arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_setShowTicker(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    bool arg2 ; SWIG_check_num_args("ofxTimeline::setShowTicker",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::setShowTicker",1,"ofxTimeline *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ofxTimeline::setShowTicker",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_setShowTicker",1,SWIGTYPE_p_ofxTimeline); }  arg2 = (lua_toboolean(L, 2)!=0);
    (arg1)->setShowTicker(arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_setShowInoutControl(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    bool arg2 ; SWIG_check_num_args("ofxTimeline::setShowInoutControl",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::setShowInoutControl",1,"ofxTimeline *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ofxTimeline::setShowInoutControl",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_setShowInoutControl",1,SWIGTYPE_p_ofxTimeline); }  arg2 = (lua_toboolean(L, 2)!=0);
    (arg1)->setShowInoutControl(arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_setShowZoomer(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    bool arg2 ; SWIG_check_num_args("ofxTimeline::setShowZoomer",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::setShowZoomer",1,"ofxTimeline *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ofxTimeline::setShowZoomer",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_setShowZoomer",1,SWIGTYPE_p_ofxTimeline); }  arg2 = (lua_toboolean(L, 2)!=0);
    (arg1)->setShowZoomer(arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_setWorkingFolder(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    string arg2 ; SWIG_check_num_args("ofxTimeline::setWorkingFolder",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::setWorkingFolder",1,"ofxTimeline *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxTimeline::setWorkingFolder",2,"string");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_setWorkingFolder",1,SWIGTYPE_p_ofxTimeline); } 
    (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2)); (arg1)->setWorkingFolder(arg2); return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ofxTimeline_getWorkingFolder(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    string result; SWIG_check_num_args("ofxTimeline::getWorkingFolder",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::getWorkingFolder",1,"ofxTimeline *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_getWorkingFolder",1,SWIGTYPE_p_ofxTimeline); }  result = (arg1)->getWorkingFolder();
    lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ofxTimeline_loadTracksFromFolder(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    string arg2 ; SWIG_check_num_args("ofxTimeline::loadTracksFromFolder",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::loadTracksFromFolder",1,"ofxTimeline *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxTimeline::loadTracksFromFolder",2,"string");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_loadTracksFromFolder",1,SWIGTYPE_p_ofxTimeline); } 
    (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2)); (arg1)->loadTracksFromFolder(arg2); return SWIG_arg; fail: SWIGUNUSED; }
   lua_error(L); return 0; }
static int _wrap_ofxTimeline_saveTracksToFolder(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    string arg2 ; SWIG_check_num_args("ofxTimeline::saveTracksToFolder",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::saveTracksToFolder",1,"ofxTimeline *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxTimeline::saveTracksToFolder",2,"string");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_saveTracksToFolder",1,SWIGTYPE_p_ofxTimeline); } 
    (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2)); (arg1)->saveTracksToFolder(arg2); return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ofxTimeline_setDefaultFontPath(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    string arg2 ; SWIG_check_num_args("ofxTimeline::setDefaultFontPath",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::setDefaultFontPath",1,"ofxTimeline *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxTimeline::setDefaultFontPath",2,"string");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_setDefaultFontPath",1,SWIGTYPE_p_ofxTimeline); } 
    (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2)); (arg1)->setDefaultFontPath(arg2); return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ofxTimeline_setFrameRate(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    float arg2 ; SWIG_check_num_args("ofxTimeline::setFrameRate",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::setFrameRate",1,"ofxTimeline *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxTimeline::setFrameRate",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_setFrameRate",1,SWIGTYPE_p_ofxTimeline); }  arg2 = (float)lua_tonumber(L, 2);
    (arg1)->setFrameRate(arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_setDurationInFrames(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    int arg2 ; SWIG_check_num_args("ofxTimeline::setDurationInFrames",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::setDurationInFrames",1,"ofxTimeline *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxTimeline::setDurationInFrames",2,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_setDurationInFrames",1,SWIGTYPE_p_ofxTimeline); }  arg2 = (int)lua_tonumber(L, 2);
    (arg1)->setDurationInFrames(arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_setDurationInSeconds(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    float arg2 ; SWIG_check_num_args("ofxTimeline::setDurationInSeconds",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::setDurationInSeconds",1,"ofxTimeline *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxTimeline::setDurationInSeconds",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_setDurationInSeconds",1,SWIGTYPE_p_ofxTimeline); }  arg2 = (float)lua_tonumber(L, 2);
    (arg1)->setDurationInSeconds(arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_setDurationInMillis(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    unsigned long long arg2 ; SWIG_check_num_args("ofxTimeline::setDurationInMillis",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::setDurationInMillis",1,"ofxTimeline *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxTimeline::setDurationInMillis",2,"unsigned long long");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_setDurationInMillis",1,SWIGTYPE_p_ofxTimeline); } 
    arg2 = (unsigned long long)lua_tonumber(L, 2); (arg1)->setDurationInMillis(arg2); return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ofxTimeline_setDurationInTimecode(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    string arg2 ; SWIG_check_num_args("ofxTimeline::setDurationInTimecode",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::setDurationInTimecode",1,"ofxTimeline *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxTimeline::setDurationInTimecode",2,"string");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_setDurationInTimecode",1,SWIGTYPE_p_ofxTimeline); } 
    (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2)); (arg1)->setDurationInTimecode(arg2); return SWIG_arg; fail: SWIGUNUSED; }
   lua_error(L); return 0; }
static int _wrap_ofxTimeline_getDurationInFrames(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    int result; SWIG_check_num_args("ofxTimeline::getDurationInFrames",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::getDurationInFrames",1,"ofxTimeline *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_getDurationInFrames",1,SWIGTYPE_p_ofxTimeline); }  result = (int)(arg1)->getDurationInFrames();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_getDurationInSeconds(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    float result; SWIG_check_num_args("ofxTimeline::getDurationInSeconds",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::getDurationInSeconds",1,"ofxTimeline *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_getDurationInSeconds",1,SWIGTYPE_p_ofxTimeline); } 
    result = (float)(arg1)->getDurationInSeconds(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_getDurationInMilliseconds(lua_State* L) { { int SWIG_arg = 0;
    ofxTimeline *arg1 = (ofxTimeline *) 0 ; long result; SWIG_check_num_args("ofxTimeline::getDurationInMilliseconds",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::getDurationInMilliseconds",1,"ofxTimeline *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_getDurationInMilliseconds",1,SWIGTYPE_p_ofxTimeline); } 
    result = (long)(arg1)->getDurationInMilliseconds(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_getDurationInTimecode(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    string result; SWIG_check_num_args("ofxTimeline::getDurationInTimecode",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::getDurationInTimecode",1,"ofxTimeline *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_getDurationInTimecode",1,SWIGTYPE_p_ofxTimeline); }  result = (arg1)->getDurationInTimecode();
    lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ofxTimeline_setFrameBased(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    bool arg2 ; SWIG_check_num_args("ofxTimeline::setFrameBased",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::setFrameBased",1,"ofxTimeline *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ofxTimeline::setFrameBased",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_setFrameBased",1,SWIGTYPE_p_ofxTimeline); }  arg2 = (lua_toboolean(L, 2)!=0);
    (arg1)->setFrameBased(arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_getIsFrameBased(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    bool result; SWIG_check_num_args("ofxTimeline::getIsFrameBased",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::getIsFrameBased",1,"ofxTimeline *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_getIsFrameBased",1,SWIGTYPE_p_ofxTimeline); }  result = (bool)(arg1)->getIsFrameBased();
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_setAutosave(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ; bool arg2 ;
    SWIG_check_num_args("ofxTimeline::setAutosave",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::setAutosave",1,"ofxTimeline *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ofxTimeline::setAutosave",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_setAutosave",1,SWIGTYPE_p_ofxTimeline); }  arg2 = (lua_toboolean(L, 2)!=0);
    (arg1)->setAutosave(arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_save(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    SWIG_check_num_args("ofxTimeline::save",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::save",1,"ofxTimeline *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_save",1,SWIGTYPE_p_ofxTimeline); }  (arg1)->save(); return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ofxTimeline_hasUnsavedChanges(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    bool result; SWIG_check_num_args("ofxTimeline::hasUnsavedChanges",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::hasUnsavedChanges",1,"ofxTimeline *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_hasUnsavedChanges",1,SWIGTYPE_p_ofxTimeline); }  result = (bool)(arg1)->hasUnsavedChanges();
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_setCurrentFrame(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    int arg2 ; SWIG_check_num_args("ofxTimeline::setCurrentFrame",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::setCurrentFrame",1,"ofxTimeline *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxTimeline::setCurrentFrame",2,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_setCurrentFrame",1,SWIGTYPE_p_ofxTimeline); }  arg2 = (int)lua_tonumber(L, 2);
    (arg1)->setCurrentFrame(arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_setCurrentTimeSeconds(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    float arg2 ; SWIG_check_num_args("ofxTimeline::setCurrentTimeSeconds",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::setCurrentTimeSeconds",1,"ofxTimeline *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxTimeline::setCurrentTimeSeconds",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_setCurrentTimeSeconds",1,SWIGTYPE_p_ofxTimeline); }  arg2 = (float)lua_tonumber(L, 2);
    (arg1)->setCurrentTimeSeconds(arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_setCurrentTimeMillis(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    unsigned long long arg2 ; SWIG_check_num_args("ofxTimeline::setCurrentTimeMillis",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::setCurrentTimeMillis",1,"ofxTimeline *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxTimeline::setCurrentTimeMillis",2,"unsigned long long");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_setCurrentTimeMillis",1,SWIGTYPE_p_ofxTimeline); } 
    arg2 = (unsigned long long)lua_tonumber(L, 2); (arg1)->setCurrentTimeMillis(arg2); return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ofxTimeline_setPercentComplete(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    float arg2 ; SWIG_check_num_args("ofxTimeline::setPercentComplete",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::setPercentComplete",1,"ofxTimeline *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxTimeline::setPercentComplete",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_setPercentComplete",1,SWIGTYPE_p_ofxTimeline); }  arg2 = (float)lua_tonumber(L, 2);
    (arg1)->setPercentComplete(arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_setCurrentTimecode(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    string arg2 ; SWIG_check_num_args("ofxTimeline::setCurrentTimecode",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::setCurrentTimecode",1,"ofxTimeline *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxTimeline::setCurrentTimecode",2,"string");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_setCurrentTimecode",1,SWIGTYPE_p_ofxTimeline); } 
    (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2)); (arg1)->setCurrentTimecode(arg2); return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ofxTimeline_setCurrentTimeToInPoint(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    SWIG_check_num_args("ofxTimeline::setCurrentTimeToInPoint",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::setCurrentTimeToInPoint",1,"ofxTimeline *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_setCurrentTimeToInPoint",1,SWIGTYPE_p_ofxTimeline); }  (arg1)->setCurrentTimeToInPoint();
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_setCurrentTimeToOutPoint(lua_State* L) { { int SWIG_arg = 0;
    ofxTimeline *arg1 = (ofxTimeline *) 0 ; SWIG_check_num_args("ofxTimeline::setCurrentTimeToOutPoint",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::setCurrentTimeToOutPoint",1,"ofxTimeline *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_setCurrentTimeToOutPoint",1,SWIGTYPE_p_ofxTimeline); }  (arg1)->setCurrentTimeToOutPoint();
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_getCurrentFrame(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    int result; SWIG_check_num_args("ofxTimeline::getCurrentFrame",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::getCurrentFrame",1,"ofxTimeline *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_getCurrentFrame",1,SWIGTYPE_p_ofxTimeline); }  result = (int)(arg1)->getCurrentFrame();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_getCurrentPageIndex(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    int result; SWIG_check_num_args("ofxTimeline::getCurrentPageIndex",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::getCurrentPageIndex",1,"ofxTimeline *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_getCurrentPageIndex",1,SWIGTYPE_p_ofxTimeline); }  result = (int)(arg1)->getCurrentPageIndex();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_getCurrentPageName(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    string result; SWIG_check_num_args("ofxTimeline::getCurrentPageName",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::getCurrentPageName",1,"ofxTimeline *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_getCurrentPageName",1,SWIGTYPE_p_ofxTimeline); }  result = (arg1)->getCurrentPageName();
    lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ofxTimeline_getCurrentTime(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    float result; SWIG_check_num_args("ofxTimeline::getCurrentTime",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::getCurrentTime",1,"ofxTimeline *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_getCurrentTime",1,SWIGTYPE_p_ofxTimeline); }  result = (float)(arg1)->getCurrentTime();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_getCurrentTimeMillis(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    long result; SWIG_check_num_args("ofxTimeline::getCurrentTimeMillis",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::getCurrentTimeMillis",1,"ofxTimeline *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_getCurrentTimeMillis",1,SWIGTYPE_p_ofxTimeline); } 
    result = (long)(arg1)->getCurrentTimeMillis(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_getPercentComplete(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    float result; SWIG_check_num_args("ofxTimeline::getPercentComplete",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::getPercentComplete",1,"ofxTimeline *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_getPercentComplete",1,SWIGTYPE_p_ofxTimeline); }  result = (float)(arg1)->getPercentComplete();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_getCurrentTimecode(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    string result; SWIG_check_num_args("ofxTimeline::getCurrentTimecode",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::getCurrentTimecode",1,"ofxTimeline *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_getCurrentTimecode",1,SWIGTYPE_p_ofxTimeline); }  result = (arg1)->getCurrentTimecode();
    lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ofxTimeline_getQuantizedTime(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    unsigned long long arg2 ; unsigned long long arg3 ; long result; SWIG_check_num_args("ofxTimeline::getQuantizedTime",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::getQuantizedTime",1,"ofxTimeline *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxTimeline::getQuantizedTime",2,"unsigned long long");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxTimeline::getQuantizedTime",3,"unsigned long long");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_getQuantizedTime",1,SWIGTYPE_p_ofxTimeline); }  arg2 = (unsigned long long)lua_tonumber(L, 2);
    arg3 = (unsigned long long)lua_tonumber(L, 3); result = (long)(arg1)->getQuantizedTime(arg2,arg3);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_flagUserChangedValue(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    SWIG_check_num_args("ofxTimeline::flagUserChangedValue",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::flagUserChangedValue",1,"ofxTimeline *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_flagUserChangedValue",1,SWIGTYPE_p_ofxTimeline); }  (arg1)->flagUserChangedValue();
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_getUserChangedValue(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    bool result; SWIG_check_num_args("ofxTimeline::getUserChangedValue",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::getUserChangedValue",1,"ofxTimeline *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_getUserChangedValue",1,SWIGTYPE_p_ofxTimeline); } 
    result = (bool)(arg1)->getUserChangedValue(); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_flagTrackModified(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    ofxTLTrack *arg2 = (ofxTLTrack *) 0 ; SWIG_check_num_args("ofxTimeline::flagTrackModified",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::flagTrackModified",1,"ofxTimeline *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofxTimeline::flagTrackModified",2,"ofxTLTrack *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_flagTrackModified",1,SWIGTYPE_p_ofxTimeline); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofxTLTrack,0))){
      SWIG_fail_ptr("ofxTimeline_flagTrackModified",2,SWIGTYPE_p_ofxTLTrack); }  (arg1)->flagTrackModified(arg2);
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_setInPointAtPercent(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    float arg2 ; SWIG_check_num_args("ofxTimeline::setInPointAtPercent",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::setInPointAtPercent",1,"ofxTimeline *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxTimeline::setInPointAtPercent",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_setInPointAtPercent",1,SWIGTYPE_p_ofxTimeline); }  arg2 = (float)lua_tonumber(L, 2);
    (arg1)->setInPointAtPercent(arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_setInPointAtFrame(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    int arg2 ; SWIG_check_num_args("ofxTimeline::setInPointAtFrame",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::setInPointAtFrame",1,"ofxTimeline *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxTimeline::setInPointAtFrame",2,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_setInPointAtFrame",1,SWIGTYPE_p_ofxTimeline); }  arg2 = (int)lua_tonumber(L, 2);
    (arg1)->setInPointAtFrame(arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_setInPointAtSeconds(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    float arg2 ; SWIG_check_num_args("ofxTimeline::setInPointAtSeconds",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::setInPointAtSeconds",1,"ofxTimeline *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxTimeline::setInPointAtSeconds",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_setInPointAtSeconds",1,SWIGTYPE_p_ofxTimeline); }  arg2 = (float)lua_tonumber(L, 2);
    (arg1)->setInPointAtSeconds(arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_setInPointAtMillis(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    unsigned long long arg2 ; SWIG_check_num_args("ofxTimeline::setInPointAtMillis",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::setInPointAtMillis",1,"ofxTimeline *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxTimeline::setInPointAtMillis",2,"unsigned long long");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_setInPointAtMillis",1,SWIGTYPE_p_ofxTimeline); } 
    arg2 = (unsigned long long)lua_tonumber(L, 2); (arg1)->setInPointAtMillis(arg2); return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ofxTimeline_setInPointAtTimecode(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    string arg2 ; SWIG_check_num_args("ofxTimeline::setInPointAtTimecode",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::setInPointAtTimecode",1,"ofxTimeline *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxTimeline::setInPointAtTimecode",2,"string");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_setInPointAtTimecode",1,SWIGTYPE_p_ofxTimeline); } 
    (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2)); (arg1)->setInPointAtTimecode(arg2); return SWIG_arg; fail: SWIGUNUSED; }
   lua_error(L); return 0; }
static int _wrap_ofxTimeline_setInPointAtPlayhead(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    SWIG_check_num_args("ofxTimeline::setInPointAtPlayhead",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::setInPointAtPlayhead",1,"ofxTimeline *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_setInPointAtPlayhead",1,SWIGTYPE_p_ofxTimeline); }  (arg1)->setInPointAtPlayhead();
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_setOutPointAtPercent(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    float arg2 ; SWIG_check_num_args("ofxTimeline::setOutPointAtPercent",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::setOutPointAtPercent",1,"ofxTimeline *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxTimeline::setOutPointAtPercent",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_setOutPointAtPercent",1,SWIGTYPE_p_ofxTimeline); }  arg2 = (float)lua_tonumber(L, 2);
    (arg1)->setOutPointAtPercent(arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_setOutPointAtFrame(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    float arg2 ; SWIG_check_num_args("ofxTimeline::setOutPointAtFrame",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::setOutPointAtFrame",1,"ofxTimeline *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxTimeline::setOutPointAtFrame",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_setOutPointAtFrame",1,SWIGTYPE_p_ofxTimeline); }  arg2 = (float)lua_tonumber(L, 2);
    (arg1)->setOutPointAtFrame(arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_setOutPointAtSeconds(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    float arg2 ; SWIG_check_num_args("ofxTimeline::setOutPointAtSeconds",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::setOutPointAtSeconds",1,"ofxTimeline *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxTimeline::setOutPointAtSeconds",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_setOutPointAtSeconds",1,SWIGTYPE_p_ofxTimeline); }  arg2 = (float)lua_tonumber(L, 2);
    (arg1)->setOutPointAtSeconds(arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_setOutPointAtMillis(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    unsigned long long arg2 ; SWIG_check_num_args("ofxTimeline::setOutPointAtMillis",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::setOutPointAtMillis",1,"ofxTimeline *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxTimeline::setOutPointAtMillis",2,"unsigned long long");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_setOutPointAtMillis",1,SWIGTYPE_p_ofxTimeline); } 
    arg2 = (unsigned long long)lua_tonumber(L, 2); (arg1)->setOutPointAtMillis(arg2); return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ofxTimeline_setOutPointAtTimecode(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    string arg2 ; SWIG_check_num_args("ofxTimeline::setOutPointAtTimecode",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::setOutPointAtTimecode",1,"ofxTimeline *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxTimeline::setOutPointAtTimecode",2,"string");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_setOutPointAtTimecode",1,SWIGTYPE_p_ofxTimeline); } 
    (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2)); (arg1)->setOutPointAtTimecode(arg2); return SWIG_arg; fail: SWIGUNUSED; }
   lua_error(L); return 0; }
static int _wrap_ofxTimeline_setOutPointAtPlayhead(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    SWIG_check_num_args("ofxTimeline::setOutPointAtPlayhead",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::setOutPointAtPlayhead",1,"ofxTimeline *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_setOutPointAtPlayhead",1,SWIGTYPE_p_ofxTimeline); }  (arg1)->setOutPointAtPlayhead();
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_setEditableHeaders(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    bool arg2 ; SWIG_check_num_args("ofxTimeline::setEditableHeaders",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::setEditableHeaders",1,"ofxTimeline *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ofxTimeline::setEditableHeaders",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_setEditableHeaders",1,SWIGTYPE_p_ofxTimeline); }  arg2 = (lua_toboolean(L, 2)!=0);
    (arg1)->setEditableHeaders(arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_areHeadersEditable(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    bool result; SWIG_check_num_args("ofxTimeline::areHeadersEditable",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::areHeadersEditable",1,"ofxTimeline *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_areHeadersEditable",1,SWIGTYPE_p_ofxTimeline); }  result = (bool)(arg1)->areHeadersEditable();
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_setMinimalHeaders(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    bool arg2 ; SWIG_check_num_args("ofxTimeline::setMinimalHeaders",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::setMinimalHeaders",1,"ofxTimeline *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ofxTimeline::setMinimalHeaders",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_setMinimalHeaders",1,SWIGTYPE_p_ofxTimeline); }  arg2 = (lua_toboolean(L, 2)!=0);
    (arg1)->setMinimalHeaders(arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_areHeadersMinimal(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    bool result; SWIG_check_num_args("ofxTimeline::areHeadersMinimal",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::areHeadersMinimal",1,"ofxTimeline *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_areHeadersMinimal",1,SWIGTYPE_p_ofxTimeline); }  result = (bool)(arg1)->areHeadersMinimal();
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_toggleShowFooters(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    bool result; SWIG_check_num_args("ofxTimeline::toggleShowFooters",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::toggleShowFooters",1,"ofxTimeline *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_toggleShowFooters",1,SWIGTYPE_p_ofxTimeline); }  result = (bool)(arg1)->toggleShowFooters();
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_setFootersHidden(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    bool arg2 ; SWIG_check_num_args("ofxTimeline::setFootersHidden",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::setFootersHidden",1,"ofxTimeline *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ofxTimeline::setFootersHidden",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_setFootersHidden",1,SWIGTYPE_p_ofxTimeline); }  arg2 = (lua_toboolean(L, 2)!=0);
    (arg1)->setFootersHidden(arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_areFootersHidden(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    bool result; SWIG_check_num_args("ofxTimeline::areFootersHidden",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::areFootersHidden",1,"ofxTimeline *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_areFootersHidden",1,SWIGTYPE_p_ofxTimeline); }  result = (bool)(arg1)->areFootersHidden();
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_setInOutRange(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    ofRange arg2 ; ofRange *argp2 ; SWIG_check_num_args("ofxTimeline::setInOutRange",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::setInOutRange",1,"ofxTimeline *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxTimeline::setInOutRange",2,"ofRange");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_setInOutRange",1,SWIGTYPE_p_ofxTimeline); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ofRange,0))){
      SWIG_fail_ptr("ofxTimeline_setInOutRange",2,SWIGTYPE_p_ofRange); }  arg2 = *argp2; (arg1)->setInOutRange(arg2);
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_setInOutRangeMillis(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    unsigned long long arg2 ; unsigned long long arg3 ; SWIG_check_num_args("ofxTimeline::setInOutRangeMillis",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::setInOutRangeMillis",1,"ofxTimeline *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxTimeline::setInOutRangeMillis",2,"unsigned long long");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxTimeline::setInOutRangeMillis",3,"unsigned long long");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_setInOutRangeMillis",1,SWIGTYPE_p_ofxTimeline); } 
    arg2 = (unsigned long long)lua_tonumber(L, 2); arg3 = (unsigned long long)lua_tonumber(L, 3);
    (arg1)->setInOutRangeMillis(arg2,arg3); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_clearInOut(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    SWIG_check_num_args("ofxTimeline::clearInOut",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::clearInOut",1,"ofxTimeline *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_clearInOut",1,SWIGTYPE_p_ofxTimeline); }  (arg1)->clearInOut(); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_getInOutRange(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    ofRange result; SWIG_check_num_args("ofxTimeline::getInOutRange",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::getInOutRange",1,"ofxTimeline *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_getInOutRange",1,SWIGTYPE_p_ofxTimeline); }  result = (arg1)->getInOutRange(); {
      ofRange * resultptr = new ofRange(result); SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofRange,1); SWIG_arg++; } 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_getInOutRangeMillis(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    ofLongRange result; SWIG_check_num_args("ofxTimeline::getInOutRangeMillis",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::getInOutRangeMillis",1,"ofxTimeline *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_getInOutRangeMillis",1,SWIGTYPE_p_ofxTimeline); }  result = (arg1)->getInOutRangeMillis(); {
      ofLongRange * resultptr = new ofLongRange(result);
      SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofLongRange,1); SWIG_arg++; }  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ofxTimeline_getInFrame(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ; int result;
    SWIG_check_num_args("ofxTimeline::getInFrame",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::getInFrame",1,"ofxTimeline *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_getInFrame",1,SWIGTYPE_p_ofxTimeline); }  result = (int)(arg1)->getInFrame();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_getInTimeInSeconds(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    float result; SWIG_check_num_args("ofxTimeline::getInTimeInSeconds",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::getInTimeInSeconds",1,"ofxTimeline *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_getInTimeInSeconds",1,SWIGTYPE_p_ofxTimeline); }  result = (float)(arg1)->getInTimeInSeconds();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_getInTimeInMillis(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    long result; SWIG_check_num_args("ofxTimeline::getInTimeInMillis",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::getInTimeInMillis",1,"ofxTimeline *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_getInTimeInMillis",1,SWIGTYPE_p_ofxTimeline); }  result = (long)(arg1)->getInTimeInMillis();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_getInPointTimecode(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    string result; SWIG_check_num_args("ofxTimeline::getInPointTimecode",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::getInPointTimecode",1,"ofxTimeline *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_getInPointTimecode",1,SWIGTYPE_p_ofxTimeline); }  result = (arg1)->getInPointTimecode();
    lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ofxTimeline_getOutFrame(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ; int result;
    SWIG_check_num_args("ofxTimeline::getOutFrame",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::getOutFrame",1,"ofxTimeline *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_getOutFrame",1,SWIGTYPE_p_ofxTimeline); }  result = (int)(arg1)->getOutFrame();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_getOutTimeInSeconds(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    float result; SWIG_check_num_args("ofxTimeline::getOutTimeInSeconds",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::getOutTimeInSeconds",1,"ofxTimeline *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_getOutTimeInSeconds",1,SWIGTYPE_p_ofxTimeline); } 
    result = (float)(arg1)->getOutTimeInSeconds(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_getOutTimeInMillis(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    long result; SWIG_check_num_args("ofxTimeline::getOutTimeInMillis",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::getOutTimeInMillis",1,"ofxTimeline *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_getOutTimeInMillis",1,SWIGTYPE_p_ofxTimeline); }  result = (long)(arg1)->getOutTimeInMillis();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_getOutPointTimecode(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    string result; SWIG_check_num_args("ofxTimeline::getOutPointTimecode",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::getOutPointTimecode",1,"ofxTimeline *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_getOutPointTimecode",1,SWIGTYPE_p_ofxTimeline); }  result = (arg1)->getOutPointTimecode();
    lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ofxTimeline_setOffset(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    ofVec2f arg2 ; ofVec2f *argp2 ; SWIG_check_num_args("ofxTimeline::setOffset",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::setOffset",1,"ofxTimeline *");
    if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxTimeline::setOffset",2,"ofVec2f");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_setOffset",1,SWIGTYPE_p_ofxTimeline); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ofVec2f,0))){
      SWIG_fail_ptr("ofxTimeline_setOffset",2,SWIGTYPE_p_ofVec2f); }  arg2 = *argp2; (arg1)->setOffset(arg2); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_setLockWidthToWindow(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    bool arg2 ; SWIG_check_num_args("ofxTimeline::setLockWidthToWindow",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::setLockWidthToWindow",1,"ofxTimeline *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ofxTimeline::setLockWidthToWindow",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_setLockWidthToWindow",1,SWIGTYPE_p_ofxTimeline); }  arg2 = (lua_toboolean(L, 2)!=0);
    (arg1)->setLockWidthToWindow(arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_getLockWidthToWindow(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    bool result; SWIG_check_num_args("ofxTimeline::getLockWidthToWindow",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::getLockWidthToWindow",1,"ofxTimeline *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_getLockWidthToWindow",1,SWIGTYPE_p_ofxTimeline); } 
    result = (bool)(arg1)->getLockWidthToWindow(); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_setWidth(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ; float arg2 ;
    SWIG_check_num_args("ofxTimeline::setWidth",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::setWidth",1,"ofxTimeline *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxTimeline::setWidth",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_setWidth",1,SWIGTYPE_p_ofxTimeline); }  arg2 = (float)lua_tonumber(L, 2);
    (arg1)->setWidth(arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_setHeight(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ; float arg2 ;
    SWIG_check_num_args("ofxTimeline::setHeight",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::setHeight",1,"ofxTimeline *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxTimeline::setHeight",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_setHeight",1,SWIGTYPE_p_ofxTimeline); }  arg2 = (float)lua_tonumber(L, 2);
    (arg1)->setHeight(arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_collapseAllTracks(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    SWIG_check_num_args("ofxTimeline::collapseAllTracks",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::collapseAllTracks",1,"ofxTimeline *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_collapseAllTracks",1,SWIGTYPE_p_ofxTimeline); }  (arg1)->collapseAllTracks(); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_getDrawRect(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    ofRectangle result; SWIG_check_num_args("ofxTimeline::getDrawRect",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::getDrawRect",1,"ofxTimeline *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_getDrawRect",1,SWIGTYPE_p_ofxTimeline); }  result = (arg1)->getDrawRect(); {
      ofRectangle * resultptr = new ofRectangle(result);
      SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofRectangle,1); SWIG_arg++; }  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ofxTimeline_getWidth(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ; float result;
    SWIG_check_num_args("ofxTimeline::getWidth",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::getWidth",1,"ofxTimeline *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_getWidth",1,SWIGTYPE_p_ofxTimeline); }  result = (float)(arg1)->getWidth();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_getHeight(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ; float result;
    SWIG_check_num_args("ofxTimeline::getHeight",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::getHeight",1,"ofxTimeline *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_getHeight",1,SWIGTYPE_p_ofxTimeline); }  result = (float)(arg1)->getHeight();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_getTopRight(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    ofVec2f result; SWIG_check_num_args("ofxTimeline::getTopRight",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::getTopRight",1,"ofxTimeline *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_getTopRight",1,SWIGTYPE_p_ofxTimeline); }  result = (arg1)->getTopRight(); {
      ofVec2f * resultptr = new ofVec2f(result); SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec2f,1); SWIG_arg++; } 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_getTopLeft(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    ofVec2f result; SWIG_check_num_args("ofxTimeline::getTopLeft",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::getTopLeft",1,"ofxTimeline *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_getTopLeft",1,SWIGTYPE_p_ofxTimeline); }  result = (arg1)->getTopLeft(); {
      ofVec2f * resultptr = new ofVec2f(result); SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec2f,1); SWIG_arg++; } 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_getBottomLeft(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    ofVec2f result; SWIG_check_num_args("ofxTimeline::getBottomLeft",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::getBottomLeft",1,"ofxTimeline *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_getBottomLeft",1,SWIGTYPE_p_ofxTimeline); }  result = (arg1)->getBottomLeft(); {
      ofVec2f * resultptr = new ofVec2f(result); SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec2f,1); SWIG_arg++; } 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_getBottomRight(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    ofVec2f result; SWIG_check_num_args("ofxTimeline::getBottomRight",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::getBottomRight",1,"ofxTimeline *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_getBottomRight",1,SWIGTYPE_p_ofxTimeline); }  result = (arg1)->getBottomRight(); {
      ofVec2f * resultptr = new ofVec2f(result); SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec2f,1); SWIG_arg++; } 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_setBPM(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ; float arg2 ;
    SWIG_check_num_args("ofxTimeline::setBPM",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::setBPM",1,"ofxTimeline *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxTimeline::setBPM",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_setBPM",1,SWIGTYPE_p_ofxTimeline); }  arg2 = (float)lua_tonumber(L, 2); (arg1)->setBPM(arg2);
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_getBPM(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ; float result;
    SWIG_check_num_args("ofxTimeline::getBPM",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::getBPM",1,"ofxTimeline *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_getBPM",1,SWIGTYPE_p_ofxTimeline); }  result = (float)(arg1)->getBPM();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_toggleSnapToBPM(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    bool result; SWIG_check_num_args("ofxTimeline::toggleSnapToBPM",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::toggleSnapToBPM",1,"ofxTimeline *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_toggleSnapToBPM",1,SWIGTYPE_p_ofxTimeline); }  result = (bool)(arg1)->toggleSnapToBPM();
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_enableSnapToBPM(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    bool arg2 ; SWIG_check_num_args("ofxTimeline::enableSnapToBPM",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::enableSnapToBPM",1,"ofxTimeline *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ofxTimeline::enableSnapToBPM",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_enableSnapToBPM",1,SWIGTYPE_p_ofxTimeline); }  arg2 = (lua_toboolean(L, 2)!=0);
    (arg1)->enableSnapToBPM(arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_getSnapToBPM(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    bool result; SWIG_check_num_args("ofxTimeline::getSnapToBPM",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::getSnapToBPM",1,"ofxTimeline *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_getSnapToBPM",1,SWIGTYPE_p_ofxTimeline); }  result = (bool)(arg1)->getSnapToBPM();
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_toggleShowBPMGrid(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    bool result; SWIG_check_num_args("ofxTimeline::toggleShowBPMGrid",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::toggleShowBPMGrid",1,"ofxTimeline *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_toggleShowBPMGrid",1,SWIGTYPE_p_ofxTimeline); }  result = (bool)(arg1)->toggleShowBPMGrid();
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_setShowBPMGrid(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    bool arg2 ; SWIG_check_num_args("ofxTimeline::setShowBPMGrid",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::setShowBPMGrid",1,"ofxTimeline *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ofxTimeline::setShowBPMGrid",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_setShowBPMGrid",1,SWIGTYPE_p_ofxTimeline); }  arg2 = (lua_toboolean(L, 2)!=0);
    (arg1)->setShowBPMGrid(arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_getShowBPMGrid(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    bool result; SWIG_check_num_args("ofxTimeline::getShowBPMGrid",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::getShowBPMGrid",1,"ofxTimeline *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_getShowBPMGrid",1,SWIGTYPE_p_ofxTimeline); }  result = (bool)(arg1)->getShowBPMGrid();
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_toggleSnapToOtherKeyframes(lua_State* L) { { int SWIG_arg = 0;
    ofxTimeline *arg1 = (ofxTimeline *) 0 ; bool result; SWIG_check_num_args("ofxTimeline::toggleSnapToOtherKeyframes",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::toggleSnapToOtherKeyframes",1,"ofxTimeline *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_toggleSnapToOtherKeyframes",1,SWIGTYPE_p_ofxTimeline); } 
    result = (bool)(arg1)->toggleSnapToOtherKeyframes(); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_enableSnapToOtherKeyframes(lua_State* L) { { int SWIG_arg = 0;
    ofxTimeline *arg1 = (ofxTimeline *) 0 ; bool arg2 ; SWIG_check_num_args("ofxTimeline::enableSnapToOtherKeyframes",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::enableSnapToOtherKeyframes",1,"ofxTimeline *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ofxTimeline::enableSnapToOtherKeyframes",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_enableSnapToOtherKeyframes",1,SWIGTYPE_p_ofxTimeline); }  arg2 = (lua_toboolean(L, 2)!=0);
    (arg1)->enableSnapToOtherKeyframes(arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_getSnapToOtherElements(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    bool result; SWIG_check_num_args("ofxTimeline::getSnapToOtherElements",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::getSnapToOtherElements",1,"ofxTimeline *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_getSnapToOtherElements",1,SWIGTYPE_p_ofxTimeline); } 
    result = (bool)(arg1)->getSnapToOtherElements(); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_setMovePlayheadOnPaste(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    bool arg2 ; SWIG_check_num_args("ofxTimeline::setMovePlayheadOnPaste",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::setMovePlayheadOnPaste",1,"ofxTimeline *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ofxTimeline::setMovePlayheadOnPaste",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_setMovePlayheadOnPaste",1,SWIGTYPE_p_ofxTimeline); }  arg2 = (lua_toboolean(L, 2)!=0);
    (arg1)->setMovePlayheadOnPaste(arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_getMovePlayheadOnPaste(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    bool result; SWIG_check_num_args("ofxTimeline::getMovePlayheadOnPaste",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::getMovePlayheadOnPaste",1,"ofxTimeline *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_getMovePlayheadOnPaste",1,SWIGTYPE_p_ofxTimeline); } 
    result = (bool)(arg1)->getMovePlayheadOnPaste(); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_getPasteboard(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    vector< string > *result = 0 ; SWIG_check_num_args("ofxTimeline::getPasteboard",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::getPasteboard",1,"ofxTimeline *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_getPasteboard",1,SWIGTYPE_p_ofxTimeline); } 
    result = (vector< string > *) &(arg1)->getPasteboard();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_vectorT_std__string_t,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ofxTimeline_enableUndo(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ; bool arg2 ;
    SWIG_check_num_args("ofxTimeline::enableUndo",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::enableUndo",1,"ofxTimeline *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ofxTimeline::enableUndo",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_enableUndo",1,SWIGTYPE_p_ofxTimeline); }  arg2 = (lua_toboolean(L, 2)!=0);
    (arg1)->enableUndo(arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_undo(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    SWIG_check_num_args("ofxTimeline::undo",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::undo",1,"ofxTimeline *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_undo",1,SWIGTYPE_p_ofxTimeline); }  (arg1)->undo(); return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ofxTimeline_redo(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    SWIG_check_num_args("ofxTimeline::redo",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::redo",1,"ofxTimeline *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_redo",1,SWIGTYPE_p_ofxTimeline); }  (arg1)->redo(); return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ofxTimeline_setMovePlayheadOnDrag(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    bool arg2 ; SWIG_check_num_args("ofxTimeline::setMovePlayheadOnDrag",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::setMovePlayheadOnDrag",1,"ofxTimeline *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ofxTimeline::setMovePlayheadOnDrag",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_setMovePlayheadOnDrag",1,SWIGTYPE_p_ofxTimeline); }  arg2 = (lua_toboolean(L, 2)!=0);
    (arg1)->setMovePlayheadOnDrag(arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_getMovePlayheadOnDrag(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    bool result; SWIG_check_num_args("ofxTimeline::getMovePlayheadOnDrag",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::getMovePlayheadOnDrag",1,"ofxTimeline *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_getMovePlayheadOnDrag",1,SWIGTYPE_p_ofxTimeline); } 
    result = (bool)(arg1)->getMovePlayheadOnDrag(); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_unselectAll(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    SWIG_check_num_args("ofxTimeline::unselectAll",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::unselectAll",1,"ofxTimeline *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_unselectAll",1,SWIGTYPE_p_ofxTimeline); }  (arg1)->unselectAll(); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_addPage__SWIG_0(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    string arg2 ; bool arg3 ; SWIG_check_num_args("ofxTimeline::addPage",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::addPage",1,"ofxTimeline *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxTimeline::addPage",2,"string");
    if(!lua_isboolean(L,3)) SWIG_fail_arg("ofxTimeline::addPage",3,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_addPage",1,SWIGTYPE_p_ofxTimeline); }  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
    arg3 = (lua_toboolean(L, 3)!=0); (arg1)->addPage(arg2,arg3); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_addPage__SWIG_1(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    string arg2 ; SWIG_check_num_args("ofxTimeline::addPage",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::addPage",1,"ofxTimeline *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxTimeline::addPage",2,"string");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_addPage",1,SWIGTYPE_p_ofxTimeline); }  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
    (arg1)->addPage(arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_addPage(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) {
    return _wrap_ofxTimeline_addPage__SWIG_1(L);}  if (argc == 3) { return _wrap_ofxTimeline_addPage__SWIG_0(L);} 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofxTimeline_addPage'\n"
  "  Possible C/C++ prototypes are:\n" "    ofxTimeline::addPage(string,bool)\n" "    ofxTimeline::addPage(string)\n");
  lua_error(L);return 0; }
static int _wrap_ofxTimeline_setPageName__SWIG_0(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    string arg2 ; SWIG_check_num_args("ofxTimeline::setPageName",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::setPageName",1,"ofxTimeline *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxTimeline::setPageName",2,"string");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_setPageName",1,SWIGTYPE_p_ofxTimeline); }  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
    (arg1)->setPageName(arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_setPageName__SWIG_1(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    string arg2 ; int arg3 ; SWIG_check_num_args("ofxTimeline::setPageName",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::setPageName",1,"ofxTimeline *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxTimeline::setPageName",2,"string");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxTimeline::setPageName",3,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_setPageName",1,SWIGTYPE_p_ofxTimeline); }  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
    arg3 = (int)lua_tonumber(L, 3); (arg1)->setPageName(arg2,arg3); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ofxTimeline_setPageName(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L);
  if (argc == 2) { return _wrap_ofxTimeline_setPageName__SWIG_0(L);}  if (argc == 3) {
    return _wrap_ofxTimeline_setPageName__SWIG_1(L);} 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofxTimeline_setPageName'\n"
  "  Possible C/C++ prototypes are:\n" "    ofxTimeline::setPageName(string)\n" "    ofxTimeline::setPageName(string,int)\n");
  lua_error(L);return 0; }
static int _wrap_ofxTimeline_setCurrentPage__SWIG_0(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    string arg2 ; SWIG_check_num_args("ofxTimeline::setCurrentPage",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::setCurrentPage",1,"ofxTimeline *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxTimeline::setCurrentPage",2,"string");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_setCurrentPage",1,SWIGTYPE_p_ofxTimeline); } 
    (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2)); (arg1)->setCurrentPage(arg2); return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ofxTimeline_setCurrentPage__SWIG_1(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    int arg2 ; SWIG_check_num_args("ofxTimeline::setCurrentPage",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::setCurrentPage",1,"ofxTimeline *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxTimeline::setCurrentPage",2,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_setCurrentPage",1,SWIGTYPE_p_ofxTimeline); }  arg2 = (int)lua_tonumber(L, 2);
    (arg1)->setCurrentPage(arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_setCurrentPage(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L);
  if (argc == 2) { int _v = 0; { { _v = lua_isnumber(L,argv[1]); } }  if (!_v) goto check_1;
    return _wrap_ofxTimeline_setCurrentPage__SWIG_1(L);}  check_1: if (argc == 2) {
    return _wrap_ofxTimeline_setCurrentPage__SWIG_0(L);} 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofxTimeline_setCurrentPage'\n"
  "  Possible C/C++ prototypes are:\n" "    ofxTimeline::setCurrentPage(string)\n" "    ofxTimeline::setCurrentPage(int)\n");
  lua_error(L);return 0; }
static int _wrap_ofxTimeline_removePage__SWIG_0(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    string arg2 ; SWIG_check_num_args("ofxTimeline::removePage",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::removePage",1,"ofxTimeline *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxTimeline::removePage",2,"string");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_removePage",1,SWIGTYPE_p_ofxTimeline); }  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
    (arg1)->removePage(arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_removePage__SWIG_1(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    ofxTLPage *arg2 = (ofxTLPage *) 0 ; SWIG_check_num_args("ofxTimeline::removePage",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::removePage",1,"ofxTimeline *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofxTimeline::removePage",2,"ofxTLPage *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_removePage",1,SWIGTYPE_p_ofxTimeline); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofxTLPage,0))){
      SWIG_fail_ptr("ofxTimeline_removePage",2,SWIGTYPE_p_ofxTLPage); }  (arg1)->removePage(arg2); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_removePage(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 2) {
    int _v = 0; { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofxTLPage, 0)) { _v = 0; }
         else { _v = 1; }  } }  if (!_v) goto check_1; return _wrap_ofxTimeline_removePage__SWIG_1(L);}  check_1:
  if (argc == 2) { return _wrap_ofxTimeline_removePage__SWIG_0(L);} 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofxTimeline_removePage'\n"
  "  Possible C/C++ prototypes are:\n" "    ofxTimeline::removePage(string)\n" "    ofxTimeline::removePage(ofxTLPage *)\n");
  lua_error(L);return 0; }
static int _wrap_ofxTimeline_isModal(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ; bool result;
    SWIG_check_num_args("ofxTimeline::isModal",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::isModal",1,"ofxTimeline *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_isModal",1,SWIGTYPE_p_ofxTimeline); }  result = (bool)(arg1)->isModal();
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_getModalTrack(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    ofxTLTrack *result = 0 ; SWIG_check_num_args("ofxTimeline::getModalTrack",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::getModalTrack",1,"ofxTimeline *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_getModalTrack",1,SWIGTYPE_p_ofxTimeline); }  result = (ofxTLTrack *)(arg1)->getModalTrack();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxTLTrack,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ofxTimeline_getFocusedTrack(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    ofxTLTrack *result = 0 ; SWIG_check_num_args("ofxTimeline::getFocusedTrack",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::getFocusedTrack",1,"ofxTimeline *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_getFocusedTrack",1,SWIGTYPE_p_ofxTimeline); } 
    result = (ofxTLTrack *)(arg1)->getFocusedTrack(); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxTLTrack,0); SWIG_arg++; 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_setFocusedTrack(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    ofxTLTrack *arg2 = (ofxTLTrack *) 0 ; SWIG_check_num_args("ofxTimeline::setFocusedTrack",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::setFocusedTrack",1,"ofxTimeline *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofxTimeline::setFocusedTrack",2,"ofxTLTrack *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_setFocusedTrack",1,SWIGTYPE_p_ofxTimeline); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofxTLTrack,0))){
      SWIG_fail_ptr("ofxTimeline_setFocusedTrack",2,SWIGTYPE_p_ofxTLTrack); }  (arg1)->setFocusedTrack(arg2); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_getTotalSelectedItems(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    int result; SWIG_check_num_args("ofxTimeline::getTotalSelectedItems",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::getTotalSelectedItems",1,"ofxTimeline *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_getTotalSelectedItems",1,SWIGTYPE_p_ofxTimeline); } 
    result = (int)(arg1)->getTotalSelectedItems(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_getEarliestTime(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    unsigned long long result; SWIG_check_num_args("ofxTimeline::getEarliestTime",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::getEarliestTime",1,"ofxTimeline *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_getEarliestTime",1,SWIGTYPE_p_ofxTimeline); } 
    result = (unsigned long long)(arg1)->getEarliestTime(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_getLatestTime(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    unsigned long long result; SWIG_check_num_args("ofxTimeline::getLatestTime",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::getLatestTime",1,"ofxTimeline *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_getLatestTime",1,SWIGTYPE_p_ofxTimeline); } 
    result = (unsigned long long)(arg1)->getLatestTime(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_getEarliestSelectedTime(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    unsigned long long result; SWIG_check_num_args("ofxTimeline::getEarliestSelectedTime",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::getEarliestSelectedTime",1,"ofxTimeline *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_getEarliestSelectedTime",1,SWIGTYPE_p_ofxTimeline); } 
    result = (unsigned long long)(arg1)->getEarliestSelectedTime(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_getLatestSelectedTime(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    unsigned long long result; SWIG_check_num_args("ofxTimeline::getLatestSelectedTime",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::getLatestSelectedTime",1,"ofxTimeline *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_getLatestSelectedTime",1,SWIGTYPE_p_ofxTimeline); } 
    result = (unsigned long long)(arg1)->getLatestSelectedTime(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_hasTrack(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ; string arg2 ;
    bool result; SWIG_check_num_args("ofxTimeline::hasTrack",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::hasTrack",1,"ofxTimeline *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxTimeline::hasTrack",2,"string");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_hasTrack",1,SWIGTYPE_p_ofxTimeline); }  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
    result = (bool)(arg1)->hasTrack(arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }
   lua_error(L); return 0; }
static int _wrap_ofxTimeline_hasPage(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ; string arg2 ;
    bool result; SWIG_check_num_args("ofxTimeline::hasPage",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::hasPage",1,"ofxTimeline *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxTimeline::hasPage",2,"string");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_hasPage",1,SWIGTYPE_p_ofxTimeline); }  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
    result = (bool)(arg1)->hasPage(arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ofxTimeline_getTrack(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ; string arg2 ;
    ofxTLTrack *result = 0 ; SWIG_check_num_args("ofxTimeline::getTrack",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::getTrack",1,"ofxTimeline *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxTimeline::getTrack",2,"string");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_getTrack",1,SWIGTYPE_p_ofxTimeline); }  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
    result = (ofxTLTrack *)(arg1)->getTrack(arg2); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxTLTrack,0); SWIG_arg++; 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_getPage(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ; string arg2 ;
    ofxTLPage *result = 0 ; SWIG_check_num_args("ofxTimeline::getPage",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::getPage",1,"ofxTimeline *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxTimeline::getPage",2,"string");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_getPage",1,SWIGTYPE_p_ofxTimeline); }  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
    result = (ofxTLPage *)(arg1)->getPage(arg2); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxTLPage,0); SWIG_arg++; 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_addCurves__SWIG_0(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    string arg2 ; ofRange arg3 ; float arg4 ; ofRange *argp3 ; ofxTLCurves *result = 0 ;
    SWIG_check_num_args("ofxTimeline::addCurves",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::addCurves",1,"ofxTimeline *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxTimeline::addCurves",2,"string");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofxTimeline::addCurves",3,"ofRange");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxTimeline::addCurves",4,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_addCurves",1,SWIGTYPE_p_ofxTimeline); }  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_ofRange,0))){
      SWIG_fail_ptr("ofxTimeline_addCurves",3,SWIGTYPE_p_ofRange); }  arg3 = *argp3; arg4 = (float)lua_tonumber(L, 4);
    result = (ofxTLCurves *)(arg1)->addCurves(arg2,arg3,arg4);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxTLCurves,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ofxTimeline_addCurves__SWIG_1(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    string arg2 ; ofRange arg3 ; ofRange *argp3 ; ofxTLCurves *result = 0 ; SWIG_check_num_args("ofxTimeline::addCurves",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::addCurves",1,"ofxTimeline *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxTimeline::addCurves",2,"string");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofxTimeline::addCurves",3,"ofRange");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_addCurves",1,SWIGTYPE_p_ofxTimeline); }  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_ofRange,0))){
      SWIG_fail_ptr("ofxTimeline_addCurves",3,SWIGTYPE_p_ofRange); }  arg3 = *argp3;
    result = (ofxTLCurves *)(arg1)->addCurves(arg2,arg3); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxTLCurves,0); SWIG_arg++; 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_addCurves__SWIG_2(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    string arg2 ; ofxTLCurves *result = 0 ; SWIG_check_num_args("ofxTimeline::addCurves",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::addCurves",1,"ofxTimeline *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxTimeline::addCurves",2,"string");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_addCurves",1,SWIGTYPE_p_ofxTimeline); }  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
    result = (ofxTLCurves *)(arg1)->addCurves(arg2); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxTLCurves,0); SWIG_arg++; 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_addCurves__SWIG_3(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    string arg2 ; string arg3 ; ofRange arg4 ; float arg5 ; ofRange *argp4 ; ofxTLCurves *result = 0 ;
    SWIG_check_num_args("ofxTimeline::addCurves",5,5)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::addCurves",1,"ofxTimeline *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxTimeline::addCurves",2,"string");
    if(!lua_isstring(L,3)) SWIG_fail_arg("ofxTimeline::addCurves",3,"string");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofxTimeline::addCurves",4,"ofRange");
    if(!lua_isnumber(L,5)) SWIG_fail_arg("ofxTimeline::addCurves",5,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_addCurves",1,SWIGTYPE_p_ofxTimeline); }  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
    (&arg3)->assign(lua_tostring(L,3),lua_rawlen(L,3));
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_ofRange,0))){
      SWIG_fail_ptr("ofxTimeline_addCurves",4,SWIGTYPE_p_ofRange); }  arg4 = *argp4; arg5 = (float)lua_tonumber(L, 5);
    result = (ofxTLCurves *)(arg1)->addCurves(arg2,arg3,arg4,arg5);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxTLCurves,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ofxTimeline_addCurves__SWIG_4(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    string arg2 ; string arg3 ; ofRange arg4 ; ofRange *argp4 ; ofxTLCurves *result = 0 ;
    SWIG_check_num_args("ofxTimeline::addCurves",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::addCurves",1,"ofxTimeline *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxTimeline::addCurves",2,"string");
    if(!lua_isstring(L,3)) SWIG_fail_arg("ofxTimeline::addCurves",3,"string");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofxTimeline::addCurves",4,"ofRange");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_addCurves",1,SWIGTYPE_p_ofxTimeline); }  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
    (&arg3)->assign(lua_tostring(L,3),lua_rawlen(L,3));
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_ofRange,0))){
      SWIG_fail_ptr("ofxTimeline_addCurves",4,SWIGTYPE_p_ofRange); }  arg4 = *argp4;
    result = (ofxTLCurves *)(arg1)->addCurves(arg2,arg3,arg4);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxTLCurves,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ofxTimeline_addCurves__SWIG_5(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    string arg2 ; string arg3 ; ofxTLCurves *result = 0 ; SWIG_check_num_args("ofxTimeline::addCurves",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::addCurves",1,"ofxTimeline *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxTimeline::addCurves",2,"string");
    if(!lua_isstring(L,3)) SWIG_fail_arg("ofxTimeline::addCurves",3,"string");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_addCurves",1,SWIGTYPE_p_ofxTimeline); }  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
    (&arg3)->assign(lua_tostring(L,3),lua_rawlen(L,3)); result = (ofxTLCurves *)(arg1)->addCurves(arg2,arg3);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxTLCurves,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ofxTimeline_getValue__SWIG_0(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    string arg2 ; float result; SWIG_check_num_args("ofxTimeline::getValue",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::getValue",1,"ofxTimeline *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxTimeline::getValue",2,"string");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_getValue",1,SWIGTYPE_p_ofxTimeline); }  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
    result = (float)(arg1)->getValue(arg2); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_getValueAtPercent(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    string arg2 ; float arg3 ; float result; SWIG_check_num_args("ofxTimeline::getValueAtPercent",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::getValueAtPercent",1,"ofxTimeline *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxTimeline::getValueAtPercent",2,"string");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxTimeline::getValueAtPercent",3,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_getValueAtPercent",1,SWIGTYPE_p_ofxTimeline); } 
    (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2)); arg3 = (float)lua_tonumber(L, 3);
    result = (float)(arg1)->getValueAtPercent(arg2,arg3); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_getValue__SWIG_1(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    string arg2 ; float arg3 ; float result; SWIG_check_num_args("ofxTimeline::getValue",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::getValue",1,"ofxTimeline *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxTimeline::getValue",2,"string");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxTimeline::getValue",3,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_getValue",1,SWIGTYPE_p_ofxTimeline); }  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
    arg3 = (float)lua_tonumber(L, 3); result = (float)(arg1)->getValue(arg2,arg3);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_getValue__SWIG_2(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    string arg2 ; int arg3 ; float result; SWIG_check_num_args("ofxTimeline::getValue",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::getValue",1,"ofxTimeline *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxTimeline::getValue",2,"string");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxTimeline::getValue",3,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_getValue",1,SWIGTYPE_p_ofxTimeline); }  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
    arg3 = (int)lua_tonumber(L, 3); result = (float)(arg1)->getValue(arg2,arg3);
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_getValue(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) {
    return _wrap_ofxTimeline_getValue__SWIG_0(L);}  if (argc == 3) { return _wrap_ofxTimeline_getValue__SWIG_1(L);} 
  if (argc == 3) { return _wrap_ofxTimeline_getValue__SWIG_2(L);} 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofxTimeline_getValue'\n"
  "  Possible C/C++ prototypes are:\n" "    ofxTimeline::getValue(string)\n" "    ofxTimeline::getValue(string,float)\n"
  "    ofxTimeline::getValue(string,int)\n"); lua_error(L);return 0; }
static int _wrap_ofxTimeline_addLFO__SWIG_0(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    string arg2 ; ofRange arg3 ; float arg4 ; ofRange *argp3 ; ofxTLLFO *result = 0 ;
    SWIG_check_num_args("ofxTimeline::addLFO",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::addLFO",1,"ofxTimeline *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxTimeline::addLFO",2,"string");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofxTimeline::addLFO",3,"ofRange");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxTimeline::addLFO",4,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_addLFO",1,SWIGTYPE_p_ofxTimeline); }  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_ofRange,0))){
      SWIG_fail_ptr("ofxTimeline_addLFO",3,SWIGTYPE_p_ofRange); }  arg3 = *argp3; arg4 = (float)lua_tonumber(L, 4);
    result = (ofxTLLFO *)(arg1)->addLFO(arg2,arg3,arg4); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxTLLFO,0); SWIG_arg++; 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_addLFO__SWIG_1(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    string arg2 ; ofRange arg3 ; ofRange *argp3 ; ofxTLLFO *result = 0 ; SWIG_check_num_args("ofxTimeline::addLFO",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::addLFO",1,"ofxTimeline *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxTimeline::addLFO",2,"string");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofxTimeline::addLFO",3,"ofRange");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_addLFO",1,SWIGTYPE_p_ofxTimeline); }  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_ofRange,0))){
      SWIG_fail_ptr("ofxTimeline_addLFO",3,SWIGTYPE_p_ofRange); }  arg3 = *argp3;
    result = (ofxTLLFO *)(arg1)->addLFO(arg2,arg3); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxTLLFO,0); SWIG_arg++; 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_addLFO__SWIG_2(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    string arg2 ; ofxTLLFO *result = 0 ; SWIG_check_num_args("ofxTimeline::addLFO",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::addLFO",1,"ofxTimeline *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxTimeline::addLFO",2,"string");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_addLFO",1,SWIGTYPE_p_ofxTimeline); }  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
    result = (ofxTLLFO *)(arg1)->addLFO(arg2); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxTLLFO,0); SWIG_arg++;  return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_addLFO__SWIG_3(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    string arg2 ; string arg3 ; ofRange arg4 ; float arg5 ; ofRange *argp4 ; ofxTLLFO *result = 0 ;
    SWIG_check_num_args("ofxTimeline::addLFO",5,5)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::addLFO",1,"ofxTimeline *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxTimeline::addLFO",2,"string");
    if(!lua_isstring(L,3)) SWIG_fail_arg("ofxTimeline::addLFO",3,"string");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofxTimeline::addLFO",4,"ofRange");
    if(!lua_isnumber(L,5)) SWIG_fail_arg("ofxTimeline::addLFO",5,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_addLFO",1,SWIGTYPE_p_ofxTimeline); }  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
    (&arg3)->assign(lua_tostring(L,3),lua_rawlen(L,3));
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_ofRange,0))){
      SWIG_fail_ptr("ofxTimeline_addLFO",4,SWIGTYPE_p_ofRange); }  arg4 = *argp4; arg5 = (float)lua_tonumber(L, 5);
    result = (ofxTLLFO *)(arg1)->addLFO(arg2,arg3,arg4,arg5); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxTLLFO,0); SWIG_arg++; 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_addLFO__SWIG_4(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    string arg2 ; string arg3 ; ofRange arg4 ; ofRange *argp4 ; ofxTLLFO *result = 0 ;
    SWIG_check_num_args("ofxTimeline::addLFO",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::addLFO",1,"ofxTimeline *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxTimeline::addLFO",2,"string");
    if(!lua_isstring(L,3)) SWIG_fail_arg("ofxTimeline::addLFO",3,"string");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofxTimeline::addLFO",4,"ofRange");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_addLFO",1,SWIGTYPE_p_ofxTimeline); }  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
    (&arg3)->assign(lua_tostring(L,3),lua_rawlen(L,3));
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_ofRange,0))){
      SWIG_fail_ptr("ofxTimeline_addLFO",4,SWIGTYPE_p_ofRange); }  arg4 = *argp4;
    result = (ofxTLLFO *)(arg1)->addLFO(arg2,arg3,arg4); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxTLLFO,0); SWIG_arg++; 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_addLFO__SWIG_5(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    string arg2 ; string arg3 ; ofxTLLFO *result = 0 ; SWIG_check_num_args("ofxTimeline::addLFO",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::addLFO",1,"ofxTimeline *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxTimeline::addLFO",2,"string");
    if(!lua_isstring(L,3)) SWIG_fail_arg("ofxTimeline::addLFO",3,"string");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_addLFO",1,SWIGTYPE_p_ofxTimeline); }  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
    (&arg3)->assign(lua_tostring(L,3),lua_rawlen(L,3)); result = (ofxTLLFO *)(arg1)->addLFO(arg2,arg3);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxTLLFO,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ofxTimeline_addLFO(lua_State* L) { int argc; int argv[6]={ 1,2,3,4,5,6} ; argc = lua_gettop(L);
  if (argc == 2) { return _wrap_ofxTimeline_addLFO__SWIG_2(L);}  if (argc == 3) { int _v = 0; { { void *ptr;
        if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofRange, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  } }  if (!_v) goto check_2; return _wrap_ofxTimeline_addLFO__SWIG_1(L);}  check_2:
  if (argc == 3) { return _wrap_ofxTimeline_addLFO__SWIG_5(L);}  if (argc == 4) { int _v = 0; { { void *ptr;
        if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofRange, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  } }  if (!_v) goto check_4; { { _v = lua_isnumber(L,argv[3]); } }  if (!_v) goto check_4;
    return _wrap_ofxTimeline_addLFO__SWIG_0(L);}  check_4: if (argc == 4) { return _wrap_ofxTimeline_addLFO__SWIG_4(L);} 
  if (argc == 5) { return _wrap_ofxTimeline_addLFO__SWIG_3(L);} 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofxTimeline_addLFO'\n" "  Possible C/C++ prototypes are:\n"
  "    ofxTimeline::addLFO(string,ofRange,float)\n" "    ofxTimeline::addLFO(string,ofRange)\n"
  "    ofxTimeline::addLFO(string)\n" "    ofxTimeline::addLFO(string,string,ofRange,float)\n"
  "    ofxTimeline::addLFO(string,string,ofRange)\n" "    ofxTimeline::addLFO(string,string)\n"); lua_error(L);return 0; }
static int _wrap_ofxTimeline_addSwitches__SWIG_0(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    string arg2 ; ofxTLSwitches *result = 0 ; SWIG_check_num_args("ofxTimeline::addSwitches",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::addSwitches",1,"ofxTimeline *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxTimeline::addSwitches",2,"string");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_addSwitches",1,SWIGTYPE_p_ofxTimeline); }  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
    result = (ofxTLSwitches *)(arg1)->addSwitches(arg2); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxTLSwitches,0); SWIG_arg++; 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_addSwitches__SWIG_1(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    string arg2 ; string arg3 ; ofxTLSwitches *result = 0 ; SWIG_check_num_args("ofxTimeline::addSwitches",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::addSwitches",1,"ofxTimeline *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxTimeline::addSwitches",2,"string");
    if(!lua_isstring(L,3)) SWIG_fail_arg("ofxTimeline::addSwitches",3,"string");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_addSwitches",1,SWIGTYPE_p_ofxTimeline); }  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
    (&arg3)->assign(lua_tostring(L,3),lua_rawlen(L,3)); result = (ofxTLSwitches *)(arg1)->addSwitches(arg2,arg3);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxTLSwitches,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ofxTimeline_addSwitches(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L);
  if (argc == 2) { return _wrap_ofxTimeline_addSwitches__SWIG_0(L);}  if (argc == 3) {
    return _wrap_ofxTimeline_addSwitches__SWIG_1(L);} 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofxTimeline_addSwitches'\n"
  "  Possible C/C++ prototypes are:\n" "    ofxTimeline::addSwitches(string)\n"
  "    ofxTimeline::addSwitches(string,string)\n"); lua_error(L);return 0; }
static int _wrap_ofxTimeline_isSwitchOn__SWIG_0(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    string arg2 ; bool result; SWIG_check_num_args("ofxTimeline::isSwitchOn",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::isSwitchOn",1,"ofxTimeline *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxTimeline::isSwitchOn",2,"string");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_isSwitchOn",1,SWIGTYPE_p_ofxTimeline); }  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
    result = (bool)(arg1)->isSwitchOn(arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_isSwitchOn__SWIG_1(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    string arg2 ; float arg3 ; bool result; SWIG_check_num_args("ofxTimeline::isSwitchOn",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::isSwitchOn",1,"ofxTimeline *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxTimeline::isSwitchOn",2,"string");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxTimeline::isSwitchOn",3,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_isSwitchOn",1,SWIGTYPE_p_ofxTimeline); }  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
    arg3 = (float)lua_tonumber(L, 3); result = (bool)(arg1)->isSwitchOn(arg2,arg3);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_isSwitchOn__SWIG_2(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    string arg2 ; int arg3 ; bool result; SWIG_check_num_args("ofxTimeline::isSwitchOn",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::isSwitchOn",1,"ofxTimeline *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxTimeline::isSwitchOn",2,"string");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxTimeline::isSwitchOn",3,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_isSwitchOn",1,SWIGTYPE_p_ofxTimeline); }  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
    arg3 = (int)lua_tonumber(L, 3); result = (bool)(arg1)->isSwitchOn(arg2,arg3);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_isSwitchOn(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L);
  if (argc == 2) { return _wrap_ofxTimeline_isSwitchOn__SWIG_0(L);}  if (argc == 3) {
    return _wrap_ofxTimeline_isSwitchOn__SWIG_1(L);}  if (argc == 3) { return _wrap_ofxTimeline_isSwitchOn__SWIG_2(L);} 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofxTimeline_isSwitchOn'\n"
  "  Possible C/C++ prototypes are:\n" "    ofxTimeline::isSwitchOn(string)\n" "    ofxTimeline::isSwitchOn(string,float)\n"
  "    ofxTimeline::isSwitchOn(string,int)\n"); lua_error(L);return 0; }
static int _wrap_ofxTimeline_addBangs__SWIG_0(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    string arg2 ; ofxTLBangs *result = 0 ; SWIG_check_num_args("ofxTimeline::addBangs",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::addBangs",1,"ofxTimeline *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxTimeline::addBangs",2,"string");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_addBangs",1,SWIGTYPE_p_ofxTimeline); }  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
    result = (ofxTLBangs *)(arg1)->addBangs(arg2); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxTLBangs,0); SWIG_arg++; 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_addBangs__SWIG_1(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    string arg2 ; string arg3 ; ofxTLBangs *result = 0 ; SWIG_check_num_args("ofxTimeline::addBangs",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::addBangs",1,"ofxTimeline *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxTimeline::addBangs",2,"string");
    if(!lua_isstring(L,3)) SWIG_fail_arg("ofxTimeline::addBangs",3,"string");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_addBangs",1,SWIGTYPE_p_ofxTimeline); }  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
    (&arg3)->assign(lua_tostring(L,3),lua_rawlen(L,3)); result = (ofxTLBangs *)(arg1)->addBangs(arg2,arg3);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxTLBangs,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ofxTimeline_addBangs(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) {
    return _wrap_ofxTimeline_addBangs__SWIG_0(L);}  if (argc == 3) { return _wrap_ofxTimeline_addBangs__SWIG_1(L);} 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofxTimeline_addBangs'\n"
  "  Possible C/C++ prototypes are:\n" "    ofxTimeline::addBangs(string)\n" "    ofxTimeline::addBangs(string,string)\n");
  lua_error(L);return 0; }
static int _wrap_ofxTimeline_addFlags__SWIG_0(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    string arg2 ; ofxTLFlags *result = 0 ; SWIG_check_num_args("ofxTimeline::addFlags",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::addFlags",1,"ofxTimeline *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxTimeline::addFlags",2,"string");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_addFlags",1,SWIGTYPE_p_ofxTimeline); }  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
    result = (ofxTLFlags *)(arg1)->addFlags(arg2); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxTLFlags,0); SWIG_arg++; 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_addFlags__SWIG_1(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    string arg2 ; string arg3 ; ofxTLFlags *result = 0 ; SWIG_check_num_args("ofxTimeline::addFlags",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::addFlags",1,"ofxTimeline *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxTimeline::addFlags",2,"string");
    if(!lua_isstring(L,3)) SWIG_fail_arg("ofxTimeline::addFlags",3,"string");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_addFlags",1,SWIGTYPE_p_ofxTimeline); }  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
    (&arg3)->assign(lua_tostring(L,3),lua_rawlen(L,3)); result = (ofxTLFlags *)(arg1)->addFlags(arg2,arg3);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxTLFlags,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ofxTimeline_addFlags(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) {
    return _wrap_ofxTimeline_addFlags__SWIG_0(L);}  if (argc == 3) { return _wrap_ofxTimeline_addFlags__SWIG_1(L);} 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofxTimeline_addFlags'\n"
  "  Possible C/C++ prototypes are:\n" "    ofxTimeline::addFlags(string)\n" "    ofxTimeline::addFlags(string,string)\n");
  lua_error(L);return 0; }
static int _wrap_ofxTimeline_addColors__SWIG_0(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    string arg2 ; ofxTLColorTrack *result = 0 ; SWIG_check_num_args("ofxTimeline::addColors",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::addColors",1,"ofxTimeline *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxTimeline::addColors",2,"string");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_addColors",1,SWIGTYPE_p_ofxTimeline); }  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
    result = (ofxTLColorTrack *)(arg1)->addColors(arg2); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxTLColorTrack,0); SWIG_arg++; 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_addColors__SWIG_1(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    string arg2 ; string arg3 ; ofxTLColorTrack *result = 0 ; SWIG_check_num_args("ofxTimeline::addColors",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::addColors",1,"ofxTimeline *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxTimeline::addColors",2,"string");
    if(!lua_isstring(L,3)) SWIG_fail_arg("ofxTimeline::addColors",3,"string");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_addColors",1,SWIGTYPE_p_ofxTimeline); }  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
    (&arg3)->assign(lua_tostring(L,3),lua_rawlen(L,3)); result = (ofxTLColorTrack *)(arg1)->addColors(arg2,arg3);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxTLColorTrack,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ofxTimeline_addColors(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) {
    return _wrap_ofxTimeline_addColors__SWIG_0(L);}  if (argc == 3) { return _wrap_ofxTimeline_addColors__SWIG_1(L);} 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofxTimeline_addColors'\n"
  "  Possible C/C++ prototypes are:\n" "    ofxTimeline::addColors(string)\n" "    ofxTimeline::addColors(string,string)\n");
  lua_error(L);return 0; }
static int _wrap_ofxTimeline_addColorsWithPalette__SWIG_0(lua_State* L) { { int SWIG_arg = 0;
    ofxTimeline *arg1 = (ofxTimeline *) 0 ; string arg2 ; ofImage *arg3 = 0 ; ofxTLColorTrack *result = 0 ;
    SWIG_check_num_args("ofxTimeline::addColorsWithPalette",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::addColorsWithPalette",1,"ofxTimeline *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxTimeline::addColorsWithPalette",2,"string");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofxTimeline::addColorsWithPalette",3,"ofImage &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_addColorsWithPalette",1,SWIGTYPE_p_ofxTimeline); } 
    (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofImage,0))){
      SWIG_fail_ptr("ofxTimeline_addColorsWithPalette",3,SWIGTYPE_p_ofImage); } 
    result = (ofxTLColorTrack *)(arg1)->addColorsWithPalette(arg2,*arg3);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxTLColorTrack,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ofxTimeline_addColorsWithPalette__SWIG_1(lua_State* L) { { int SWIG_arg = 0;
    ofxTimeline *arg1 = (ofxTimeline *) 0 ; string arg2 ; string arg3 ; ofxTLColorTrack *result = 0 ;
    SWIG_check_num_args("ofxTimeline::addColorsWithPalette",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::addColorsWithPalette",1,"ofxTimeline *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxTimeline::addColorsWithPalette",2,"string");
    if(!lua_isstring(L,3)) SWIG_fail_arg("ofxTimeline::addColorsWithPalette",3,"string");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_addColorsWithPalette",1,SWIGTYPE_p_ofxTimeline); } 
    (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2)); (&arg3)->assign(lua_tostring(L,3),lua_rawlen(L,3));
    result = (ofxTLColorTrack *)(arg1)->addColorsWithPalette(arg2,arg3);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxTLColorTrack,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ofxTimeline_addColorsWithPalette__SWIG_2(lua_State* L) { { int SWIG_arg = 0;
    ofxTimeline *arg1 = (ofxTimeline *) 0 ; string arg2 ; string arg3 ; ofImage *arg4 = 0 ; ofxTLColorTrack *result = 0 ;
    SWIG_check_num_args("ofxTimeline::addColorsWithPalette",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::addColorsWithPalette",1,"ofxTimeline *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxTimeline::addColorsWithPalette",2,"string");
    if(!lua_isstring(L,3)) SWIG_fail_arg("ofxTimeline::addColorsWithPalette",3,"string");
    if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofxTimeline::addColorsWithPalette",4,"ofImage &");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_addColorsWithPalette",1,SWIGTYPE_p_ofxTimeline); } 
    (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2)); (&arg3)->assign(lua_tostring(L,3),lua_rawlen(L,3));
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ofImage,0))){
      SWIG_fail_ptr("ofxTimeline_addColorsWithPalette",4,SWIGTYPE_p_ofImage); } 
    result = (ofxTLColorTrack *)(arg1)->addColorsWithPalette(arg2,arg3,*arg4);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxTLColorTrack,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ofxTimeline_addColorsWithPalette__SWIG_3(lua_State* L) { { int SWIG_arg = 0;
    ofxTimeline *arg1 = (ofxTimeline *) 0 ; string arg2 ; string arg3 ; string arg4 ; ofxTLColorTrack *result = 0 ;
    SWIG_check_num_args("ofxTimeline::addColorsWithPalette",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::addColorsWithPalette",1,"ofxTimeline *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxTimeline::addColorsWithPalette",2,"string");
    if(!lua_isstring(L,3)) SWIG_fail_arg("ofxTimeline::addColorsWithPalette",3,"string");
    if(!lua_isstring(L,4)) SWIG_fail_arg("ofxTimeline::addColorsWithPalette",4,"string");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_addColorsWithPalette",1,SWIGTYPE_p_ofxTimeline); } 
    (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2)); (&arg3)->assign(lua_tostring(L,3),lua_rawlen(L,3));
    (&arg4)->assign(lua_tostring(L,4),lua_rawlen(L,4));
    result = (ofxTLColorTrack *)(arg1)->addColorsWithPalette(arg2,arg3,arg4);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxTLColorTrack,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ofxTimeline_addColorsWithPalette(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L);
  if (argc == 3) { int _v = 0; { { void *ptr;
        if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofImage, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  } }  if (!_v) goto check_1; return _wrap_ofxTimeline_addColorsWithPalette__SWIG_0(L);} 
  check_1: if (argc == 3) { return _wrap_ofxTimeline_addColorsWithPalette__SWIG_1(L);}  if (argc == 4) { int _v = 0; { {
        void *ptr;
        if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ofImage, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  } }  if (!_v) goto check_3; return _wrap_ofxTimeline_addColorsWithPalette__SWIG_2(L);} 
  check_3: if (argc == 4) { return _wrap_ofxTimeline_addColorsWithPalette__SWIG_3(L);} 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofxTimeline_addColorsWithPalette'\n"
  "  Possible C/C++ prototypes are:\n" "    ofxTimeline::addColorsWithPalette(string,ofImage &)\n"
  "    ofxTimeline::addColorsWithPalette(string,string)\n" "    ofxTimeline::addColorsWithPalette(string,string,ofImage &)\n"
  "    ofxTimeline::addColorsWithPalette(string,string,string)\n"); lua_error(L);return 0; }
static int _wrap_ofxTimeline_getColor(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ; string arg2 ;
    ofColor result; SWIG_check_num_args("ofxTimeline::getColor",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::getColor",1,"ofxTimeline *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxTimeline::getColor",2,"string");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_getColor",1,SWIGTYPE_p_ofxTimeline); }  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
    result = (arg1)->getColor(arg2); { ofColor * resultptr = new ofColor(result);
      SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofColor,1); SWIG_arg++; }  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ofxTimeline_getColorAtPercent(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    string arg2 ; float arg3 ; ofColor result; SWIG_check_num_args("ofxTimeline::getColorAtPercent",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::getColorAtPercent",1,"ofxTimeline *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxTimeline::getColorAtPercent",2,"string");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxTimeline::getColorAtPercent",3,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_getColorAtPercent",1,SWIGTYPE_p_ofxTimeline); } 
    (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2)); arg3 = (float)lua_tonumber(L, 3);
    result = (arg1)->getColorAtPercent(arg2,arg3); { ofColor * resultptr = new ofColor(result);
      SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofColor,1); SWIG_arg++; }  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ofxTimeline_getColorAtSecond(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    string arg2 ; float arg3 ; ofColor result; SWIG_check_num_args("ofxTimeline::getColorAtSecond",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::getColorAtSecond",1,"ofxTimeline *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxTimeline::getColorAtSecond",2,"string");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxTimeline::getColorAtSecond",3,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_getColorAtSecond",1,SWIGTYPE_p_ofxTimeline); } 
    (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2)); arg3 = (float)lua_tonumber(L, 3);
    result = (arg1)->getColorAtSecond(arg2,arg3); { ofColor * resultptr = new ofColor(result);
      SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofColor,1); SWIG_arg++; }  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ofxTimeline_getColorAtMillis(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    string arg2 ; unsigned long long arg3 ; ofColor result; SWIG_check_num_args("ofxTimeline::getColorAtMillis",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::getColorAtMillis",1,"ofxTimeline *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxTimeline::getColorAtMillis",2,"string");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxTimeline::getColorAtMillis",3,"unsigned long long");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_getColorAtMillis",1,SWIGTYPE_p_ofxTimeline); } 
    (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2)); arg3 = (unsigned long long)lua_tonumber(L, 3);
    result = (arg1)->getColorAtMillis(arg2,arg3); { ofColor * resultptr = new ofColor(result);
      SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofColor,1); SWIG_arg++; }  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ofxTimeline_setDefaultColorPalettePath(lua_State* L) { { int SWIG_arg = 0;
    ofxTimeline *arg1 = (ofxTimeline *) 0 ; string arg2 ; SWIG_check_num_args("ofxTimeline::setDefaultColorPalettePath",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::setDefaultColorPalettePath",1,"ofxTimeline *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxTimeline::setDefaultColorPalettePath",2,"string");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_setDefaultColorPalettePath",1,SWIGTYPE_p_ofxTimeline); } 
    (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2)); (arg1)->setDefaultColorPalettePath(arg2); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_getDefaultColorPalettePath(lua_State* L) { { int SWIG_arg = 0;
    ofxTimeline *arg1 = (ofxTimeline *) 0 ; string result; SWIG_check_num_args("ofxTimeline::getDefaultColorPalettePath",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::getDefaultColorPalettePath",1,"ofxTimeline *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_getDefaultColorPalettePath",1,SWIGTYPE_p_ofxTimeline); } 
    result = (arg1)->getDefaultColorPalettePath(); lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_addImageSequence__SWIG_0(lua_State* L) { { int SWIG_arg = 0;
    ofxTimeline *arg1 = (ofxTimeline *) 0 ; string arg2 ; ofxTLImageSequence *result = 0 ;
    SWIG_check_num_args("ofxTimeline::addImageSequence",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::addImageSequence",1,"ofxTimeline *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxTimeline::addImageSequence",2,"string");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_addImageSequence",1,SWIGTYPE_p_ofxTimeline); } 
    (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2)); result = (ofxTLImageSequence *)(arg1)->addImageSequence(arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxTLImageSequence,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ofxTimeline_addImageSequence__SWIG_1(lua_State* L) { { int SWIG_arg = 0;
    ofxTimeline *arg1 = (ofxTimeline *) 0 ; string arg2 ; string arg3 ; ofxTLImageSequence *result = 0 ;
    SWIG_check_num_args("ofxTimeline::addImageSequence",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::addImageSequence",1,"ofxTimeline *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxTimeline::addImageSequence",2,"string");
    if(!lua_isstring(L,3)) SWIG_fail_arg("ofxTimeline::addImageSequence",3,"string");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_addImageSequence",1,SWIGTYPE_p_ofxTimeline); } 
    (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2)); (&arg3)->assign(lua_tostring(L,3),lua_rawlen(L,3));
    result = (ofxTLImageSequence *)(arg1)->addImageSequence(arg2,arg3);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxTLImageSequence,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ofxTimeline_addImageSequence(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L);
  if (argc == 2) { return _wrap_ofxTimeline_addImageSequence__SWIG_0(L);}  if (argc == 3) {
    return _wrap_ofxTimeline_addImageSequence__SWIG_1(L);} 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofxTimeline_addImageSequence'\n"
  "  Possible C/C++ prototypes are:\n" "    ofxTimeline::addImageSequence(string)\n"
  "    ofxTimeline::addImageSequence(string,string)\n"); lua_error(L);return 0; }
static int _wrap_ofxTimeline_getImage__SWIG_0(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    string arg2 ; ofImage *result = 0 ; SWIG_check_num_args("ofxTimeline::getImage",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::getImage",1,"ofxTimeline *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxTimeline::getImage",2,"string");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_getImage",1,SWIGTYPE_p_ofxTimeline); }  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
    result = (ofImage *)(arg1)->getImage(arg2); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofImage,0); SWIG_arg++;  return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_getImage__SWIG_1(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    string arg2 ; float arg3 ; ofImage *result = 0 ; SWIG_check_num_args("ofxTimeline::getImage",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::getImage",1,"ofxTimeline *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxTimeline::getImage",2,"string");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxTimeline::getImage",3,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_getImage",1,SWIGTYPE_p_ofxTimeline); }  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
    arg3 = (float)lua_tonumber(L, 3); result = (ofImage *)(arg1)->getImage(arg2,arg3);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofImage,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ofxTimeline_getImage__SWIG_2(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    string arg2 ; int arg3 ; ofImage *result = 0 ; SWIG_check_num_args("ofxTimeline::getImage",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::getImage",1,"ofxTimeline *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxTimeline::getImage",2,"string");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxTimeline::getImage",3,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_getImage",1,SWIGTYPE_p_ofxTimeline); }  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
    arg3 = (int)lua_tonumber(L, 3); result = (ofImage *)(arg1)->getImage(arg2,arg3);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofImage,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ofxTimeline_getImage(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) {
    return _wrap_ofxTimeline_getImage__SWIG_0(L);}  if (argc == 3) { return _wrap_ofxTimeline_getImage__SWIG_1(L);} 
  if (argc == 3) { return _wrap_ofxTimeline_getImage__SWIG_2(L);} 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofxTimeline_getImage'\n"
  "  Possible C/C++ prototypes are:\n" "    ofxTimeline::getImage(string)\n" "    ofxTimeline::getImage(string,float)\n"
  "    ofxTimeline::getImage(string,int)\n"); lua_error(L);return 0; }
static int _wrap_ofxTimeline_addVideoTrack__SWIG_0(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    string arg2 ; ofxTLVideoTrack *result = 0 ; SWIG_check_num_args("ofxTimeline::addVideoTrack",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::addVideoTrack",1,"ofxTimeline *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxTimeline::addVideoTrack",2,"string");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_addVideoTrack",1,SWIGTYPE_p_ofxTimeline); } 
    (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2)); result = (ofxTLVideoTrack *)(arg1)->addVideoTrack(arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxTLVideoTrack,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ofxTimeline_addVideoTrackWithPath(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    string arg2 ; ofxTLVideoTrack *result = 0 ; SWIG_check_num_args("ofxTimeline::addVideoTrackWithPath",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::addVideoTrackWithPath",1,"ofxTimeline *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxTimeline::addVideoTrackWithPath",2,"string");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_addVideoTrackWithPath",1,SWIGTYPE_p_ofxTimeline); } 
    (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2)); result = (ofxTLVideoTrack *)(arg1)->addVideoTrackWithPath(arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxTLVideoTrack,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ofxTimeline_addVideoTrack__SWIG_1(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    string arg2 ; string arg3 ; ofxTLVideoTrack *result = 0 ; SWIG_check_num_args("ofxTimeline::addVideoTrack",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::addVideoTrack",1,"ofxTimeline *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxTimeline::addVideoTrack",2,"string");
    if(!lua_isstring(L,3)) SWIG_fail_arg("ofxTimeline::addVideoTrack",3,"string");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_addVideoTrack",1,SWIGTYPE_p_ofxTimeline); } 
    (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2)); (&arg3)->assign(lua_tostring(L,3),lua_rawlen(L,3));
    result = (ofxTLVideoTrack *)(arg1)->addVideoTrack(arg2,arg3);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxTLVideoTrack,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ofxTimeline_addVideoTrack(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L);
  if (argc == 2) { return _wrap_ofxTimeline_addVideoTrack__SWIG_0(L);}  if (argc == 3) {
    return _wrap_ofxTimeline_addVideoTrack__SWIG_1(L);} 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofxTimeline_addVideoTrack'\n"
  "  Possible C/C++ prototypes are:\n" "    ofxTimeline::addVideoTrack(string)\n"
  "    ofxTimeline::addVideoTrack(string,string)\n"); lua_error(L);return 0; }
static int _wrap_ofxTimeline_getVideoTrack(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    string arg2 ; ofxTLVideoTrack *result = 0 ; SWIG_check_num_args("ofxTimeline::getVideoTrack",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::getVideoTrack",1,"ofxTimeline *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxTimeline::getVideoTrack",2,"string");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_getVideoTrack",1,SWIGTYPE_p_ofxTimeline); } 
    (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2)); result = (ofxTLVideoTrack *)(arg1)->getVideoTrack(arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxTLVideoTrack,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ofxTimeline_getVideoPlayer(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    string arg2 ; ofPtr< ofVideoPlayer > result; SWIG_check_num_args("ofxTimeline::getVideoPlayer",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::getVideoPlayer",1,"ofxTimeline *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxTimeline::getVideoPlayer",2,"string");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_getVideoPlayer",1,SWIGTYPE_p_ofxTimeline); } 
    (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2)); result = (arg1)->getVideoPlayer(arg2); {
      ofPtr< ofVideoPlayer > * resultptr = new ofPtr< ofVideoPlayer >(result);
      SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofPtrT_ofVideoPlayer_t,1); SWIG_arg++; }  return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_addAudioTrack__SWIG_0(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    string arg2 ; ofxTLAudioTrack *result = 0 ; SWIG_check_num_args("ofxTimeline::addAudioTrack",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::addAudioTrack",1,"ofxTimeline *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxTimeline::addAudioTrack",2,"string");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_addAudioTrack",1,SWIGTYPE_p_ofxTimeline); } 
    (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2)); result = (ofxTLAudioTrack *)(arg1)->addAudioTrack(arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxTLAudioTrack,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ofxTimeline_addAudioTrackWithPath(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    string arg2 ; ofxTLAudioTrack *result = 0 ; SWIG_check_num_args("ofxTimeline::addAudioTrackWithPath",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::addAudioTrackWithPath",1,"ofxTimeline *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxTimeline::addAudioTrackWithPath",2,"string");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_addAudioTrackWithPath",1,SWIGTYPE_p_ofxTimeline); } 
    (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2)); result = (ofxTLAudioTrack *)(arg1)->addAudioTrackWithPath(arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxTLAudioTrack,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ofxTimeline_addAudioTrack__SWIG_1(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    string arg2 ; string arg3 ; ofxTLAudioTrack *result = 0 ; SWIG_check_num_args("ofxTimeline::addAudioTrack",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::addAudioTrack",1,"ofxTimeline *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxTimeline::addAudioTrack",2,"string");
    if(!lua_isstring(L,3)) SWIG_fail_arg("ofxTimeline::addAudioTrack",3,"string");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_addAudioTrack",1,SWIGTYPE_p_ofxTimeline); } 
    (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2)); (&arg3)->assign(lua_tostring(L,3),lua_rawlen(L,3));
    result = (ofxTLAudioTrack *)(arg1)->addAudioTrack(arg2,arg3);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxTLAudioTrack,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ofxTimeline_addAudioTrack(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L);
  if (argc == 2) { return _wrap_ofxTimeline_addAudioTrack__SWIG_0(L);}  if (argc == 3) {
    return _wrap_ofxTimeline_addAudioTrack__SWIG_1(L);} 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofxTimeline_addAudioTrack'\n"
  "  Possible C/C++ prototypes are:\n" "    ofxTimeline::addAudioTrack(string)\n"
  "    ofxTimeline::addAudioTrack(string,string)\n"); lua_error(L);return 0; }
static int _wrap_ofxTimeline_getAudioTrack(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    string arg2 ; ofxTLAudioTrack *result = 0 ; SWIG_check_num_args("ofxTimeline::getAudioTrack",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::getAudioTrack",1,"ofxTimeline *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxTimeline::getAudioTrack",2,"string");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_getAudioTrack",1,SWIGTYPE_p_ofxTimeline); } 
    (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2)); result = (ofxTLAudioTrack *)(arg1)->getAudioTrack(arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxTLAudioTrack,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ofxTimeline_setTimecontrolTrack__SWIG_0(lua_State* L) { { int SWIG_arg = 0;
    ofxTimeline *arg1 = (ofxTimeline *) 0 ; string arg2 ; SWIG_check_num_args("ofxTimeline::setTimecontrolTrack",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::setTimecontrolTrack",1,"ofxTimeline *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxTimeline::setTimecontrolTrack",2,"string");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_setTimecontrolTrack",1,SWIGTYPE_p_ofxTimeline); } 
    (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2)); (arg1)->setTimecontrolTrack(arg2); return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ofxTimeline_setTimecontrolTrack__SWIG_1(lua_State* L) { { int SWIG_arg = 0;
    ofxTimeline *arg1 = (ofxTimeline *) 0 ; ofxTLTrack *arg2 = (ofxTLTrack *) 0 ;
    SWIG_check_num_args("ofxTimeline::setTimecontrolTrack",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::setTimecontrolTrack",1,"ofxTimeline *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofxTimeline::setTimecontrolTrack",2,"ofxTLTrack *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_setTimecontrolTrack",1,SWIGTYPE_p_ofxTimeline); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofxTLTrack,0))){
      SWIG_fail_ptr("ofxTimeline_setTimecontrolTrack",2,SWIGTYPE_p_ofxTLTrack); }  (arg1)->setTimecontrolTrack(arg2);
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_setTimecontrolTrack(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L);
  if (argc == 2) { int _v = 0; { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofxTLTrack, 0)) { _v = 0; }
         else { _v = 1; }  } }  if (!_v) goto check_1; return _wrap_ofxTimeline_setTimecontrolTrack__SWIG_1(L);}  check_1:
  if (argc == 2) { return _wrap_ofxTimeline_setTimecontrolTrack__SWIG_0(L);} 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofxTimeline_setTimecontrolTrack'\n"
  "  Possible C/C++ prototypes are:\n" "    ofxTimeline::setTimecontrolTrack(string)\n"
  "    ofxTimeline::setTimecontrolTrack(ofxTLTrack *)\n"); lua_error(L);return 0; }
static int _wrap_ofxTimeline_getTimecontrolTrack(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    ofxTLTrack *result = 0 ; SWIG_check_num_args("ofxTimeline::getTimecontrolTrack",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::getTimecontrolTrack",1,"ofxTimeline *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_getTimecontrolTrack",1,SWIGTYPE_p_ofxTimeline); } 
    result = (ofxTLTrack *)(arg1)->getTimecontrolTrack(); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxTLTrack,0); SWIG_arg++; 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_addTrack(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ; string arg2 ;
    ofxTLTrack *arg3 = (ofxTLTrack *) 0 ; SWIG_check_num_args("ofxTimeline::addTrack",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::addTrack",1,"ofxTimeline *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxTimeline::addTrack",2,"string");
    if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ofxTimeline::addTrack",3,"ofxTLTrack *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_addTrack",1,SWIGTYPE_p_ofxTimeline); }  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofxTLTrack,0))){
      SWIG_fail_ptr("ofxTimeline_addTrack",3,SWIGTYPE_p_ofxTLTrack); }  (arg1)->addTrack(arg2,arg3); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_getTrackHeader__SWIG_0(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    string arg2 ; ofxTLTrackHeader *result = 0 ; SWIG_check_num_args("ofxTimeline::getTrackHeader",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::getTrackHeader",1,"ofxTimeline *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxTimeline::getTrackHeader",2,"string");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_getTrackHeader",1,SWIGTYPE_p_ofxTimeline); } 
    (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2)); result = (ofxTLTrackHeader *)(arg1)->getTrackHeader(arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxTLTrackHeader,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ofxTimeline_getTrackHeader__SWIG_1(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    ofxTLTrack *arg2 = (ofxTLTrack *) 0 ; ofxTLTrackHeader *result = 0 ; SWIG_check_num_args("ofxTimeline::getTrackHeader",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::getTrackHeader",1,"ofxTimeline *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofxTimeline::getTrackHeader",2,"ofxTLTrack *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_getTrackHeader",1,SWIGTYPE_p_ofxTimeline); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofxTLTrack,0))){
      SWIG_fail_ptr("ofxTimeline_getTrackHeader",2,SWIGTYPE_p_ofxTLTrack); } 
    result = (ofxTLTrackHeader *)(arg1)->getTrackHeader(arg2);
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxTLTrackHeader,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ofxTimeline_getTrackHeader(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L);
  if (argc == 2) { int _v = 0; { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofxTLTrack, 0)) { _v = 0; }
         else { _v = 1; }  } }  if (!_v) goto check_1; return _wrap_ofxTimeline_getTrackHeader__SWIG_1(L);}  check_1:
  if (argc == 2) { return _wrap_ofxTimeline_getTrackHeader__SWIG_0(L);} 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofxTimeline_getTrackHeader'\n"
  "  Possible C/C++ prototypes are:\n" "    ofxTimeline::getTrackHeader(string)\n"
  "    ofxTimeline::getTrackHeader(ofxTLTrack *)\n"); lua_error(L);return 0; }
static int _wrap_ofxTimeline_removeTrack__SWIG_0(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    string arg2 ; SWIG_check_num_args("ofxTimeline::removeTrack",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::removeTrack",1,"ofxTimeline *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxTimeline::removeTrack",2,"string");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_removeTrack",1,SWIGTYPE_p_ofxTimeline); }  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
    (arg1)->removeTrack(arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_removeTrack__SWIG_1(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    ofxTLTrack *arg2 = (ofxTLTrack *) 0 ; SWIG_check_num_args("ofxTimeline::removeTrack",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::removeTrack",1,"ofxTimeline *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofxTimeline::removeTrack",2,"ofxTLTrack *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_removeTrack",1,SWIGTYPE_p_ofxTimeline); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofxTLTrack,0))){
      SWIG_fail_ptr("ofxTimeline_removeTrack",2,SWIGTYPE_p_ofxTLTrack); }  (arg1)->removeTrack(arg2); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_removeTrack(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 2) {
    int _v = 0; { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofxTLTrack, 0)) { _v = 0; }
         else { _v = 1; }  } }  if (!_v) goto check_1; return _wrap_ofxTimeline_removeTrack__SWIG_1(L);}  check_1:
  if (argc == 2) { return _wrap_ofxTimeline_removeTrack__SWIG_0(L);} 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofxTimeline_removeTrack'\n"
  "  Possible C/C++ prototypes are:\n" "    ofxTimeline::removeTrack(string)\n" "    ofxTimeline::removeTrack(ofxTLTrack *)\n");
  lua_error(L);return 0; }
static int _wrap_ofxTimeline_bringTrackToTop__SWIG_0(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    string arg2 ; SWIG_check_num_args("ofxTimeline::bringTrackToTop",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::bringTrackToTop",1,"ofxTimeline *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxTimeline::bringTrackToTop",2,"string");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_bringTrackToTop",1,SWIGTYPE_p_ofxTimeline); } 
    (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2)); (arg1)->bringTrackToTop(arg2); return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ofxTimeline_bringTrackToTop__SWIG_1(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    ofxTLTrack *arg2 = (ofxTLTrack *) 0 ; SWIG_check_num_args("ofxTimeline::bringTrackToTop",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::bringTrackToTop",1,"ofxTimeline *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofxTimeline::bringTrackToTop",2,"ofxTLTrack *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_bringTrackToTop",1,SWIGTYPE_p_ofxTimeline); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofxTLTrack,0))){
      SWIG_fail_ptr("ofxTimeline_bringTrackToTop",2,SWIGTYPE_p_ofxTLTrack); }  (arg1)->bringTrackToTop(arg2); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_bringTrackToTop(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L);
  if (argc == 2) { int _v = 0; { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofxTLTrack, 0)) { _v = 0; }
         else { _v = 1; }  } }  if (!_v) goto check_1; return _wrap_ofxTimeline_bringTrackToTop__SWIG_1(L);}  check_1:
  if (argc == 2) { return _wrap_ofxTimeline_bringTrackToTop__SWIG_0(L);} 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofxTimeline_bringTrackToTop'\n"
  "  Possible C/C++ prototypes are:\n" "    ofxTimeline::bringTrackToTop(string)\n"
  "    ofxTimeline::bringTrackToTop(ofxTLTrack *)\n"); lua_error(L);return 0; }
static int _wrap_ofxTimeline_bringTrackToBottom__SWIG_0(lua_State* L) { { int SWIG_arg = 0;
    ofxTimeline *arg1 = (ofxTimeline *) 0 ; string arg2 ; SWIG_check_num_args("ofxTimeline::bringTrackToBottom",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::bringTrackToBottom",1,"ofxTimeline *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxTimeline::bringTrackToBottom",2,"string");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_bringTrackToBottom",1,SWIGTYPE_p_ofxTimeline); } 
    (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2)); (arg1)->bringTrackToBottom(arg2); return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ofxTimeline_bringTrackToBottom__SWIG_1(lua_State* L) { { int SWIG_arg = 0;
    ofxTimeline *arg1 = (ofxTimeline *) 0 ; ofxTLTrack *arg2 = (ofxTLTrack *) 0 ;
    SWIG_check_num_args("ofxTimeline::bringTrackToBottom",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::bringTrackToBottom",1,"ofxTimeline *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofxTimeline::bringTrackToBottom",2,"ofxTLTrack *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_bringTrackToBottom",1,SWIGTYPE_p_ofxTimeline); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofxTLTrack,0))){
      SWIG_fail_ptr("ofxTimeline_bringTrackToBottom",2,SWIGTYPE_p_ofxTLTrack); }  (arg1)->bringTrackToBottom(arg2);
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_bringTrackToBottom(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L);
  if (argc == 2) { int _v = 0; { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofxTLTrack, 0)) { _v = 0; }
         else { _v = 1; }  } }  if (!_v) goto check_1; return _wrap_ofxTimeline_bringTrackToBottom__SWIG_1(L);}  check_1:
  if (argc == 2) { return _wrap_ofxTimeline_bringTrackToBottom__SWIG_0(L);} 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofxTimeline_bringTrackToBottom'\n"
  "  Possible C/C++ prototypes are:\n" "    ofxTimeline::bringTrackToBottom(string)\n"
  "    ofxTimeline::bringTrackToBottom(ofxTLTrack *)\n"); lua_error(L);return 0; }
static int _wrap_ofxTimeline_setupFont__SWIG_0(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    SWIG_check_num_args("ofxTimeline::setupFont",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::setupFont",1,"ofxTimeline *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_setupFont",1,SWIGTYPE_p_ofxTimeline); }  (arg1)->setupFont(); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_setupFont__SWIG_1(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    string arg2 ; int arg3 ; SWIG_check_num_args("ofxTimeline::setupFont",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::setupFont",1,"ofxTimeline *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxTimeline::setupFont",2,"string");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxTimeline::setupFont",3,"int");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_setupFont",1,SWIGTYPE_p_ofxTimeline); }  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
    arg3 = (int)lua_tonumber(L, 3); (arg1)->setupFont(arg2,arg3); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_setupFont(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 1) {
    return _wrap_ofxTimeline_setupFont__SWIG_0(L);}  if (argc == 3) { return _wrap_ofxTimeline_setupFont__SWIG_1(L);} 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofxTimeline_setupFont'\n"
  "  Possible C/C++ prototypes are:\n" "    ofxTimeline::setupFont()\n" "    ofxTimeline::setupFont(string,int)\n");
  lua_error(L);return 0; }
static int _wrap_ofxTimeline_getFont(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    ofTrueTypeFont *result = 0 ; SWIG_check_num_args("ofxTimeline::getFont",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::getFont",1,"ofxTimeline *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_getFont",1,SWIGTYPE_p_ofxTimeline); }  result = (ofTrueTypeFont *) &(arg1)->getFont();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofTrueTypeFont,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ofxTimeline_getColors(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    ofxTLColors *result = 0 ; SWIG_check_num_args("ofxTimeline::getColors",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::getColors",1,"ofxTimeline *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_getColors",1,SWIGTYPE_p_ofxTimeline); }  result = (ofxTLColors *) &(arg1)->getColors();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxTLColors,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ofxTimeline_getTimecode(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    ofxTimecode *result = 0 ; SWIG_check_num_args("ofxTimeline::getTimecode",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::getTimecode",1,"ofxTimeline *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_getTimecode",1,SWIGTYPE_p_ofxTimeline); }  result = (ofxTimecode *) &(arg1)->getTimecode();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxTimecode,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ofxTimeline_getTimer(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    ofxMSATimer *result = 0 ; SWIG_check_num_args("ofxTimeline::getTimer",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::getTimer",1,"ofxTimeline *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_getTimer",1,SWIGTYPE_p_ofxTimeline); }  result = (ofxMSATimer *) &(arg1)->getTimer();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxMSATimer,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ofxTimeline_getZoomer(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    ofxTLZoomer *result = 0 ; SWIG_check_num_args("ofxTimeline::getZoomer",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::getZoomer",1,"ofxTimeline *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_getZoomer",1,SWIGTYPE_p_ofxTimeline); }  result = (ofxTLZoomer *)(arg1)->getZoomer();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxTLZoomer,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ofxTimeline_getPages(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    vector< ofxTLPage * > *result = 0 ; SWIG_check_num_args("ofxTimeline::getPages",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::getPages",1,"ofxTimeline *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_getPages",1,SWIGTYPE_p_ofxTimeline); }  result = (vector< ofxTLPage * > *) &(arg1)->getPages();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_vectorT_ofxTLPage_p_t,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; } 
  lua_error(L); return 0; }
static int _wrap_ofxTimeline_getNudgePercent(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    ofVec2f result; SWIG_check_num_args("ofxTimeline::getNudgePercent",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::getNudgePercent",1,"ofxTimeline *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_getNudgePercent",1,SWIGTYPE_p_ofxTimeline); }  result = (arg1)->getNudgePercent(); {
      ofVec2f * resultptr = new ofVec2f(result); SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec2f,1); SWIG_arg++; } 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_getBigNudgePercent(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    ofVec2f result; SWIG_check_num_args("ofxTimeline::getBigNudgePercent",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::getBigNudgePercent",1,"ofxTimeline *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_getBigNudgePercent",1,SWIGTYPE_p_ofxTimeline); }  result = (arg1)->getBigNudgePercent(); {
      ofVec2f * resultptr = new ofVec2f(result); SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec2f,1); SWIG_arg++; } 
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_setDragTimeOffset(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    unsigned long long arg2 ; SWIG_check_num_args("ofxTimeline::setDragTimeOffset",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::setDragTimeOffset",1,"ofxTimeline *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxTimeline::setDragTimeOffset",2,"unsigned long long");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_setDragTimeOffset",1,SWIGTYPE_p_ofxTimeline); }  arg2 = (unsigned long long)lua_tonumber(L, 2);
    (arg1)->setDragTimeOffset(arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_cancelSnapping(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    SWIG_check_num_args("ofxTimeline::cancelSnapping",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::cancelSnapping",1,"ofxTimeline *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_cancelSnapping",1,SWIGTYPE_p_ofxTimeline); }  (arg1)->cancelSnapping(); return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_getDragTimeOffset(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    long result; SWIG_check_num_args("ofxTimeline::getDragTimeOffset",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::getDragTimeOffset",1,"ofxTimeline *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_getDragTimeOffset",1,SWIGTYPE_p_ofxTimeline); }  result = (long)(arg1)->getDragTimeOffset();
    lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_setHoverTime(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    unsigned long long arg2 ; SWIG_check_num_args("ofxTimeline::setHoverTime",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::setHoverTime",1,"ofxTimeline *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxTimeline::setHoverTime",2,"unsigned long long");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_setHoverTime",1,SWIGTYPE_p_ofxTimeline); }  arg2 = (unsigned long long)lua_tonumber(L, 2);
    (arg1)->setHoverTime(arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_formatTime__SWIG_0(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    float arg2 ; string result; SWIG_check_num_args("ofxTimeline::formatTime",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::formatTime",1,"ofxTimeline *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxTimeline::formatTime",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_formatTime",1,SWIGTYPE_p_ofxTimeline); }  arg2 = (float)lua_tonumber(L, 2);
    result = (arg1)->formatTime(arg2); lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_formatTime__SWIG_1(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    unsigned long long arg2 ; string result; SWIG_check_num_args("ofxTimeline::formatTime",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::formatTime",1,"ofxTimeline *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxTimeline::formatTime",2,"unsigned long long");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_formatTime",1,SWIGTYPE_p_ofxTimeline); }  arg2 = (unsigned long long)lua_tonumber(L, 2);
    result = (arg1)->formatTime(arg2); lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_formatTime(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 2) {
    return _wrap_ofxTimeline_formatTime__SWIG_0(L);}  if (argc == 2) { return _wrap_ofxTimeline_formatTime__SWIG_1(L);} 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofxTimeline_formatTime'\n"
  "  Possible C/C++ prototypes are:\n" "    ofxTimeline::formatTime(float)\n"
  "    ofxTimeline::formatTime(unsigned long long)\n"); lua_error(L);return 0; }
static int _wrap_ofxTimeline_nameToXMLName(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    string arg2 ; string result; SWIG_check_num_args("ofxTimeline::nameToXMLName",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::nameToXMLName",1,"ofxTimeline *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxTimeline::nameToXMLName",2,"string");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_nameToXMLName",1,SWIGTYPE_p_ofxTimeline); } 
    (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2)); result = (arg1)->nameToXMLName(arg2);
    lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ofxTimeline_confirmedUniqueName(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    string arg2 ; string result; SWIG_check_num_args("ofxTimeline::confirmedUniqueName",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::confirmedUniqueName",1,"ofxTimeline *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxTimeline::confirmedUniqueName",2,"string");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_confirmedUniqueName",1,SWIGTYPE_p_ofxTimeline); } 
    (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2)); result = (arg1)->confirmedUniqueName(arg2);
    lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ofxTimeline_createPlaybackEvent(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    ofxTLPlaybackEventArgs result; SWIG_check_num_args("ofxTimeline::createPlaybackEvent",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::createPlaybackEvent",1,"ofxTimeline *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_createPlaybackEvent",1,SWIGTYPE_p_ofxTimeline); }  result = (arg1)->createPlaybackEvent(); {
      ofxTLPlaybackEventArgs * resultptr = new ofxTLPlaybackEventArgs(result);
      SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofxTLPlaybackEventArgs,1); SWIG_arg++; }  return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_presentedModalContent(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    ofxTLTrack *arg2 = (ofxTLTrack *) 0 ; SWIG_check_num_args("ofxTimeline::presentedModalContent",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::presentedModalContent",1,"ofxTimeline *");
    if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofxTimeline::presentedModalContent",2,"ofxTLTrack *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_presentedModalContent",1,SWIGTYPE_p_ofxTimeline); } 
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofxTLTrack,0))){
      SWIG_fail_ptr("ofxTimeline_presentedModalContent",2,SWIGTYPE_p_ofxTLTrack); }  (arg1)->presentedModalContent(arg2);
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_dismissedModalContent(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    SWIG_check_num_args("ofxTimeline::dismissedModalContent",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::dismissedModalContent",1,"ofxTimeline *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_dismissedModalContent",1,SWIGTYPE_p_ofxTimeline); }  (arg1)->dismissedModalContent();
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_screenXToMillis(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    float arg2 ; long result; SWIG_check_num_args("ofxTimeline::screenXToMillis",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::screenXToMillis",1,"ofxTimeline *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxTimeline::screenXToMillis",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_screenXToMillis",1,SWIGTYPE_p_ofxTimeline); }  arg2 = (float)lua_tonumber(L, 2);
    result = (long)(arg1)->screenXToMillis(arg2); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_millisToScreenX(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    long arg2 ; float result; SWIG_check_num_args("ofxTimeline::millisToScreenX",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::millisToScreenX",1,"ofxTimeline *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxTimeline::millisToScreenX",2,"long");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_millisToScreenX",1,SWIGTYPE_p_ofxTimeline); }  arg2 = (long)lua_tonumber(L, 2);
    result = (float)(arg1)->millisToScreenX(arg2); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_screenXtoNormalizedX__SWIG_0(lua_State* L) { { int SWIG_arg = 0;
    ofxTimeline *arg1 = (ofxTimeline *) 0 ; float arg2 ; float result;
    SWIG_check_num_args("ofxTimeline::screenXtoNormalizedX",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::screenXtoNormalizedX",1,"ofxTimeline *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxTimeline::screenXtoNormalizedX",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_screenXtoNormalizedX",1,SWIGTYPE_p_ofxTimeline); }  arg2 = (float)lua_tonumber(L, 2);
    result = (float)(arg1)->screenXtoNormalizedX(arg2); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_normalizedXtoScreenX__SWIG_0(lua_State* L) { { int SWIG_arg = 0;
    ofxTimeline *arg1 = (ofxTimeline *) 0 ; float arg2 ; float result;
    SWIG_check_num_args("ofxTimeline::normalizedXtoScreenX",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::normalizedXtoScreenX",1,"ofxTimeline *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxTimeline::normalizedXtoScreenX",2,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_normalizedXtoScreenX",1,SWIGTYPE_p_ofxTimeline); }  arg2 = (float)lua_tonumber(L, 2);
    result = (float)(arg1)->normalizedXtoScreenX(arg2); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
    fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_screenXtoNormalizedX__SWIG_1(lua_State* L) { { int SWIG_arg = 0;
    ofxTimeline *arg1 = (ofxTimeline *) 0 ; float arg2 ; ofRange arg3 ; ofRange *argp3 ; float result;
    SWIG_check_num_args("ofxTimeline::screenXtoNormalizedX",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::screenXtoNormalizedX",1,"ofxTimeline *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxTimeline::screenXtoNormalizedX",2,"float");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofxTimeline::screenXtoNormalizedX",3,"ofRange");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_screenXtoNormalizedX",1,SWIGTYPE_p_ofxTimeline); }  arg2 = (float)lua_tonumber(L, 2);
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_ofRange,0))){
      SWIG_fail_ptr("ofxTimeline_screenXtoNormalizedX",3,SWIGTYPE_p_ofRange); }  arg3 = *argp3;
    result = (float)(arg1)->screenXtoNormalizedX(arg2,arg3); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_screenXtoNormalizedX(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L);
  if (argc == 2) { return _wrap_ofxTimeline_screenXtoNormalizedX__SWIG_0(L);}  if (argc == 3) {
    return _wrap_ofxTimeline_screenXtoNormalizedX__SWIG_1(L);} 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofxTimeline_screenXtoNormalizedX'\n"
  "  Possible C/C++ prototypes are:\n" "    ofxTimeline::screenXtoNormalizedX(float)\n"
  "    ofxTimeline::screenXtoNormalizedX(float,ofRange)\n"); lua_error(L);return 0; }
static int _wrap_ofxTimeline_normalizedXtoScreenX__SWIG_1(lua_State* L) { { int SWIG_arg = 0;
    ofxTimeline *arg1 = (ofxTimeline *) 0 ; float arg2 ; ofRange arg3 ; ofRange *argp3 ; float result;
    SWIG_check_num_args("ofxTimeline::normalizedXtoScreenX",3,3)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::normalizedXtoScreenX",1,"ofxTimeline *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxTimeline::normalizedXtoScreenX",2,"float");
    if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofxTimeline::normalizedXtoScreenX",3,"ofRange");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_normalizedXtoScreenX",1,SWIGTYPE_p_ofxTimeline); }  arg2 = (float)lua_tonumber(L, 2);
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_ofRange,0))){
      SWIG_fail_ptr("ofxTimeline_normalizedXtoScreenX",3,SWIGTYPE_p_ofRange); }  arg3 = *argp3;
    result = (float)(arg1)->normalizedXtoScreenX(arg2,arg3); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_normalizedXtoScreenX(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L);
  if (argc == 2) { return _wrap_ofxTimeline_normalizedXtoScreenX__SWIG_0(L);}  if (argc == 3) {
    return _wrap_ofxTimeline_normalizedXtoScreenX__SWIG_1(L);} 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofxTimeline_normalizedXtoScreenX'\n"
  "  Possible C/C++ prototypes are:\n" "    ofxTimeline::normalizedXtoScreenX(float)\n"
  "    ofxTimeline::normalizedXtoScreenX(float,ofRange)\n"); lua_error(L);return 0; }
static int _wrap_ofxTimeline_events(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    ofxTLEvents *result = 0 ; SWIG_check_num_args("ofxTimeline::events",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::events",1,"ofxTimeline *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_events",1,SWIGTYPE_p_ofxTimeline); }  result = (ofxTLEvents *) &(arg1)->events();
    SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxTLEvents,0); SWIG_arg++;  return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ofxTimeline_curvesUseBinary_set(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    bool arg2 ; SWIG_check_num_args("ofxTimeline::curvesUseBinary",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::curvesUseBinary",1,"ofxTimeline *");
    if(!lua_isboolean(L,2)) SWIG_fail_arg("ofxTimeline::curvesUseBinary",2,"bool");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_curvesUseBinary_set",1,SWIGTYPE_p_ofxTimeline); }  arg2 = (lua_toboolean(L, 2)!=0);
    if (arg1) (arg1)->curvesUseBinary = arg2; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_curvesUseBinary_get(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    bool result; SWIG_check_num_args("ofxTimeline::curvesUseBinary",1,1)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::curvesUseBinary",1,"ofxTimeline *");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_curvesUseBinary_get",1,SWIGTYPE_p_ofxTimeline); }  result = (bool) ((arg1)->curvesUseBinary);
    lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_setLoopType__SWIG_1(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    short arg2 ; SWIG_check_num_args("ofxTimeline::setLoopType",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::setLoopType",1,"ofxTimeline *");
    if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxTimeline::setLoopType",2,"short");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_setLoopType",1,SWIGTYPE_p_ofxTimeline); }  arg2 = (short)lua_tonumber(L, 2);
    ofxTimeline_setLoopType__SWIG_1(arg1,arg2); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_setLoopType(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 2) {
    int _v = 0; { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofLoopType, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  } }  if (!_v) goto check_1; return _wrap_ofxTimeline_setLoopType__SWIG_0(L);}  check_1:
  if (argc == 2) { return _wrap_ofxTimeline_setLoopType__SWIG_1(L);} 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofxTimeline_setLoopType'\n"
  "  Possible C/C++ prototypes are:\n" "    ofxTimeline::setLoopType(ofLoopType)\n" "    ofxTimeline::setLoopType(short)\n");
  lua_error(L);return 0; }
static int _wrap_ofxTimeline_getR(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ; string arg2 ;
    float result; SWIG_check_num_args("ofxTimeline::getR",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::getR",1,"ofxTimeline *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxTimeline::getR",2,"string");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_getR",1,SWIGTYPE_p_ofxTimeline); }  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
    result = (float)ofxTimeline_getR(arg1,SWIG_STD_MOVE(arg2)); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_getG(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ; string arg2 ;
    float result; SWIG_check_num_args("ofxTimeline::getG",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::getG",1,"ofxTimeline *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxTimeline::getG",2,"string");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_getG",1,SWIGTYPE_p_ofxTimeline); }  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
    result = (float)ofxTimeline_getG(arg1,SWIG_STD_MOVE(arg2)); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_getB(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ; string arg2 ;
    float result; SWIG_check_num_args("ofxTimeline::getB",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::getB",1,"ofxTimeline *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxTimeline::getB",2,"string");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_getB",1,SWIGTYPE_p_ofxTimeline); }  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
    result = (float)ofxTimeline_getB(arg1,SWIG_STD_MOVE(arg2)); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_getA(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ; string arg2 ;
    float result; SWIG_check_num_args("ofxTimeline::getA",2,2)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::getA",1,"ofxTimeline *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxTimeline::getA",2,"string");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_getA",1,SWIGTYPE_p_ofxTimeline); }  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
    result = (float)ofxTimeline_getA(arg1,SWIG_STD_MOVE(arg2)); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
    return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L); return 0; }
static int _wrap_ofxTimeline_addCurves__SWIG_6(lua_State* L) { { int SWIG_arg = 0; ofxTimeline *arg1 = (ofxTimeline *) 0 ;
    string arg2 ; float arg3 ; float arg4 ; SWIG_check_num_args("ofxTimeline::addCurves",4,4)
    if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTimeline::addCurves",1,"ofxTimeline *");
    if(!lua_isstring(L,2)) SWIG_fail_arg("ofxTimeline::addCurves",2,"string");
    if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxTimeline::addCurves",3,"float");
    if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxTimeline::addCurves",4,"float");
    if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTimeline,0))){
      SWIG_fail_ptr("ofxTimeline_addCurves",1,SWIGTYPE_p_ofxTimeline); }  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
    arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
    ofxTimeline_addCurves__SWIG_6(arg1,SWIG_STD_MOVE(arg2),arg3,arg4); return SWIG_arg; fail: SWIGUNUSED; }  lua_error(L);
  return 0; }
static int _wrap_ofxTimeline_addCurves(lua_State* L) { int argc; int argv[6]={ 1,2,3,4,5,6} ; argc = lua_gettop(L);
  if (argc == 2) { return _wrap_ofxTimeline_addCurves__SWIG_2(L);}  if (argc == 3) { int _v = 0; { { void *ptr;
        if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofRange, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  } }  if (!_v) goto check_2; return _wrap_ofxTimeline_addCurves__SWIG_1(L);}  check_2:
  if (argc == 3) { return _wrap_ofxTimeline_addCurves__SWIG_5(L);}  if (argc == 4) { int _v = 0; { { void *ptr;
        if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofRange, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  } }  if (!_v) goto check_4; { { _v = lua_isnumber(L,argv[3]); } }  if (!_v) goto check_4;
    return _wrap_ofxTimeline_addCurves__SWIG_0(L);}  check_4: if (argc == 4) { int _v = 0; { { _v = lua_isnumber(L,argv[2]); } }
     if (!_v) goto check_5; { { _v = lua_isnumber(L,argv[3]); } }  if (!_v) goto check_5;
    return _wrap_ofxTimeline_addCurves__SWIG_6(L);}  check_5: if (argc == 4) { return _wrap_ofxTimeline_addCurves__SWIG_4(L);} 
  if (argc == 5) { return _wrap_ofxTimeline_addCurves__SWIG_3(L);} 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofxTimeline_addCurves'\n"
  "  Possible C/C++ prototypes are:\n" "    ofxTimeline::addCurves(string,ofRange,float)\n"
  "    ofxTimeline::addCurves(string,ofRange)\n" "    ofxTimeline::addCurves(string)\n"
  "    ofxTimeline::addCurves(string,string,ofRange,float)\n" "    ofxTimeline::addCurves(string,string,ofRange)\n"
  "    ofxTimeline::addCurves(string,string)\n" "    ofxTimeline::addCurves(string,float,float)\n"); lua_error(L);return 0; }
static void swig_delete_ofxTimeline(void *obj) {
ofxTimeline *arg1 = (ofxTimeline *) obj;
delete arg1;
}
static int _proxy__wrap_new_ofxTimeline(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ofxTimeline);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ofxTimeline_attributes[] = {
    { "curvesUseBinary", _wrap_ofxTimeline_curvesUseBinary_get, _wrap_ofxTimeline_curvesUseBinary_set },
    {0,0,0}
};
static swig_lua_method swig_ofxTimeline_methods[]= {
    { "setup", _wrap_ofxTimeline_setup},
    { "moveToThread", _wrap_ofxTimeline_moveToThread},
    { "removeFromThread", _wrap_ofxTimeline_removeFromThread},
    { "toggleEnabled", _wrap_ofxTimeline_toggleEnabled},
    { "enable", _wrap_ofxTimeline_enable},
    { "disable", _wrap_ofxTimeline_disable},
    { "getIsEnabled", _wrap_ofxTimeline_getIsEnabled},
    { "enableEvents", _wrap_ofxTimeline_enableEvents},
    { "disableEvents", _wrap_ofxTimeline_disableEvents},
    { "clear", _wrap_ofxTimeline_clear},
    { "reset", _wrap_ofxTimeline_reset},
    { "setName", _wrap_ofxTimeline_setName},
    { "getName", _wrap_ofxTimeline_getName},
    { "play", _wrap_ofxTimeline_play},
    { "stop", _wrap_ofxTimeline_stop},
    { "togglePlay", _wrap_ofxTimeline_togglePlay},
    { "getIsPlaying", _wrap_ofxTimeline_getIsPlaying},
    { "getSpacebarTogglesPlay", _wrap_ofxTimeline_getSpacebarTogglesPlay},
    { "setSpacebarTogglePlay", _wrap_ofxTimeline_setSpacebarTogglePlay},
    { "playSelectedTrack", _wrap_ofxTimeline_playSelectedTrack},
    { "stopSelectedTrack", _wrap_ofxTimeline_stopSelectedTrack},
    { "togglePlaySelectedTrack", _wrap_ofxTimeline_togglePlaySelectedTrack},
    { "getLoopType", _wrap_ofxTimeline_getLoopType},
    { "isDone", _wrap_ofxTimeline_isDone},
    { "toggleShow", _wrap_ofxTimeline_toggleShow},
    { "show", _wrap_ofxTimeline_show},
    { "hide", _wrap_ofxTimeline_hide},
    { "getIsShowing", _wrap_ofxTimeline_getIsShowing},
    { "draw", _wrap_ofxTimeline_draw},
    { "mousePressed", _wrap_ofxTimeline_mousePressed},
    { "mouseMoved", _wrap_ofxTimeline_mouseMoved},
    { "mouseDragged", _wrap_ofxTimeline_mouseDragged},
    { "mouseReleased", _wrap_ofxTimeline_mouseReleased},
    { "keyPressed", _wrap_ofxTimeline_keyPressed},
    { "keyReleased", _wrap_ofxTimeline_keyReleased},
    { "windowResized", _wrap_ofxTimeline_windowResized},
    { "exit", _wrap_ofxTimeline_exit},
    { "setShowTimeControls", _wrap_ofxTimeline_setShowTimeControls},
    { "setShowTicker", _wrap_ofxTimeline_setShowTicker},
    { "setShowInoutControl", _wrap_ofxTimeline_setShowInoutControl},
    { "setShowZoomer", _wrap_ofxTimeline_setShowZoomer},
    { "setWorkingFolder", _wrap_ofxTimeline_setWorkingFolder},
    { "getWorkingFolder", _wrap_ofxTimeline_getWorkingFolder},
    { "loadTracksFromFolder", _wrap_ofxTimeline_loadTracksFromFolder},
    { "saveTracksToFolder", _wrap_ofxTimeline_saveTracksToFolder},
    { "setDefaultFontPath", _wrap_ofxTimeline_setDefaultFontPath},
    { "setFrameRate", _wrap_ofxTimeline_setFrameRate},
    { "setDurationInFrames", _wrap_ofxTimeline_setDurationInFrames},
    { "setDurationInSeconds", _wrap_ofxTimeline_setDurationInSeconds},
    { "setDurationInMillis", _wrap_ofxTimeline_setDurationInMillis},
    { "setDurationInTimecode", _wrap_ofxTimeline_setDurationInTimecode},
    { "getDurationInFrames", _wrap_ofxTimeline_getDurationInFrames},
    { "getDurationInSeconds", _wrap_ofxTimeline_getDurationInSeconds},
    { "getDurationInMilliseconds", _wrap_ofxTimeline_getDurationInMilliseconds},
    { "getDurationInTimecode", _wrap_ofxTimeline_getDurationInTimecode},
    { "setFrameBased", _wrap_ofxTimeline_setFrameBased},
    { "getIsFrameBased", _wrap_ofxTimeline_getIsFrameBased},
    { "setAutosave", _wrap_ofxTimeline_setAutosave},
    { "save", _wrap_ofxTimeline_save},
    { "hasUnsavedChanges", _wrap_ofxTimeline_hasUnsavedChanges},
    { "setCurrentFrame", _wrap_ofxTimeline_setCurrentFrame},
    { "setCurrentTimeSeconds", _wrap_ofxTimeline_setCurrentTimeSeconds},
    { "setCurrentTimeMillis", _wrap_ofxTimeline_setCurrentTimeMillis},
    { "setPercentComplete", _wrap_ofxTimeline_setPercentComplete},
    { "setCurrentTimecode", _wrap_ofxTimeline_setCurrentTimecode},
    { "setCurrentTimeToInPoint", _wrap_ofxTimeline_setCurrentTimeToInPoint},
    { "setCurrentTimeToOutPoint", _wrap_ofxTimeline_setCurrentTimeToOutPoint},
    { "getCurrentFrame", _wrap_ofxTimeline_getCurrentFrame},
    { "getCurrentPageIndex", _wrap_ofxTimeline_getCurrentPageIndex},
    { "getCurrentPageName", _wrap_ofxTimeline_getCurrentPageName},
    { "getCurrentTime", _wrap_ofxTimeline_getCurrentTime},
    { "getCurrentTimeMillis", _wrap_ofxTimeline_getCurrentTimeMillis},
    { "getPercentComplete", _wrap_ofxTimeline_getPercentComplete},
    { "getCurrentTimecode", _wrap_ofxTimeline_getCurrentTimecode},
    { "getQuantizedTime", _wrap_ofxTimeline_getQuantizedTime},
    { "flagUserChangedValue", _wrap_ofxTimeline_flagUserChangedValue},
    { "getUserChangedValue", _wrap_ofxTimeline_getUserChangedValue},
    { "flagTrackModified", _wrap_ofxTimeline_flagTrackModified},
    { "setInPointAtPercent", _wrap_ofxTimeline_setInPointAtPercent},
    { "setInPointAtFrame", _wrap_ofxTimeline_setInPointAtFrame},
    { "setInPointAtSeconds", _wrap_ofxTimeline_setInPointAtSeconds},
    { "setInPointAtMillis", _wrap_ofxTimeline_setInPointAtMillis},
    { "setInPointAtTimecode", _wrap_ofxTimeline_setInPointAtTimecode},
    { "setInPointAtPlayhead", _wrap_ofxTimeline_setInPointAtPlayhead},
    { "setOutPointAtPercent", _wrap_ofxTimeline_setOutPointAtPercent},
    { "setOutPointAtFrame", _wrap_ofxTimeline_setOutPointAtFrame},
    { "setOutPointAtSeconds", _wrap_ofxTimeline_setOutPointAtSeconds},
    { "setOutPointAtMillis", _wrap_ofxTimeline_setOutPointAtMillis},
    { "setOutPointAtTimecode", _wrap_ofxTimeline_setOutPointAtTimecode},
    { "setOutPointAtPlayhead", _wrap_ofxTimeline_setOutPointAtPlayhead},
    { "setEditableHeaders", _wrap_ofxTimeline_setEditableHeaders},
    { "areHeadersEditable", _wrap_ofxTimeline_areHeadersEditable},
    { "setMinimalHeaders", _wrap_ofxTimeline_setMinimalHeaders},
    { "areHeadersMinimal", _wrap_ofxTimeline_areHeadersMinimal},
    { "toggleShowFooters", _wrap_ofxTimeline_toggleShowFooters},
    { "setFootersHidden", _wrap_ofxTimeline_setFootersHidden},
    { "areFootersHidden", _wrap_ofxTimeline_areFootersHidden},
    { "setInOutRange", _wrap_ofxTimeline_setInOutRange},
    { "setInOutRangeMillis", _wrap_ofxTimeline_setInOutRangeMillis},
    { "clearInOut", _wrap_ofxTimeline_clearInOut},
    { "getInOutRange", _wrap_ofxTimeline_getInOutRange},
    { "getInOutRangeMillis", _wrap_ofxTimeline_getInOutRangeMillis},
    { "getInFrame", _wrap_ofxTimeline_getInFrame},
    { "getInTimeInSeconds", _wrap_ofxTimeline_getInTimeInSeconds},
    { "getInTimeInMillis", _wrap_ofxTimeline_getInTimeInMillis},
    { "getInPointTimecode", _wrap_ofxTimeline_getInPointTimecode},
    { "getOutFrame", _wrap_ofxTimeline_getOutFrame},
    { "getOutTimeInSeconds", _wrap_ofxTimeline_getOutTimeInSeconds},
    { "getOutTimeInMillis", _wrap_ofxTimeline_getOutTimeInMillis},
    { "getOutPointTimecode", _wrap_ofxTimeline_getOutPointTimecode},
    { "setOffset", _wrap_ofxTimeline_setOffset},
    { "setLockWidthToWindow", _wrap_ofxTimeline_setLockWidthToWindow},
    { "getLockWidthToWindow", _wrap_ofxTimeline_getLockWidthToWindow},
    { "setWidth", _wrap_ofxTimeline_setWidth},
    { "setHeight", _wrap_ofxTimeline_setHeight},
    { "collapseAllTracks", _wrap_ofxTimeline_collapseAllTracks},
    { "getDrawRect", _wrap_ofxTimeline_getDrawRect},
    { "getWidth", _wrap_ofxTimeline_getWidth},
    { "getHeight", _wrap_ofxTimeline_getHeight},
    { "getTopRight", _wrap_ofxTimeline_getTopRight},
    { "getTopLeft", _wrap_ofxTimeline_getTopLeft},
    { "getBottomLeft", _wrap_ofxTimeline_getBottomLeft},
    { "getBottomRight", _wrap_ofxTimeline_getBottomRight},
    { "setBPM", _wrap_ofxTimeline_setBPM},
    { "getBPM", _wrap_ofxTimeline_getBPM},
    { "toggleSnapToBPM", _wrap_ofxTimeline_toggleSnapToBPM},
    { "enableSnapToBPM", _wrap_ofxTimeline_enableSnapToBPM},
    { "getSnapToBPM", _wrap_ofxTimeline_getSnapToBPM},
    { "toggleShowBPMGrid", _wrap_ofxTimeline_toggleShowBPMGrid},
    { "setShowBPMGrid", _wrap_ofxTimeline_setShowBPMGrid},
    { "getShowBPMGrid", _wrap_ofxTimeline_getShowBPMGrid},
    { "toggleSnapToOtherKeyframes", _wrap_ofxTimeline_toggleSnapToOtherKeyframes},
    { "enableSnapToOtherKeyframes", _wrap_ofxTimeline_enableSnapToOtherKeyframes},
    { "getSnapToOtherElements", _wrap_ofxTimeline_getSnapToOtherElements},
    { "setMovePlayheadOnPaste", _wrap_ofxTimeline_setMovePlayheadOnPaste},
    { "getMovePlayheadOnPaste", _wrap_ofxTimeline_getMovePlayheadOnPaste},
    { "getPasteboard", _wrap_ofxTimeline_getPasteboard},
    { "enableUndo", _wrap_ofxTimeline_enableUndo},
    { "undo", _wrap_ofxTimeline_undo},
    { "redo", _wrap_ofxTimeline_redo},
    { "setMovePlayheadOnDrag", _wrap_ofxTimeline_setMovePlayheadOnDrag},
    { "getMovePlayheadOnDrag", _wrap_ofxTimeline_getMovePlayheadOnDrag},
    { "unselectAll", _wrap_ofxTimeline_unselectAll},
    { "addPage", _wrap_ofxTimeline_addPage},
    { "setPageName", _wrap_ofxTimeline_setPageName},
    { "setCurrentPage", _wrap_ofxTimeline_setCurrentPage},
    { "removePage", _wrap_ofxTimeline_removePage},
    { "isModal", _wrap_ofxTimeline_isModal},
    { "getModalTrack", _wrap_ofxTimeline_getModalTrack},
    { "getFocusedTrack", _wrap_ofxTimeline_getFocusedTrack},
    { "setFocusedTrack", _wrap_ofxTimeline_setFocusedTrack},
    { "getTotalSelectedItems", _wrap_ofxTimeline_getTotalSelectedItems},
    { "getEarliestTime", _wrap_ofxTimeline_getEarliestTime},
    { "getLatestTime", _wrap_ofxTimeline_getLatestTime},
    { "getEarliestSelectedTime", _wrap_ofxTimeline_getEarliestSelectedTime},
    { "getLatestSelectedTime", _wrap_ofxTimeline_getLatestSelectedTime},
    { "hasTrack", _wrap_ofxTimeline_hasTrack},
    { "hasPage", _wrap_ofxTimeline_hasPage},
    { "getTrack", _wrap_ofxTimeline_getTrack},
    { "getPage", _wrap_ofxTimeline_getPage},
    { "getValueAtPercent", _wrap_ofxTimeline_getValueAtPercent},
    { "getValue", _wrap_ofxTimeline_getValue},
    { "addLFO", _wrap_ofxTimeline_addLFO},
    { "addSwitches", _wrap_ofxTimeline_addSwitches},
    { "isSwitchOn", _wrap_ofxTimeline_isSwitchOn},
    { "addBangs", _wrap_ofxTimeline_addBangs},
    { "addFlags", _wrap_ofxTimeline_addFlags},
    { "addColors", _wrap_ofxTimeline_addColors},
    { "addColorsWithPalette", _wrap_ofxTimeline_addColorsWithPalette},
    { "getColor", _wrap_ofxTimeline_getColor},
    { "getColorAtPercent", _wrap_ofxTimeline_getColorAtPercent},
    { "getColorAtSecond", _wrap_ofxTimeline_getColorAtSecond},
    { "getColorAtMillis", _wrap_ofxTimeline_getColorAtMillis},
    { "setDefaultColorPalettePath", _wrap_ofxTimeline_setDefaultColorPalettePath},
    { "getDefaultColorPalettePath", _wrap_ofxTimeline_getDefaultColorPalettePath},
    { "addImageSequence", _wrap_ofxTimeline_addImageSequence},
    { "getImage", _wrap_ofxTimeline_getImage},
    { "addVideoTrackWithPath", _wrap_ofxTimeline_addVideoTrackWithPath},
    { "addVideoTrack", _wrap_ofxTimeline_addVideoTrack},
    { "getVideoTrack", _wrap_ofxTimeline_getVideoTrack},
    { "getVideoPlayer", _wrap_ofxTimeline_getVideoPlayer},
    { "addAudioTrackWithPath", _wrap_ofxTimeline_addAudioTrackWithPath},
    { "addAudioTrack", _wrap_ofxTimeline_addAudioTrack},
    { "getAudioTrack", _wrap_ofxTimeline_getAudioTrack},
    { "setTimecontrolTrack", _wrap_ofxTimeline_setTimecontrolTrack},
    { "getTimecontrolTrack", _wrap_ofxTimeline_getTimecontrolTrack},
    { "addTrack", _wrap_ofxTimeline_addTrack},
    { "getTrackHeader", _wrap_ofxTimeline_getTrackHeader},
    { "removeTrack", _wrap_ofxTimeline_removeTrack},
    { "bringTrackToTop", _wrap_ofxTimeline_bringTrackToTop},
    { "bringTrackToBottom", _wrap_ofxTimeline_bringTrackToBottom},
    { "setupFont", _wrap_ofxTimeline_setupFont},
    { "getFont", _wrap_ofxTimeline_getFont},
    { "getColors", _wrap_ofxTimeline_getColors},
    { "getTimecode", _wrap_ofxTimeline_getTimecode},
    { "getTimer", _wrap_ofxTimeline_getTimer},
    { "getZoomer", _wrap_ofxTimeline_getZoomer},
    { "getPages", _wrap_ofxTimeline_getPages},
    { "getNudgePercent", _wrap_ofxTimeline_getNudgePercent},
    { "getBigNudgePercent", _wrap_ofxTimeline_getBigNudgePercent},
    { "setDragTimeOffset", _wrap_ofxTimeline_setDragTimeOffset},
    { "cancelSnapping", _wrap_ofxTimeline_cancelSnapping},
    { "getDragTimeOffset", _wrap_ofxTimeline_getDragTimeOffset},
    { "setHoverTime", _wrap_ofxTimeline_setHoverTime},
    { "formatTime", _wrap_ofxTimeline_formatTime},
    { "nameToXMLName", _wrap_ofxTimeline_nameToXMLName},
    { "confirmedUniqueName", _wrap_ofxTimeline_confirmedUniqueName},
    { "createPlaybackEvent", _wrap_ofxTimeline_createPlaybackEvent},
    { "presentedModalContent", _wrap_ofxTimeline_presentedModalContent},
    { "dismissedModalContent", _wrap_ofxTimeline_dismissedModalContent},
    { "screenXToMillis", _wrap_ofxTimeline_screenXToMillis},
    { "millisToScreenX", _wrap_ofxTimeline_millisToScreenX},
    { "screenXtoNormalizedX", _wrap_ofxTimeline_screenXtoNormalizedX},
    { "normalizedXtoScreenX", _wrap_ofxTimeline_normalizedXtoScreenX},
    { "events", _wrap_ofxTimeline_events},
    { "setLoopType", _wrap_ofxTimeline_setLoopType},
    { "getR", _wrap_ofxTimeline_getR},
    { "getG", _wrap_ofxTimeline_getG},
    { "getB", _wrap_ofxTimeline_getB},
    { "getA", _wrap_ofxTimeline_getA},
    { "addCurves", _wrap_ofxTimeline_addCurves},
    {0,0}
};
static swig_lua_method swig_ofxTimeline_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ofxTimeline_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ofxTimeline_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ofxTimeline_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ofxTimeline_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ofxTimeline_Sf_SwigStatic = {
    "ofxTimeline",
    swig_ofxTimeline_Sf_SwigStatic_methods,
    swig_ofxTimeline_Sf_SwigStatic_attributes,
    swig_ofxTimeline_Sf_SwigStatic_constants,
    swig_ofxTimeline_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ofxTimeline_bases[] = {0};
static const char *swig_ofxTimeline_base_names[] = {0};
static swig_lua_class _wrap_class_ofxTimeline = { "ofxTimeline", "ofxTimeline", &SWIGTYPE_p_ofxTimeline,_proxy__wrap_new_ofxTimeline, swig_delete_ofxTimeline, swig_ofxTimeline_methods, swig_ofxTimeline_attributes, &swig_ofxTimeline_Sf_SwigStatic, swig_ofxTimeline_meta, swig_ofxTimeline_bases, swig_ofxTimeline_base_names };

static swig_lua_attribute swig_SwigModule_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SwigModule_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("OFXTL_CAMERA_EASE_LINEAR", OFXTL_CAMERA_EASE_LINEAR)},
    {SWIG_LUA_CONSTTAB_INT("OFXTL_CAMERA_EASE_SMOOTH", OFXTL_CAMERA_EASE_SMOOTH)},
    {SWIG_LUA_CONSTTAB_INT("OFXTL_CAMERA_EASE_CUT", OFXTL_CAMERA_EASE_CUT)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SwigModule_methods[]= {
    { "glTypeForImageType", _wrap_glTypeForImageType},
    {0,0}
};
static swig_lua_class* swig_SwigModule_classes[]= {
&_wrap_class_string,
&_wrap_class_ofxTLTrack,
&_wrap_class_ofxTLKeyframe,
&_wrap_class_ofxTLKeyframes,
&_wrap_class_ofxTLColorSample,
&_wrap_class_ofxTLColorTrack,
&_wrap_class_ClickPoint,
&_wrap_class_ofxTLEmptyTrack,
&_wrap_class_ofxTLEmptyKeyframe,
&_wrap_class_ofxTLEmptyKeyframes,
&_wrap_class_ofxTLVideoTrack,
&_wrap_class_PreviewTexture,
&_wrap_class_ofxTLImageSequence,
&_wrap_class_ofxTLSwitch,
&_wrap_class_ofxTLSwitches,
&_wrap_class_ofxTLBangs,
&_wrap_class_ofxTLCameraFrame,
&_wrap_class_ofxTLCameraTrack,
&_wrap_class_ofxTLAudioTrack,
&_wrap_class_UndoItem,
&_wrap_class_ofxTimeline,
    0
};
static swig_lua_namespace* swig_SwigModule_namespaces[] = {
    0
};

static swig_lua_namespace swig_SwigModule = {
    "ofxTimeline",
    swig_SwigModule_methods,
    swig_SwigModule_attributes,
    swig_SwigModule_constants,
    swig_SwigModule_classes,
    swig_SwigModule_namespaces
};
#ifdef __cplusplus
}
#endif

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_ofxTLCameraFrameTo_p_ofxTLKeyframe(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofxTLKeyframe *)  ((ofxTLCameraFrame *) x));
}
static void *_p_ofxTLColorSampleTo_p_ofxTLKeyframe(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofxTLKeyframe *)  ((ofxTLColorSample *) x));
}
static void *_p_ofxTLEmptyKeyframeTo_p_ofxTLKeyframe(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofxTLKeyframe *)  ((ofxTLEmptyKeyframe *) x));
}
static void *_p_ofxTLSwitchTo_p_ofxTLKeyframe(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofxTLKeyframe *)  ((ofxTLSwitch *) x));
}
static void *_p_ofxTLBangsTo_p_ofxTLKeyframes(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofxTLKeyframes *)  ((ofxTLBangs *) x));
}
static void *_p_ofxTLCameraTrackTo_p_ofxTLKeyframes(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofxTLKeyframes *)  ((ofxTLCameraTrack *) x));
}
static void *_p_ofxTLColorTrackTo_p_ofxTLKeyframes(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofxTLKeyframes *)  ((ofxTLColorTrack *) x));
}
static void *_p_ofxTLEmptyKeyframesTo_p_ofxTLKeyframes(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofxTLKeyframes *)  ((ofxTLEmptyKeyframes *) x));
}
static void *_p_ofxTLSwitchesTo_p_ofxTLKeyframes(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofxTLKeyframes *)  ((ofxTLSwitches *) x));
}
static void *_p_ofxTLAudioTrackTo_p_ofxTLTrack(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofxTLTrack *)  ((ofxTLAudioTrack *) x));
}
static void *_p_ofxTLBangsTo_p_ofxTLTrack(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofxTLTrack *) (ofxTLKeyframes *) ((ofxTLBangs *) x));
}
static void *_p_ofxTLCameraTrackTo_p_ofxTLTrack(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofxTLTrack *) (ofxTLKeyframes *) ((ofxTLCameraTrack *) x));
}
static void *_p_ofxTLColorTrackTo_p_ofxTLTrack(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofxTLTrack *) (ofxTLKeyframes *) ((ofxTLColorTrack *) x));
}
static void *_p_ofxTLEmptyKeyframesTo_p_ofxTLTrack(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofxTLTrack *) (ofxTLKeyframes *) ((ofxTLEmptyKeyframes *) x));
}
static void *_p_ofxTLEmptyTrackTo_p_ofxTLTrack(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofxTLTrack *)  ((ofxTLEmptyTrack *) x));
}
static void *_p_ofxTLImageSequenceTo_p_ofxTLTrack(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofxTLTrack *)  ((ofxTLImageSequence *) x));
}
static void *_p_ofxTLKeyframesTo_p_ofxTLTrack(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofxTLTrack *)  ((ofxTLKeyframes *) x));
}
static void *_p_ofxTLSwitchesTo_p_ofxTLTrack(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofxTLTrack *) (ofxTLKeyframes *) ((ofxTLSwitches *) x));
}
static swig_type_info _swigt__p_CameraTrackEase = {"_p_CameraTrackEase", "CameraTrackEase *|enum CameraTrackEase *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ClickPoint = {"_p_ClickPoint", "ClickPoint *", 0, 0, (void*)&_wrap_class_ClickPoint, 0};
static swig_type_info _swigt__p_GLint = {"_p_GLint", "GLint *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PreviewTexture = {"_p_PreviewTexture", "PreviewTexture *", 0, 0, (void*)&_wrap_class_PreviewTexture, 0};
static swig_type_info _swigt__p_UndoItem = {"_p_UndoItem", "UndoItem *", 0, 0, (void*)&_wrap_class_UndoItem, 0};
static swig_type_info _swigt__p_glm__quat = {"_p_glm__quat", "glm::quat *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_glm__vec2 = {"_p_glm__vec2", "glm::vec2 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_glm__vec3 = {"_p_glm__vec3", "glm::vec3 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofBaseHasPixels = {"_p_ofBaseHasPixels", "ofBaseHasPixels *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofCamera = {"_p_ofCamera", "ofCamera *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofColor = {"_p_ofColor", "ofColor *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofEventArgs = {"_p_ofEventArgs", "ofEventArgs *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofImage = {"_p_ofImage", "ofImage *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofKeyEventArgs = {"_p_ofKeyEventArgs", "ofKeyEventArgs *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofLongRange = {"_p_ofLongRange", "ofLongRange *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofLoopType = {"_p_ofLoopType", "ofLoopType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofMouseEventArgs = {"_p_ofMouseEventArgs", "ofMouseEventArgs *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofPtrT_ofVideoPlayer_t = {"_p_ofPtrT_ofVideoPlayer_t", "ofPtr< ofVideoPlayer > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofRange = {"_p_ofRange", "ofRange *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofRectangle = {"_p_ofRectangle", "ofRectangle *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofResizeEventArgs = {"_p_ofResizeEventArgs", "ofResizeEventArgs *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofTexture = {"_p_ofTexture", "ofTexture *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofTrueTypeFont = {"_p_ofTrueTypeFont", "ofTrueTypeFont *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofVec2f = {"_p_ofVec2f", "ofVec2f *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofVideoPlayer = {"_p_ofVideoPlayer", "ofVideoPlayer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofxMSATimer = {"_p_ofxMSATimer", "ofxMSATimer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofxTLAudioTrack = {"_p_ofxTLAudioTrack", "ofxTLAudioTrack *", 0, 0, (void*)&_wrap_class_ofxTLAudioTrack, 0};
static swig_type_info _swigt__p_ofxTLBangs = {"_p_ofxTLBangs", "ofxTLBangs *", 0, 0, (void*)&_wrap_class_ofxTLBangs, 0};
static swig_type_info _swigt__p_ofxTLCameraFrame = {"_p_ofxTLCameraFrame", "ofxTLCameraFrame *", 0, 0, (void*)&_wrap_class_ofxTLCameraFrame, 0};
static swig_type_info _swigt__p_ofxTLCameraTrack = {"_p_ofxTLCameraTrack", "ofxTLCameraTrack *", 0, 0, (void*)&_wrap_class_ofxTLCameraTrack, 0};
static swig_type_info _swigt__p_ofxTLColorSample = {"_p_ofxTLColorSample", "ofxTLColorSample *", 0, 0, (void*)&_wrap_class_ofxTLColorSample, 0};
static swig_type_info _swigt__p_ofxTLColorTrack = {"_p_ofxTLColorTrack", "ofxTLColorTrack *", 0, 0, (void*)&_wrap_class_ofxTLColorTrack, 0};
static swig_type_info _swigt__p_ofxTLColors = {"_p_ofxTLColors", "ofxTLColors *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofxTLCurves = {"_p_ofxTLCurves", "ofxTLCurves *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofxTLEmptyKeyframe = {"_p_ofxTLEmptyKeyframe", "ofxTLEmptyKeyframe *", 0, 0, (void*)&_wrap_class_ofxTLEmptyKeyframe, 0};
static swig_type_info _swigt__p_ofxTLEmptyKeyframes = {"_p_ofxTLEmptyKeyframes", "ofxTLEmptyKeyframes *", 0, 0, (void*)&_wrap_class_ofxTLEmptyKeyframes, 0};
static swig_type_info _swigt__p_ofxTLEmptyTrack = {"_p_ofxTLEmptyTrack", "ofxTLEmptyTrack *", 0, 0, (void*)&_wrap_class_ofxTLEmptyTrack, 0};
static swig_type_info _swigt__p_ofxTLEvents = {"_p_ofxTLEvents", "ofxTLEvents *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofxTLFlags = {"_p_ofxTLFlags", "ofxTLFlags *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofxTLImageSequence = {"_p_ofxTLImageSequence", "ofxTLImageSequence *", 0, 0, (void*)&_wrap_class_ofxTLImageSequence, 0};
static swig_type_info _swigt__p_ofxTLKeyframe = {"_p_ofxTLKeyframe", "ofxTLKeyframe *", 0, 0, (void*)&_wrap_class_ofxTLKeyframe, 0};
static swig_type_info _swigt__p_ofxTLKeyframes = {"_p_ofxTLKeyframes", "ofxTLKeyframes *", 0, 0, (void*)&_wrap_class_ofxTLKeyframes, 0};
static swig_type_info _swigt__p_ofxTLLFO = {"_p_ofxTLLFO", "ofxTLLFO *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofxTLPage = {"_p_ofxTLPage", "ofxTLPage *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofxTLPlaybackEventArgs = {"_p_ofxTLPlaybackEventArgs", "ofxTLPlaybackEventArgs *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofxTLSwitch = {"_p_ofxTLSwitch", "ofxTLSwitch *", 0, 0, (void*)&_wrap_class_ofxTLSwitch, 0};
static swig_type_info _swigt__p_ofxTLSwitches = {"_p_ofxTLSwitches", "ofxTLSwitches *", 0, 0, (void*)&_wrap_class_ofxTLSwitches, 0};
static swig_type_info _swigt__p_ofxTLTrack = {"_p_ofxTLTrack", "ofxTLTrack *", 0, 0, (void*)&_wrap_class_ofxTLTrack, 0};
static swig_type_info _swigt__p_ofxTLTrackHeader = {"_p_ofxTLTrackHeader", "ofxTLTrackHeader *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofxTLVideoTrack = {"_p_ofxTLVideoTrack", "ofxTLVideoTrack *", 0, 0, (void*)&_wrap_class_ofxTLVideoTrack, 0};
static swig_type_info _swigt__p_ofxTLZoomEventArgs = {"_p_ofxTLZoomEventArgs", "ofxTLZoomEventArgs *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofxTLZoomer = {"_p_ofxTLZoomer", "ofxTLZoomer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofxTextInputField = {"_p_ofxTextInputField", "ofxTextInputField *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofxTimecode = {"_p_ofxTimecode", "ofxTimecode *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofxTimeline = {"_p_ofxTimeline", "ofxTimeline *", 0, 0, (void*)&_wrap_class_ofxTimeline, 0};
static swig_type_info _swigt__p_std__setT_unsigned_long_long_t = {"_p_std__setT_unsigned_long_long_t", "std::set< unsigned long long > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__string = {"_p_std__string", "string *|std::string *", 0, 0, (void*)&_wrap_class_string, 0};
static swig_type_info _swigt__p_vectorT_PreviewTexture_t = {"_p_vectorT_PreviewTexture_t", "vector< PreviewTexture > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vectorT_float_t = {"_p_vectorT_float_t", "vector< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vectorT_ofxTLKeyframe_p_t = {"_p_vectorT_ofxTLKeyframe_p_t", "vector< ofxTLKeyframe * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vectorT_ofxTLPage_p_t = {"_p_vectorT_ofxTLPage_p_t", "vector< ofxTLPage * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vectorT_std__string_t = {"_p_vectorT_std__string_t", "vector< string > *|vector< std::string > *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_CameraTrackEase,
  &_swigt__p_ClickPoint,
  &_swigt__p_GLint,
  &_swigt__p_PreviewTexture,
  &_swigt__p_UndoItem,
  &_swigt__p_glm__quat,
  &_swigt__p_glm__vec2,
  &_swigt__p_glm__vec3,
  &_swigt__p_ofBaseHasPixels,
  &_swigt__p_ofCamera,
  &_swigt__p_ofColor,
  &_swigt__p_ofEventArgs,
  &_swigt__p_ofImage,
  &_swigt__p_ofKeyEventArgs,
  &_swigt__p_ofLongRange,
  &_swigt__p_ofLoopType,
  &_swigt__p_ofMouseEventArgs,
  &_swigt__p_ofPtrT_ofVideoPlayer_t,
  &_swigt__p_ofRange,
  &_swigt__p_ofRectangle,
  &_swigt__p_ofResizeEventArgs,
  &_swigt__p_ofTexture,
  &_swigt__p_ofTrueTypeFont,
  &_swigt__p_ofVec2f,
  &_swigt__p_ofVideoPlayer,
  &_swigt__p_ofxMSATimer,
  &_swigt__p_ofxTLAudioTrack,
  &_swigt__p_ofxTLBangs,
  &_swigt__p_ofxTLCameraFrame,
  &_swigt__p_ofxTLCameraTrack,
  &_swigt__p_ofxTLColorSample,
  &_swigt__p_ofxTLColorTrack,
  &_swigt__p_ofxTLColors,
  &_swigt__p_ofxTLCurves,
  &_swigt__p_ofxTLEmptyKeyframe,
  &_swigt__p_ofxTLEmptyKeyframes,
  &_swigt__p_ofxTLEmptyTrack,
  &_swigt__p_ofxTLEvents,
  &_swigt__p_ofxTLFlags,
  &_swigt__p_ofxTLImageSequence,
  &_swigt__p_ofxTLKeyframe,
  &_swigt__p_ofxTLKeyframes,
  &_swigt__p_ofxTLLFO,
  &_swigt__p_ofxTLPage,
  &_swigt__p_ofxTLPlaybackEventArgs,
  &_swigt__p_ofxTLSwitch,
  &_swigt__p_ofxTLSwitches,
  &_swigt__p_ofxTLTrack,
  &_swigt__p_ofxTLTrackHeader,
  &_swigt__p_ofxTLVideoTrack,
  &_swigt__p_ofxTLZoomEventArgs,
  &_swigt__p_ofxTLZoomer,
  &_swigt__p_ofxTextInputField,
  &_swigt__p_ofxTimecode,
  &_swigt__p_ofxTimeline,
  &_swigt__p_std__setT_unsigned_long_long_t,
  &_swigt__p_std__string,
  &_swigt__p_vectorT_PreviewTexture_t,
  &_swigt__p_vectorT_float_t,
  &_swigt__p_vectorT_ofxTLKeyframe_p_t,
  &_swigt__p_vectorT_ofxTLPage_p_t,
  &_swigt__p_vectorT_std__string_t,
};

static swig_cast_info _swigc__p_CameraTrackEase[] = {  {&_swigt__p_CameraTrackEase, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ClickPoint[] = {  {&_swigt__p_ClickPoint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GLint[] = {  {&_swigt__p_GLint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PreviewTexture[] = {  {&_swigt__p_PreviewTexture, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_UndoItem[] = {  {&_swigt__p_UndoItem, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_glm__quat[] = {  {&_swigt__p_glm__quat, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_glm__vec2[] = {  {&_swigt__p_glm__vec2, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_glm__vec3[] = {  {&_swigt__p_glm__vec3, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofBaseHasPixels[] = {  {&_swigt__p_ofBaseHasPixels, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofCamera[] = {  {&_swigt__p_ofCamera, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofColor[] = {  {&_swigt__p_ofColor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofEventArgs[] = {  {&_swigt__p_ofEventArgs, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofImage[] = {  {&_swigt__p_ofImage, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofKeyEventArgs[] = {  {&_swigt__p_ofKeyEventArgs, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofLongRange[] = {  {&_swigt__p_ofLongRange, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofLoopType[] = {  {&_swigt__p_ofLoopType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofMouseEventArgs[] = {  {&_swigt__p_ofMouseEventArgs, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofPtrT_ofVideoPlayer_t[] = {  {&_swigt__p_ofPtrT_ofVideoPlayer_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofRange[] = {  {&_swigt__p_ofRange, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofRectangle[] = {  {&_swigt__p_ofRectangle, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofResizeEventArgs[] = {  {&_swigt__p_ofResizeEventArgs, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofTexture[] = {  {&_swigt__p_ofTexture, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofTrueTypeFont[] = {  {&_swigt__p_ofTrueTypeFont, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofVec2f[] = {  {&_swigt__p_ofVec2f, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofVideoPlayer[] = {  {&_swigt__p_ofVideoPlayer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofxMSATimer[] = {  {&_swigt__p_ofxMSATimer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofxTLAudioTrack[] = {  {&_swigt__p_ofxTLAudioTrack, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofxTLBangs[] = {  {&_swigt__p_ofxTLBangs, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofxTLCameraFrame[] = {  {&_swigt__p_ofxTLCameraFrame, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofxTLCameraTrack[] = {  {&_swigt__p_ofxTLCameraTrack, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofxTLColorSample[] = {  {&_swigt__p_ofxTLColorSample, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofxTLColorTrack[] = {  {&_swigt__p_ofxTLColorTrack, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofxTLColors[] = {  {&_swigt__p_ofxTLColors, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofxTLCurves[] = {  {&_swigt__p_ofxTLCurves, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofxTLEmptyKeyframe[] = {  {&_swigt__p_ofxTLEmptyKeyframe, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofxTLEmptyKeyframes[] = {  {&_swigt__p_ofxTLEmptyKeyframes, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofxTLEmptyTrack[] = {  {&_swigt__p_ofxTLEmptyTrack, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofxTLEvents[] = {  {&_swigt__p_ofxTLEvents, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofxTLFlags[] = {  {&_swigt__p_ofxTLFlags, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofxTLImageSequence[] = {  {&_swigt__p_ofxTLImageSequence, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofxTLKeyframe[] = {  {&_swigt__p_ofxTLKeyframe, 0, 0, 0},  {&_swigt__p_ofxTLCameraFrame, _p_ofxTLCameraFrameTo_p_ofxTLKeyframe, 0, 0},  {&_swigt__p_ofxTLColorSample, _p_ofxTLColorSampleTo_p_ofxTLKeyframe, 0, 0},  {&_swigt__p_ofxTLEmptyKeyframe, _p_ofxTLEmptyKeyframeTo_p_ofxTLKeyframe, 0, 0},  {&_swigt__p_ofxTLSwitch, _p_ofxTLSwitchTo_p_ofxTLKeyframe, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofxTLKeyframes[] = {  {&_swigt__p_ofxTLKeyframes, 0, 0, 0},  {&_swigt__p_ofxTLBangs, _p_ofxTLBangsTo_p_ofxTLKeyframes, 0, 0},  {&_swigt__p_ofxTLCameraTrack, _p_ofxTLCameraTrackTo_p_ofxTLKeyframes, 0, 0},  {&_swigt__p_ofxTLColorTrack, _p_ofxTLColorTrackTo_p_ofxTLKeyframes, 0, 0},  {&_swigt__p_ofxTLEmptyKeyframes, _p_ofxTLEmptyKeyframesTo_p_ofxTLKeyframes, 0, 0},  {&_swigt__p_ofxTLSwitches, _p_ofxTLSwitchesTo_p_ofxTLKeyframes, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofxTLLFO[] = {  {&_swigt__p_ofxTLLFO, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofxTLPage[] = {  {&_swigt__p_ofxTLPage, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofxTLPlaybackEventArgs[] = {  {&_swigt__p_ofxTLPlaybackEventArgs, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofxTLSwitch[] = {  {&_swigt__p_ofxTLSwitch, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofxTLSwitches[] = {  {&_swigt__p_ofxTLSwitches, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofxTLTrack[] = {  {&_swigt__p_ofxTLTrack, 0, 0, 0},  {&_swigt__p_ofxTLAudioTrack, _p_ofxTLAudioTrackTo_p_ofxTLTrack, 0, 0},  {&_swigt__p_ofxTLBangs, _p_ofxTLBangsTo_p_ofxTLTrack, 0, 0},  {&_swigt__p_ofxTLCameraTrack, _p_ofxTLCameraTrackTo_p_ofxTLTrack, 0, 0},  {&_swigt__p_ofxTLColorTrack, _p_ofxTLColorTrackTo_p_ofxTLTrack, 0, 0},  {&_swigt__p_ofxTLEmptyKeyframes, _p_ofxTLEmptyKeyframesTo_p_ofxTLTrack, 0, 0},  {&_swigt__p_ofxTLEmptyTrack, _p_ofxTLEmptyTrackTo_p_ofxTLTrack, 0, 0},  {&_swigt__p_ofxTLImageSequence, _p_ofxTLImageSequenceTo_p_ofxTLTrack, 0, 0},  {&_swigt__p_ofxTLKeyframes, _p_ofxTLKeyframesTo_p_ofxTLTrack, 0, 0},  {&_swigt__p_ofxTLSwitches, _p_ofxTLSwitchesTo_p_ofxTLTrack, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofxTLTrackHeader[] = {  {&_swigt__p_ofxTLTrackHeader, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofxTLVideoTrack[] = {  {&_swigt__p_ofxTLVideoTrack, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofxTLZoomEventArgs[] = {  {&_swigt__p_ofxTLZoomEventArgs, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofxTLZoomer[] = {  {&_swigt__p_ofxTLZoomer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofxTextInputField[] = {  {&_swigt__p_ofxTextInputField, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofxTimecode[] = {  {&_swigt__p_ofxTimecode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofxTimeline[] = {  {&_swigt__p_ofxTimeline, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__setT_unsigned_long_long_t[] = {  {&_swigt__p_std__setT_unsigned_long_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__string[] = {  {&_swigt__p_std__string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vectorT_PreviewTexture_t[] = {  {&_swigt__p_vectorT_PreviewTexture_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vectorT_float_t[] = {  {&_swigt__p_vectorT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vectorT_ofxTLKeyframe_p_t[] = {  {&_swigt__p_vectorT_ofxTLKeyframe_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vectorT_ofxTLPage_p_t[] = {  {&_swigt__p_vectorT_ofxTLPage_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vectorT_std__string_t[] = {  {&_swigt__p_vectorT_std__string_t, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_CameraTrackEase,
  _swigc__p_ClickPoint,
  _swigc__p_GLint,
  _swigc__p_PreviewTexture,
  _swigc__p_UndoItem,
  _swigc__p_glm__quat,
  _swigc__p_glm__vec2,
  _swigc__p_glm__vec3,
  _swigc__p_ofBaseHasPixels,
  _swigc__p_ofCamera,
  _swigc__p_ofColor,
  _swigc__p_ofEventArgs,
  _swigc__p_ofImage,
  _swigc__p_ofKeyEventArgs,
  _swigc__p_ofLongRange,
  _swigc__p_ofLoopType,
  _swigc__p_ofMouseEventArgs,
  _swigc__p_ofPtrT_ofVideoPlayer_t,
  _swigc__p_ofRange,
  _swigc__p_ofRectangle,
  _swigc__p_ofResizeEventArgs,
  _swigc__p_ofTexture,
  _swigc__p_ofTrueTypeFont,
  _swigc__p_ofVec2f,
  _swigc__p_ofVideoPlayer,
  _swigc__p_ofxMSATimer,
  _swigc__p_ofxTLAudioTrack,
  _swigc__p_ofxTLBangs,
  _swigc__p_ofxTLCameraFrame,
  _swigc__p_ofxTLCameraTrack,
  _swigc__p_ofxTLColorSample,
  _swigc__p_ofxTLColorTrack,
  _swigc__p_ofxTLColors,
  _swigc__p_ofxTLCurves,
  _swigc__p_ofxTLEmptyKeyframe,
  _swigc__p_ofxTLEmptyKeyframes,
  _swigc__p_ofxTLEmptyTrack,
  _swigc__p_ofxTLEvents,
  _swigc__p_ofxTLFlags,
  _swigc__p_ofxTLImageSequence,
  _swigc__p_ofxTLKeyframe,
  _swigc__p_ofxTLKeyframes,
  _swigc__p_ofxTLLFO,
  _swigc__p_ofxTLPage,
  _swigc__p_ofxTLPlaybackEventArgs,
  _swigc__p_ofxTLSwitch,
  _swigc__p_ofxTLSwitches,
  _swigc__p_ofxTLTrack,
  _swigc__p_ofxTLTrackHeader,
  _swigc__p_ofxTLVideoTrack,
  _swigc__p_ofxTLZoomEventArgs,
  _swigc__p_ofxTLZoomer,
  _swigc__p_ofxTextInputField,
  _swigc__p_ofxTimecode,
  _swigc__p_ofxTimeline,
  _swigc__p_std__setT_unsigned_long_long_t,
  _swigc__p_std__string,
  _swigc__p_vectorT_PreviewTexture_t,
  _swigc__p_vectorT_float_t,
  _swigc__p_vectorT_ofxTLKeyframe_p_t,
  _swigc__p_vectorT_ofxTLPage_p_t,
  _swigc__p_vectorT_std__string_t,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif

#ifndef SWIG_INIT_CLIENT_DATA_TYPE
#define SWIG_INIT_CLIENT_DATA_TYPE void *
#endif

SWIGRUNTIME void
SWIG_InitializeModule(SWIG_INIT_CLIENT_DATA_TYPE clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpreters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %lu\n", (unsigned long)swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {

      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif



/* Forward declaration of where the user's %init{} gets inserted */
void SWIG_init_user(lua_State* L );
    
#ifdef __cplusplus
extern "C" {
#endif
/* this is the initialization function
  added at the very end of the code
  the function is always called SWIG_init, but an earlier #define will rename it
*/
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
LUALIB_API int SWIG_init(lua_State* L)
#else
SWIGEXPORT int SWIG_init(lua_State* L) /* default Lua action */
#endif
{
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC) /* valid for both Lua and eLua */
  int i;
  int globalRegister = 0;
  /* start with global table */
  lua_pushglobaltable (L);
  /* SWIG's internal initialisation */
  SWIG_InitializeModule((void*)L);
  SWIG_PropagateClientData();
#endif

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)) || defined(SWIG_LUA_ELUA_EMULATE)
  /* add a global fn */
  SWIG_Lua_add_function(L,"swig_type",SWIG_Lua_type);
  SWIG_Lua_add_function(L,"swig_equals",SWIG_Lua_class_equal);
#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* set up base class pointers (the hierarchy) */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_init_base_class(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
#ifdef SWIG_LUA_MODULE_GLOBAL
  globalRegister = 1;
#endif


#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  SWIG_Lua_namespace_register(L,&swig_SwigModule, globalRegister);
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_elua_class_register_instance(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
#endif

#if defined(SWIG_LUA_ELUA_EMULATE)
  lua_newtable(L);
  SWIG_Lua_elua_emulate_register(L,swig_SwigModule.ns_methods);
  SWIG_Lua_elua_emulate_register_clear(L);
  if(globalRegister) {
    lua_pushstring(L,swig_SwigModule.name);
    lua_pushvalue(L,-2);
    lua_rawset(L,-4);
  }
#endif

#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* invoke user-specific initialization */
  SWIG_init_user(L);
  /* end module */
  /* Note: We do not clean up the stack here (Lua will do this for us). At this
     point, we have the globals table and out module table on the stack. Returning
     one value makes the module table the result of the require command. */
  return 1;
#else
  return 0;
#endif
}

#ifdef __cplusplus
}
#endif


const char* SWIG_LUACODE=
  "";

void SWIG_init_user(lua_State* L)
{
  /* exec Lua code if applicable */
  SWIG_Lua_dostring(L,SWIG_LUACODE);
}

